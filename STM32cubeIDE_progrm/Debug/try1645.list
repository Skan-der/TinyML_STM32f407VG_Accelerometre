
try1645.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009478  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00009304  08009620  08009620  00019620  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012924  08012924  0003091c  2**0
                  CONTENTS
  4 .ARM          00000008  08012924  08012924  00022924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801292c  0801292c  0003091c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801292c  0801292c  0002292c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012930  08012930  00022930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000091c  20000000  08012934  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003091c  2**0
                  CONTENTS
 10 .bss          00000350  2000091c  2000091c  0003091c  2**2
                  ALLOC
 11 ._user_heap_stack 00001004  20000c6c  20000c6c  0003091c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003091c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0003094c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010e28  00000000  00000000  0003098f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000259b  00000000  00000000  000417b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f58  00000000  00000000  00043d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000be0  00000000  00000000  00044cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002418c  00000000  00000000  00045890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000116ba  00000000  00000000  00069a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000db8ae  00000000  00000000  0007b0d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000052a4  00000000  00000000  00156984  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0015bc28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000091c 	.word	0x2000091c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095f0 	.word	0x080095f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000920 	.word	0x20000920
 80001cc:	080095f0 	.word	0x080095f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LIS3DSH_WriteIO>:

//Functions definitions
//Private functions
//1. Write IO
void LIS3DSH_WriteIO(uint8_t reg, uint8_t *dataW, uint8_t size)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	71fb      	strb	r3, [r7, #7]
 8000eb0:	4613      	mov	r3, r2
 8000eb2:	71bb      	strb	r3, [r7, #6]
	uint8_t spiReg = reg;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	73fb      	strb	r3, [r7, #15]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2108      	movs	r1, #8
 8000ebc:	480c      	ldr	r0, [pc, #48]	; (8000ef0 <LIS3DSH_WriteIO+0x4c>)
 8000ebe:	f001 fbbb 	bl	8002638 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, &spiReg, 1, 10);
 8000ec2:	f107 010f 	add.w	r1, r7, #15
 8000ec6:	230a      	movs	r3, #10
 8000ec8:	2201      	movs	r2, #1
 8000eca:	480a      	ldr	r0, [pc, #40]	; (8000ef4 <LIS3DSH_WriteIO+0x50>)
 8000ecc:	f002 f8af 	bl	800302e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Transmit(&accSPI_Handle, dataW, size, 10);
 8000ed0:	79bb      	ldrb	r3, [r7, #6]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	230a      	movs	r3, #10
 8000ed6:	6839      	ldr	r1, [r7, #0]
 8000ed8:	4806      	ldr	r0, [pc, #24]	; (8000ef4 <LIS3DSH_WriteIO+0x50>)
 8000eda:	f002 f8a8 	bl	800302e <HAL_SPI_Transmit>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000ede:	2201      	movs	r2, #1
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	4803      	ldr	r0, [pc, #12]	; (8000ef0 <LIS3DSH_WriteIO+0x4c>)
 8000ee4:	f001 fba8 	bl	8002638 <HAL_GPIO_WritePin>
}
 8000ee8:	bf00      	nop
 8000eea:	3710      	adds	r7, #16
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40021000 	.word	0x40021000
 8000ef4:	20000938 	.word	0x20000938

08000ef8 <LIS3DSH_ReadIO>:
//2. Read IO
void LIS3DSH_ReadIO(uint8_t reg, uint8_t *dataR, uint8_t size)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	4603      	mov	r3, r0
 8000f00:	6039      	str	r1, [r7, #0]
 8000f02:	71fb      	strb	r3, [r7, #7]
 8000f04:	4613      	mov	r3, r2
 8000f06:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[4];
	spiBuf[0] = reg | 0x80;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	723b      	strb	r3, [r7, #8]
	//Enable CS
	_LIS3DHS_CS_ENBALE;
 8000f12:	2200      	movs	r2, #0
 8000f14:	2108      	movs	r1, #8
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <LIS3DSH_ReadIO+0x80>)
 8000f18:	f001 fb8e 	bl	8002638 <HAL_GPIO_WritePin>
	//set register value
	HAL_SPI_Transmit(&accSPI_Handle, spiBuf, 1, 10);
 8000f1c:	f107 0108 	add.w	r1, r7, #8
 8000f20:	230a      	movs	r3, #10
 8000f22:	2201      	movs	r2, #1
 8000f24:	4815      	ldr	r0, [pc, #84]	; (8000f7c <LIS3DSH_ReadIO+0x84>)
 8000f26:	f002 f882 	bl	800302e <HAL_SPI_Transmit>
	//Transmit data
	HAL_SPI_Receive(&accSPI_Handle, spiBuf, size, 10);
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	f107 0108 	add.w	r1, r7, #8
 8000f32:	230a      	movs	r3, #10
 8000f34:	4811      	ldr	r0, [pc, #68]	; (8000f7c <LIS3DSH_ReadIO+0x84>)
 8000f36:	f002 f9be 	bl	80032b6 <HAL_SPI_Receive>
	//Disable CS
	_LIS3DHS_CS_DISABLE;
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	2108      	movs	r1, #8
 8000f3e:	480e      	ldr	r0, [pc, #56]	; (8000f78 <LIS3DSH_ReadIO+0x80>)
 8000f40:	f001 fb7a 	bl	8002638 <HAL_GPIO_WritePin>
	
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f44:	2300      	movs	r3, #0
 8000f46:	73fb      	strb	r3, [r7, #15]
 8000f48:	e00b      	b.n	8000f62 <LIS3DSH_ReadIO+0x6a>
	{
		dataR[i] = spiBuf[i];
 8000f4a:	7bfa      	ldrb	r2, [r7, #15]
 8000f4c:	7bfb      	ldrb	r3, [r7, #15]
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	440b      	add	r3, r1
 8000f52:	3210      	adds	r2, #16
 8000f54:	443a      	add	r2, r7
 8000f56:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8000f5a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i=0; i<(size&0x3); i++)
 8000f5c:	7bfb      	ldrb	r3, [r7, #15]
 8000f5e:	3301      	adds	r3, #1
 8000f60:	73fb      	strb	r3, [r7, #15]
 8000f62:	7bfa      	ldrb	r2, [r7, #15]
 8000f64:	79bb      	ldrb	r3, [r7, #6]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	dbed      	blt.n	8000f4a <LIS3DSH_ReadIO+0x52>
	}
}
 8000f6e:	bf00      	nop
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	20000938 	.word	0x20000938

08000f80 <LIS3DSH_Init>:


//1. Accelerometer initialise function
void LIS3DSH_Init(SPI_HandleTypeDef *accSPI, LIS3DSH_InitTypeDef *accInitDef)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
 8000f88:	6039      	str	r1, [r7, #0]
	uint8_t spiData = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
	
	memcpy(&accSPI_Handle, accSPI, sizeof(*accSPI));
 8000f8e:	2258      	movs	r2, #88	; 0x58
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	485b      	ldr	r0, [pc, #364]	; (8001100 <LIS3DSH_Init+0x180>)
 8000f94:	f006 fa6f 	bl	8007476 <memcpy>
	//** 1. Enable Axes and Output Data Rate **//
	//Set CTRL REG4 settings value
	spiData |= (accInitDef->enableAxes & 0x07);		//Enable Axes
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	78db      	ldrb	r3, [r3, #3]
 8000f9c:	b25b      	sxtb	r3, r3
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	b25a      	sxtb	r2, r3
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	b25b      	sxtb	r3, r3
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	b25b      	sxtb	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->dataRate & 0xF0);			//Output Data Rate
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	b25b      	sxtb	r3, r3
 8000fb6:	f023 030f 	bic.w	r3, r3, #15
 8000fba:	b25a      	sxtb	r2, r3
 8000fbc:	7bfb      	ldrb	r3, [r7, #15]
 8000fbe:	b25b      	sxtb	r3, r3
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b25b      	sxtb	r3, r3
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG4_ADDR, &spiData, 1);
 8000fc8:	f107 030f 	add.w	r3, r7, #15
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4619      	mov	r1, r3
 8000fd0:	2020      	movs	r0, #32
 8000fd2:	f7ff ff67 	bl	8000ea4 <LIS3DSH_WriteIO>
	
	//** 2. Full-Scale selection, Anti-aliasing BW, self test and 4-wire SPI **//
	spiData = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->antiAliasingBW & 0xC0);		//Anti-aliasing BW
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	789b      	ldrb	r3, [r3, #2]
 8000fde:	b25b      	sxtb	r3, r3
 8000fe0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000fe4:	b25a      	sxtb	r2, r3
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	b25b      	sxtb	r3, r3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	b25b      	sxtb	r3, r3
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	73fb      	strb	r3, [r7, #15]
	spiData |= (accInitDef->fullScale & 0x38);				//Full-Scale
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	785b      	ldrb	r3, [r3, #1]
 8000ff6:	b25b      	sxtb	r3, r3
 8000ff8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8000ffc:	b25a      	sxtb	r2, r3
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	b25b      	sxtb	r3, r3
 8001002:	4313      	orrs	r3, r2
 8001004:	b25b      	sxtb	r3, r3
 8001006:	b2db      	uxtb	r3, r3
 8001008:	73fb      	strb	r3, [r7, #15]
	//Write to accelerometer
	LIS3DSH_WriteIO(LIS3DSH_CTRL_REG5_ADDR, &spiData, 1);
 800100a:	f107 030f 	add.w	r3, r7, #15
 800100e:	2201      	movs	r2, #1
 8001010:	4619      	mov	r1, r3
 8001012:	2024      	movs	r0, #36	; 0x24
 8001014:	f7ff ff46 	bl	8000ea4 <LIS3DSH_WriteIO>
	
	//** 3. Interrupt Configuration **//
	if(accInitDef->interruptEnable)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	791b      	ldrb	r3, [r3, #4]
 800101c:	2b00      	cmp	r3, #0
 800101e:	d008      	beq.n	8001032 <LIS3DSH_Init+0xb2>
	{
		spiData = 0x88;
 8001020:	2388      	movs	r3, #136	; 0x88
 8001022:	73fb      	strb	r3, [r7, #15]
		//Write to accelerometer
		LIS3DSH_WriteIO(LIS3DSH_CTRL_REG3_ADDR, &spiData, 1);
 8001024:	f107 030f 	add.w	r3, r7, #15
 8001028:	2201      	movs	r2, #1
 800102a:	4619      	mov	r1, r3
 800102c:	2023      	movs	r0, #35	; 0x23
 800102e:	f7ff ff39 	bl	8000ea4 <LIS3DSH_WriteIO>
	}
	
	//Assign sensor sensitivity (based on Full-Scale)
	switch(accInitDef->fullScale)
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	785b      	ldrb	r3, [r3, #1]
 8001036:	2b20      	cmp	r3, #32
 8001038:	d858      	bhi.n	80010ec <LIS3DSH_Init+0x16c>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <LIS3DSH_Init+0xc0>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	080010c5 	.word	0x080010c5
 8001044:	080010ed 	.word	0x080010ed
 8001048:	080010ed 	.word	0x080010ed
 800104c:	080010ed 	.word	0x080010ed
 8001050:	080010ed 	.word	0x080010ed
 8001054:	080010ed 	.word	0x080010ed
 8001058:	080010ed 	.word	0x080010ed
 800105c:	080010ed 	.word	0x080010ed
 8001060:	080010cd 	.word	0x080010cd
 8001064:	080010ed 	.word	0x080010ed
 8001068:	080010ed 	.word	0x080010ed
 800106c:	080010ed 	.word	0x080010ed
 8001070:	080010ed 	.word	0x080010ed
 8001074:	080010ed 	.word	0x080010ed
 8001078:	080010ed 	.word	0x080010ed
 800107c:	080010ed 	.word	0x080010ed
 8001080:	080010d5 	.word	0x080010d5
 8001084:	080010ed 	.word	0x080010ed
 8001088:	080010ed 	.word	0x080010ed
 800108c:	080010ed 	.word	0x080010ed
 8001090:	080010ed 	.word	0x080010ed
 8001094:	080010ed 	.word	0x080010ed
 8001098:	080010ed 	.word	0x080010ed
 800109c:	080010ed 	.word	0x080010ed
 80010a0:	080010dd 	.word	0x080010dd
 80010a4:	080010ed 	.word	0x080010ed
 80010a8:	080010ed 	.word	0x080010ed
 80010ac:	080010ed 	.word	0x080010ed
 80010b0:	080010ed 	.word	0x080010ed
 80010b4:	080010ed 	.word	0x080010ed
 80010b8:	080010ed 	.word	0x080010ed
 80010bc:	080010ed 	.word	0x080010ed
 80010c0:	080010e5 	.word	0x080010e5
	{
		case LIS3DSH_FULLSCALE_2:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_06G;
 80010c4:	4b0f      	ldr	r3, [pc, #60]	; (8001104 <LIS3DSH_Init+0x184>)
 80010c6:	4a10      	ldr	r2, [pc, #64]	; (8001108 <LIS3DSH_Init+0x188>)
 80010c8:	601a      	str	r2, [r3, #0]
			break;
 80010ca:	e00f      	b.n	80010ec <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_4:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_12G;
 80010cc:	4b0d      	ldr	r3, [pc, #52]	; (8001104 <LIS3DSH_Init+0x184>)
 80010ce:	4a0f      	ldr	r2, [pc, #60]	; (800110c <LIS3DSH_Init+0x18c>)
 80010d0:	601a      	str	r2, [r3, #0]
			break;
 80010d2:	e00b      	b.n	80010ec <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_6:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_18G;
 80010d4:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <LIS3DSH_Init+0x184>)
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <LIS3DSH_Init+0x190>)
 80010d8:	601a      	str	r2, [r3, #0]
			break;
 80010da:	e007      	b.n	80010ec <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_8:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_24G;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <LIS3DSH_Init+0x184>)
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <LIS3DSH_Init+0x194>)
 80010e0:	601a      	str	r2, [r3, #0]
			break;
 80010e2:	e003      	b.n	80010ec <LIS3DSH_Init+0x16c>
		
		case LIS3DSH_FULLSCALE_16:
			lis3dsh_Sensitivity = LIS3DSH_SENSITIVITY_0_73G;
 80010e4:	4b07      	ldr	r3, [pc, #28]	; (8001104 <LIS3DSH_Init+0x184>)
 80010e6:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <LIS3DSH_Init+0x198>)
 80010e8:	601a      	str	r2, [r3, #0]
			break;
 80010ea:	bf00      	nop
	}
	_LIS3DHS_CS_DISABLE;
 80010ec:	2201      	movs	r2, #1
 80010ee:	2108      	movs	r1, #8
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <LIS3DSH_Init+0x19c>)
 80010f2:	f001 faa1 	bl	8002638 <HAL_GPIO_WritePin>
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	20000938 	.word	0x20000938
 8001104:	20000000 	.word	0x20000000
 8001108:	3d75c28f 	.word	0x3d75c28f
 800110c:	3df5c28f 	.word	0x3df5c28f
 8001110:	3e3851ec 	.word	0x3e3851ec
 8001114:	3e75c28f 	.word	0x3e75c28f
 8001118:	3f3ae148 	.word	0x3f3ae148
 800111c:	40021000 	.word	0x40021000

08001120 <LIS3DSH_GetDataRaw>:
//2. Get Accelerometer raw data
LIS3DSH_DataRaw LIS3DSH_GetDataRaw(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b086      	sub	sp, #24
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	uint8_t spiBuf[2];
	LIS3DSH_DataRaw tempDataRaw;
	//Read X data
	LIS3DSH_ReadIO(LIS3DSH_OUT_X_L_ADDR, spiBuf, 2);
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2202      	movs	r2, #2
 800112e:	4619      	mov	r1, r3
 8001130:	2028      	movs	r0, #40	; 0x28
 8001132:	f7ff fee1 	bl	8000ef8 <LIS3DSH_ReadIO>
	tempDataRaw.x = ((spiBuf[1] << 8) + spiBuf[0]);
 8001136:	7d7b      	ldrb	r3, [r7, #21]
 8001138:	b29b      	uxth	r3, r3
 800113a:	021b      	lsls	r3, r3, #8
 800113c:	b29a      	uxth	r2, r3
 800113e:	7d3b      	ldrb	r3, [r7, #20]
 8001140:	b29b      	uxth	r3, r3
 8001142:	4413      	add	r3, r2
 8001144:	b29b      	uxth	r3, r3
 8001146:	b21b      	sxth	r3, r3
 8001148:	81bb      	strh	r3, [r7, #12]
	
	//Read Y data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Y_L_ADDR, spiBuf, 2);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	2202      	movs	r2, #2
 8001150:	4619      	mov	r1, r3
 8001152:	202a      	movs	r0, #42	; 0x2a
 8001154:	f7ff fed0 	bl	8000ef8 <LIS3DSH_ReadIO>
	tempDataRaw.y = ((spiBuf[1] << 8) + spiBuf[0]);
 8001158:	7d7b      	ldrb	r3, [r7, #21]
 800115a:	b29b      	uxth	r3, r3
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b29a      	uxth	r2, r3
 8001160:	7d3b      	ldrb	r3, [r7, #20]
 8001162:	b29b      	uxth	r3, r3
 8001164:	4413      	add	r3, r2
 8001166:	b29b      	uxth	r3, r3
 8001168:	b21b      	sxth	r3, r3
 800116a:	81fb      	strh	r3, [r7, #14]
	
	//Read Z data
	LIS3DSH_ReadIO(LIS3DSH_OUT_Z_L_ADDR, spiBuf, 2);
 800116c:	f107 0314 	add.w	r3, r7, #20
 8001170:	2202      	movs	r2, #2
 8001172:	4619      	mov	r1, r3
 8001174:	202c      	movs	r0, #44	; 0x2c
 8001176:	f7ff febf 	bl	8000ef8 <LIS3DSH_ReadIO>
	tempDataRaw.z = ((spiBuf[1] << 8) + spiBuf[0]);
 800117a:	7d7b      	ldrb	r3, [r7, #21]
 800117c:	b29b      	uxth	r3, r3
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b29a      	uxth	r2, r3
 8001182:	7d3b      	ldrb	r3, [r7, #20]
 8001184:	b29b      	uxth	r3, r3
 8001186:	4413      	add	r3, r2
 8001188:	b29b      	uxth	r3, r3
 800118a:	b21b      	sxth	r3, r3
 800118c:	823b      	strh	r3, [r7, #16]
	
	return tempDataRaw;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	461a      	mov	r2, r3
 8001192:	f107 030c 	add.w	r3, r7, #12
 8001196:	6818      	ldr	r0, [r3, #0]
 8001198:	6010      	str	r0, [r2, #0]
 800119a:	889b      	ldrh	r3, [r3, #4]
 800119c:	8093      	strh	r3, [r2, #4]
	
}
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	3718      	adds	r7, #24
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <LIS3DSH_GetDataScaled>:
//3. Get Accelerometer mg data
LIS3DSH_DataScaled LIS3DSH_GetDataScaled(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08c      	sub	sp, #48	; 0x30
 80011ac:	af00      	add	r7, sp, #0
	//Read raw data
	LIS3DSH_DataRaw tempRawData = LIS3DSH_GetDataRaw();;
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4618      	mov	r0, r3
 80011b4:	f7ff ffb4 	bl	8001120 <LIS3DSH_GetDataRaw>
	//Scale data and return 
	LIS3DSH_DataScaled tempScaledData;
	tempScaledData.x = (tempRawData.x * lis3dsh_Sensitivity * __X_Scale) + 0.0f - __X_Bias;
 80011b8:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80011bc:	ee07 3a90 	vmov	s15, r3
 80011c0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c4:	4b31      	ldr	r3, [pc, #196]	; (800128c <LIS3DSH_GetDataScaled+0xe4>)
 80011c6:	edd3 7a00 	vldr	s15, [r3]
 80011ca:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011ce:	4b30      	ldr	r3, [pc, #192]	; (8001290 <LIS3DSH_GetDataScaled+0xe8>)
 80011d0:	edd3 7a00 	vldr	s15, [r3]
 80011d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d8:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8001294 <LIS3DSH_GetDataScaled+0xec>
 80011dc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80011e0:	4b2d      	ldr	r3, [pc, #180]	; (8001298 <LIS3DSH_GetDataScaled+0xf0>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ea:	edc7 7a04 	vstr	s15, [r7, #16]
	tempScaledData.y = (tempRawData.y * lis3dsh_Sensitivity * __Y_Scale) + 0.0f - __Y_Bias;
 80011ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80011f2:	ee07 3a90 	vmov	s15, r3
 80011f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011fa:	4b24      	ldr	r3, [pc, #144]	; (800128c <LIS3DSH_GetDataScaled+0xe4>)
 80011fc:	edd3 7a00 	vldr	s15, [r3]
 8001200:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001204:	4b25      	ldr	r3, [pc, #148]	; (800129c <LIS3DSH_GetDataScaled+0xf4>)
 8001206:	edd3 7a00 	vldr	s15, [r3]
 800120a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800120e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001294 <LIS3DSH_GetDataScaled+0xec>
 8001212:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001216:	4b22      	ldr	r3, [pc, #136]	; (80012a0 <LIS3DSH_GetDataScaled+0xf8>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001220:	edc7 7a05 	vstr	s15, [r7, #20]
	tempScaledData.z = (tempRawData.z * lis3dsh_Sensitivity * __Z_Scale) + 0.0f - __Z_Bias;
 8001224:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001228:	ee07 3a90 	vmov	s15, r3
 800122c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001230:	4b16      	ldr	r3, [pc, #88]	; (800128c <LIS3DSH_GetDataScaled+0xe4>)
 8001232:	edd3 7a00 	vldr	s15, [r3]
 8001236:	ee27 7a27 	vmul.f32	s14, s14, s15
 800123a:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <LIS3DSH_GetDataScaled+0xfc>)
 800123c:	edd3 7a00 	vldr	s15, [r3]
 8001240:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001244:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001294 <LIS3DSH_GetDataScaled+0xec>
 8001248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800124c:	4b16      	ldr	r3, [pc, #88]	; (80012a8 <LIS3DSH_GetDataScaled+0x100>)
 800124e:	edd3 7a00 	vldr	s15, [r3]
 8001252:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001256:	edc7 7a06 	vstr	s15, [r7, #24]
	
	return tempScaledData;
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	f107 0210 	add.w	r2, r7, #16
 8001262:	ca07      	ldmia	r2, {r0, r1, r2}
 8001264:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8001268:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800126a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800126c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800126e:	ee06 1a90 	vmov	s13, r1
 8001272:	ee07 2a10 	vmov	s14, r2
 8001276:	ee07 3a90 	vmov	s15, r3
}
 800127a:	eeb0 0a66 	vmov.f32	s0, s13
 800127e:	eef0 0a47 	vmov.f32	s1, s14
 8001282:	eeb0 1a67 	vmov.f32	s2, s15
 8001286:	3730      	adds	r7, #48	; 0x30
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000000 	.word	0x20000000
 8001290:	20000004 	.word	0x20000004
 8001294:	00000000 	.word	0x00000000
 8001298:	20000990 	.word	0x20000990
 800129c:	20000008 	.word	0x20000008
 80012a0:	20000994 	.word	0x20000994
 80012a4:	2000000c 	.word	0x2000000c
 80012a8:	20000998 	.word	0x20000998

080012ac <LIS3DSH_PollDRDY>:
//4. Poll for Data Ready
bool LIS3DSH_PollDRDY(uint32_t msTimeout)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
	uint8_t Acc_status;
	uint32_t startTick = HAL_GetTick();
 80012b4:	f000 ff0e 	bl	80020d4 <HAL_GetTick>
 80012b8:	60f8      	str	r0, [r7, #12]
	do
	{
		//Read status register with a timeout
		LIS3DSH_ReadIO(0x27, &Acc_status, 1);
 80012ba:	f107 030b 	add.w	r3, r7, #11
 80012be:	2201      	movs	r2, #1
 80012c0:	4619      	mov	r1, r3
 80012c2:	2027      	movs	r0, #39	; 0x27
 80012c4:	f7ff fe18 	bl	8000ef8 <LIS3DSH_ReadIO>
		if(Acc_status & 0x07)break;
 80012c8:	7afb      	ldrb	r3, [r7, #11]
 80012ca:	f003 0307 	and.w	r3, r3, #7
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <LIS3DSH_PollDRDY+0x42>
		
	}while((Acc_status & 0x07)==0 && (HAL_GetTick() - startTick) < msTimeout);
 80012d2:	7afb      	ldrb	r3, [r7, #11]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d109      	bne.n	80012f0 <LIS3DSH_PollDRDY+0x44>
 80012dc:	f000 fefa 	bl	80020d4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8e6      	bhi.n	80012ba <LIS3DSH_PollDRDY+0xe>
 80012ec:	e000      	b.n	80012f0 <LIS3DSH_PollDRDY+0x44>
		if(Acc_status & 0x07)break;
 80012ee:	bf00      	nop
	if(Acc_status & 0x07)
 80012f0:	7afb      	ldrb	r3, [r7, #11]
 80012f2:	f003 0307 	and.w	r3, r3, #7
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <LIS3DSH_PollDRDY+0x52>
	{
		return true;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e000      	b.n	8001300 <LIS3DSH_PollDRDY+0x54>
	}
	return false;
 80012fe:	2300      	movs	r3, #0
	
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <LIS3DSH_X_calibrate>:

//** Calibration functions **//
//1. Set X-Axis calibrate
void LIS3DSH_X_calibrate(float x_min, float x_max)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001312:	edc7 0a00 	vstr	s1, [r7]
	__X_Bias = (x_max+x_min)/2.0f;
 8001316:	ed97 7a00 	vldr	s14, [r7]
 800131a:	edd7 7a01 	vldr	s15, [r7, #4]
 800131e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001322:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001326:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800132a:	4b0b      	ldr	r3, [pc, #44]	; (8001358 <LIS3DSH_X_calibrate+0x50>)
 800132c:	edc3 7a00 	vstr	s15, [r3]
	__X_Scale = (2*1000)/(x_max - x_min);
 8001330:	ed97 7a00 	vldr	s14, [r7]
 8001334:	edd7 7a01 	vldr	s15, [r7, #4]
 8001338:	ee37 7a67 	vsub.f32	s14, s14, s15
 800133c:	eddf 6a07 	vldr	s13, [pc, #28]	; 800135c <LIS3DSH_X_calibrate+0x54>
 8001340:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <LIS3DSH_X_calibrate+0x58>)
 8001346:	edc3 7a00 	vstr	s15, [r3]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
 8001356:	bf00      	nop
 8001358:	20000990 	.word	0x20000990
 800135c:	44fa0000 	.word	0x44fa0000
 8001360:	20000004 	.word	0x20000004

08001364 <LIS3DSH_Y_calibrate>:
//2. Set Y-Axis calibrate
void LIS3DSH_Y_calibrate(float y_min, float y_max)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	ed87 0a01 	vstr	s0, [r7, #4]
 800136e:	edc7 0a00 	vstr	s1, [r7]
	__Y_Bias = (y_max+y_min)/2.0f;
 8001372:	ed97 7a00 	vldr	s14, [r7]
 8001376:	edd7 7a01 	vldr	s15, [r7, #4]
 800137a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800137e:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001382:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001386:	4b0b      	ldr	r3, [pc, #44]	; (80013b4 <LIS3DSH_Y_calibrate+0x50>)
 8001388:	edc3 7a00 	vstr	s15, [r3]
	__Y_Scale = (2*1000)/(y_max - y_min);
 800138c:	ed97 7a00 	vldr	s14, [r7]
 8001390:	edd7 7a01 	vldr	s15, [r7, #4]
 8001394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001398:	eddf 6a07 	vldr	s13, [pc, #28]	; 80013b8 <LIS3DSH_Y_calibrate+0x54>
 800139c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <LIS3DSH_Y_calibrate+0x58>)
 80013a2:	edc3 7a00 	vstr	s15, [r3]
}
 80013a6:	bf00      	nop
 80013a8:	370c      	adds	r7, #12
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	20000994 	.word	0x20000994
 80013b8:	44fa0000 	.word	0x44fa0000
 80013bc:	20000008 	.word	0x20000008

080013c0 <LIS3DSH_Z_calibrate>:
//3. Set Z-Axis calibrate
void LIS3DSH_Z_calibrate(float z_min, float z_max)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	ed87 0a01 	vstr	s0, [r7, #4]
 80013ca:	edc7 0a00 	vstr	s1, [r7]
	__Z_Bias = (z_max+z_min)/2.0f;
 80013ce:	ed97 7a00 	vldr	s14, [r7]
 80013d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80013d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80013da:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80013e2:	4b0b      	ldr	r3, [pc, #44]	; (8001410 <LIS3DSH_Z_calibrate+0x50>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
	__Z_Scale = (2*1000)/(z_max - z_min);
 80013e8:	ed97 7a00 	vldr	s14, [r7]
 80013ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80013f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80013f4:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001414 <LIS3DSH_Z_calibrate+0x54>
 80013f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <LIS3DSH_Z_calibrate+0x58>)
 80013fe:	edc3 7a00 	vstr	s15, [r3]
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	20000998 	.word	0x20000998
 8001414:	44fa0000 	.word	0x44fa0000
 8001418:	2000000c 	.word	0x2000000c

0800141c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800141c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001420:	f5ad 6d88 	sub.w	sp, sp, #1088	; 0x440
 8001424:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */
  LIS3DSH_InitTypeDef myAccConfigDef;
  LIS3DSH_DataScaled myData;

  char buf[100];
  int buf_len = 0;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
  AI_ALIGNED(4) ai_u8 activations[AI_MODEL_DATA_ACTIVATIONS_SIZE];
  AI_ALIGNED(4) ai_i8 in_data[AI_MODEL_IN_1_SIZE_BYTES];
  AI_ALIGNED(4) ai_i8 out_data[AI_MODEL_OUT_1_SIZE_BYTES];

  /* Neural Network Handle */
  ai_handle model = AI_HANDLE_NULL;
 800142c:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001430:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001434:	2200      	movs	r2, #0
 8001436:	601a      	str	r2, [r3, #0]

  /* Input/Output Buffers */
  ai_buffer ai_input[AI_MODEL_IN_NUM];
  ai_buffer* temp = ai_model_inputs_get(AI_HANDLE_NULL, NULL);
 8001438:	2100      	movs	r1, #0
 800143a:	2000      	movs	r0, #0
 800143c:	f003 fb3c 	bl	8004ab8 <ai_model_inputs_get>
 8001440:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414

  for (int i = 0; i < AI_MODEL_IN_NUM; i++) {
 8001444:	2300      	movs	r3, #0
 8001446:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800144a:	e021      	b.n	8001490 <main+0x74>
      ai_input[i] = temp[i];
 800144c:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	461a      	mov	r2, r3
 800145a:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 800145e:	1898      	adds	r0, r3, r2
 8001460:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001464:	f5a3 7177 	sub.w	r1, r3, #988	; 0x3dc
 8001468:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	461c      	mov	r4, r3
 8001478:	4605      	mov	r5, r0
 800147a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800147c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800147e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001482:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for (int i = 0; i < AI_MODEL_IN_NUM; i++) {
 8001486:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 800148a:	3301      	adds	r3, #1
 800148c:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 8001490:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 8001494:	2b00      	cmp	r3, #0
 8001496:	ddd9      	ble.n	800144c <main+0x30>
  }

  ai_buffer ai_output[AI_MODEL_OUT_NUM];
  ai_buffer* temp2 = ai_model_outputs_get(AI_HANDLE_NULL, NULL);
 8001498:	2100      	movs	r1, #0
 800149a:	2000      	movs	r0, #0
 800149c:	f003 fb26 	bl	8004aec <ai_model_outputs_get>
 80014a0:	f8c7 0410 	str.w	r0, [r7, #1040]	; 0x410
  for (int i = 0; i < AI_MODEL_OUT_NUM; i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80014aa:	e021      	b.n	80014f0 <main+0xd4>
      ai_output[i] = temp2[i];
 80014ac:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80014b0:	4613      	mov	r3, r2
 80014b2:	00db      	lsls	r3, r3, #3
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	461a      	mov	r2, r3
 80014ba:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 80014be:	1898      	adds	r0, r3, r2
 80014c0:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80014c4:	f5a3 717e 	sub.w	r1, r3, #1016	; 0x3f8
 80014c8:	f8d7 2428 	ldr.w	r2, [r7, #1064]	; 0x428
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	440b      	add	r3, r1
 80014d6:	461c      	mov	r4, r3
 80014d8:	4605      	mov	r5, r0
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  for (int i = 0; i < AI_MODEL_OUT_NUM; i++) {
 80014e6:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80014ea:	3301      	adds	r3, #1
 80014ec:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
 80014f0:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	ddd9      	ble.n	80014ac <main+0x90>
  }

  // Set working memory and get weights/biases from model
  ai_network_params ai_params = {
      AI_MODEL_DATA_WEIGHTS(ai_model_data_weights_get()),
 80014f8:	f003 fbc6 	bl	8004c88 <ai_model_data_weights_get>
 80014fc:	4602      	mov	r2, r0
 80014fe:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001502:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f003 fb89 	bl	8004c20 <ai_model_data_weights_buffer_get>
      AI_MODEL_DATA_ACTIVATIONS(activations)
 800150e:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001512:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001516:	331c      	adds	r3, #28
 8001518:	f107 0294 	add.w	r2, r7, #148	; 0x94
 800151c:	4611      	mov	r1, r2
 800151e:	4618      	mov	r0, r3
 8001520:	f003 fb4a 	bl	8004bb8 <ai_model_data_activations_buffer_get>
  };

  // Set pointers wrapper structs to our data buffers
  ai_input[0].data = AI_HANDLE_PTR(in_data);
 8001524:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001528:	f5a3 7377 	sub.w	r3, r3, #988	; 0x3dc
 800152c:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001530:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(out_data);
 8001532:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001536:	f5a3 737e 	sub.w	r3, r3, #1016	; 0x3f8
 800153a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800153e:	605a      	str	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001540:	f000 fd62 	bl	8002008 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001544:	f000 f9b8 	bl	80018b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001548:	f000 face 	bl	8001ae8 <MX_GPIO_Init>
  MX_TIM3_Init();
 800154c:	f000 fa54 	bl	80019f8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8001550:	f000 faa0 	bl	8001a94 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001554:	f000 fa1a 	bl	800198c <MX_SPI1_Init>

  /* USER CODE BEGIN 2 */

	myAccConfigDef.dataRate = LIS3DSH_DATARATE_25;
 8001558:	2340      	movs	r3, #64	; 0x40
 800155a:	f887 3408 	strb.w	r3, [r7, #1032]	; 0x408
	myAccConfigDef.fullScale = LIS3DSH_FULLSCALE_4;
 800155e:	2308      	movs	r3, #8
 8001560:	f887 3409 	strb.w	r3, [r7, #1033]	; 0x409
	myAccConfigDef.antiAliasingBW = LIS3DSH_FILTER_BW_50;
 8001564:	23c0      	movs	r3, #192	; 0xc0
 8001566:	f887 340a 	strb.w	r3, [r7, #1034]	; 0x40a
	myAccConfigDef.enableAxes = LIS3DSH_XYZ_ENABLE;
 800156a:	2307      	movs	r3, #7
 800156c:	f887 340b 	strb.w	r3, [r7, #1035]	; 0x40b
	myAccConfigDef.interruptEnable = false;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 340c 	strb.w	r3, [r7, #1036]	; 0x40c
	LIS3DSH_Init(&hspi1, &myAccConfigDef);
 8001576:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800157a:	4619      	mov	r1, r3
 800157c:	48bf      	ldr	r0, [pc, #764]	; (800187c <main+0x460>)
 800157e:	f7ff fcff 	bl	8000f80 <LIS3DSH_Init>

	LIS3DSH_X_calibrate(-984.0, 1030.0);
 8001582:	eddf 0abf 	vldr	s1, [pc, #764]	; 8001880 <main+0x464>
 8001586:	ed9f 0abf 	vldr	s0, [pc, #764]	; 8001884 <main+0x468>
 800158a:	f7ff febd 	bl	8001308 <LIS3DSH_X_calibrate>
	LIS3DSH_Y_calibrate(-963.0, 1020.0);
 800158e:	eddf 0abe 	vldr	s1, [pc, #760]	; 8001888 <main+0x46c>
 8001592:	ed9f 0abe 	vldr	s0, [pc, #760]	; 800188c <main+0x470>
 8001596:	f7ff fee5 	bl	8001364 <LIS3DSH_Y_calibrate>
	LIS3DSH_Z_calibrate(-940.0, 1036.0);
 800159a:	eddf 0abd 	vldr	s1, [pc, #756]	; 8001890 <main+0x474>
 800159e:	ed9f 0abd 	vldr	s0, [pc, #756]	; 8001894 <main+0x478>
 80015a2:	f7ff ff0d 	bl	80013c0 <LIS3DSH_Z_calibrate>

  buf_len = sprintf(buf, "\r\n\r\nSTM32 X-Cube-AI test\r\n");
 80015a6:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80015aa:	49bb      	ldr	r1, [pc, #748]	; (8001898 <main+0x47c>)
 80015ac:	4618      	mov	r0, r3
 80015ae:	f005 fe6f 	bl	8007290 <siprintf>
 80015b2:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
  HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80015b6:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80015ba:	b29a      	uxth	r2, r3
 80015bc:	f507 7166 	add.w	r1, r7, #920	; 0x398
 80015c0:	2364      	movs	r3, #100	; 0x64
 80015c2:	48b6      	ldr	r0, [pc, #728]	; (800189c <main+0x480>)
 80015c4:	f002 fda4 	bl	8004110 <HAL_UART_Transmit>

  // Create instance of neural network
  ai_err = ai_model_create(&model, AI_MODEL_DATA_CONFIG);
 80015c8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80015cc:	2100      	movs	r1, #0
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fa5c 	bl	8004a8c <ai_model_create>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
  if (ai_err.type != AI_ERROR_NONE)
 80015da:	f897 3394 	ldrb.w	r3, [r7, #916]	; 0x394
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d011      	beq.n	8001606 <main+0x1ea>
  {
      buf_len = sprintf(buf, "Error: could not create NN instance\r\n");
 80015e2:	f507 7366 	add.w	r3, r7, #920	; 0x398
 80015e6:	49ae      	ldr	r1, [pc, #696]	; (80018a0 <main+0x484>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f005 fe51 	bl	8007290 <siprintf>
 80015ee:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80015f2:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f507 7166 	add.w	r1, r7, #920	; 0x398
 80015fc:	2364      	movs	r3, #100	; 0x64
 80015fe:	48a7      	ldr	r0, [pc, #668]	; (800189c <main+0x480>)
 8001600:	f002 fd86 	bl	8004110 <HAL_UART_Transmit>
      while (1);
 8001604:	e7fe      	b.n	8001604 <main+0x1e8>
  }

  // Initialize neural network
  if (!ai_model_init(model, &ai_params))
 8001606:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 800160a:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	463a      	mov	r2, r7
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f003 fa83 	bl	8004b20 <ai_model_init>
 800161a:	4603      	mov	r3, r0
 800161c:	f083 0301 	eor.w	r3, r3, #1
 8001620:	b2db      	uxtb	r3, r3
 8001622:	2b00      	cmp	r3, #0
 8001624:	d011      	beq.n	800164a <main+0x22e>
  {
      buf_len = sprintf(buf, "Error: could not initialize NN\r\n");
 8001626:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800162a:	499e      	ldr	r1, [pc, #632]	; (80018a4 <main+0x488>)
 800162c:	4618      	mov	r0, r3
 800162e:	f005 fe2f 	bl	8007290 <siprintf>
 8001632:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 8001636:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800163a:	b29a      	uxth	r2, r3
 800163c:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8001640:	2364      	movs	r3, #100	; 0x64
 8001642:	4896      	ldr	r0, [pc, #600]	; (800189c <main+0x480>)
 8001644:	f002 fd64 	bl	8004110 <HAL_UART_Transmit>
      while (1);
 8001648:	e7fe      	b.n	8001648 <main+0x22c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	if (LIS3DSH_PollDRDY(1000) == true)
 800164a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800164e:	f7ff fe2d 	bl	80012ac <LIS3DSH_PollDRDY>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f8      	beq.n	800164a <main+0x22e>
	{
	/* Get accelerometer data */
    myData = LIS3DSH_GetDataScaled();
 8001658:	f7ff fda6 	bl	80011a8 <LIS3DSH_GetDataScaled>
 800165c:	eef0 6a40 	vmov.f32	s13, s0
 8001660:	eeb0 7a60 	vmov.f32	s14, s1
 8001664:	eef0 7a41 	vmov.f32	s15, s2
 8001668:	edc7 6aff 	vstr	s13, [r7, #1020]	; 0x3fc
 800166c:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 8001670:	ed83 7a00 	vstr	s14, [r3]
 8001674:	f207 4304 	addw	r3, r7, #1028	; 0x404
 8001678:	edc3 7a00 	vstr	s15, [r3]

    // Log accelerometer data
    buf_len = sprintf(buf, "Accel: x=%.2f, y=%.2f, z=%.2f\r\n", myData.x, myData.y, myData.z);
 800167c:	f8d7 33fc 	ldr.w	r3, [r7, #1020]	; 0x3fc
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff61 	bl	8000548 <__aeabi_f2d>
 8001686:	4680      	mov	r8, r0
 8001688:	4689      	mov	r9, r1
 800168a:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff59 	bl	8000548 <__aeabi_f2d>
 8001696:	4604      	mov	r4, r0
 8001698:	460d      	mov	r5, r1
 800169a:	f207 4304 	addw	r3, r7, #1028	; 0x404
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7fe ff51 	bl	8000548 <__aeabi_f2d>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	f507 7066 	add.w	r0, r7, #920	; 0x398
 80016ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016b2:	e9cd 4500 	strd	r4, r5, [sp]
 80016b6:	4642      	mov	r2, r8
 80016b8:	464b      	mov	r3, r9
 80016ba:	497b      	ldr	r1, [pc, #492]	; (80018a8 <main+0x48c>)
 80016bc:	f005 fde8 	bl	8007290 <siprintf>
 80016c0:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
    HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80016c4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80016c8:	b29a      	uxth	r2, r3
 80016ca:	f507 7166 	add.w	r1, r7, #920	; 0x398
 80016ce:	2364      	movs	r3, #100	; 0x64
 80016d0:	4872      	ldr	r0, [pc, #456]	; (800189c <main+0x480>)
 80016d2:	f002 fd1d 	bl	8004110 <HAL_UART_Transmit>

    // Map accelerometer data to input buffer
    ((ai_float*)in_data)[0] = myData.x;
 80016d6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016da:	f8d7 23fc 	ldr.w	r2, [r7, #1020]	; 0x3fc
 80016de:	601a      	str	r2, [r3, #0]
    ((ai_float*)in_data)[1] = myData.y;
 80016e0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016e4:	3304      	adds	r3, #4
 80016e6:	f507 6280 	add.w	r2, r7, #1024	; 0x400
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	601a      	str	r2, [r3, #0]
    ((ai_float*)in_data)[2] = myData.z;
 80016ee:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80016f2:	3308      	adds	r3, #8
 80016f4:	f207 4204 	addw	r2, r7, #1028	; 0x404
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	601a      	str	r2, [r3, #0]

    // Run inference
    if (ai_model_run(model, &ai_input[0], &ai_output[0]) != 1) {
 80016fc:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 8001700:	f5a3 7370 	sub.w	r3, r3, #960	; 0x3c0
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800170a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800170e:	4618      	mov	r0, r3
 8001710:	f003 fa42 	bl	8004b98 <ai_model_run>
 8001714:	4603      	mov	r3, r0
 8001716:	2b01      	cmp	r3, #1
 8001718:	d011      	beq.n	800173e <main+0x322>
      buf_len = sprintf(buf, "Error: could not run inference\r\n");
 800171a:	f507 7366 	add.w	r3, r7, #920	; 0x398
 800171e:	4963      	ldr	r1, [pc, #396]	; (80018ac <main+0x490>)
 8001720:	4618      	mov	r0, r3
 8001722:	f005 fdb5 	bl	8007290 <siprintf>
 8001726:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
      HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 800172a:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 800172e:	b29a      	uxth	r2, r3
 8001730:	f507 7166 	add.w	r1, r7, #920	; 0x398
 8001734:	2364      	movs	r3, #100	; 0x64
 8001736:	4859      	ldr	r0, [pc, #356]	; (800189c <main+0x480>)
 8001738:	f002 fcea 	bl	8004110 <HAL_UART_Transmit>
      continue;
 800173c:	e09d      	b.n	800187a <main+0x45e>
    }

    // Interpret output (find class with highest probability)
    ai_float max_val = 0.0;
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	f207 4224 	addw	r2, r7, #1060	; 0x424
 8001746:	6013      	str	r3, [r2, #0]
    int max_idx = 0;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    for (int i = 0; i < AI_MODEL_OUT_1_SIZE; i++) {
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001754:	e023      	b.n	800179e <main+0x382>
        if (((ai_float*)out_data)[i] > max_val) {
 8001756:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001760:	4413      	add	r3, r2
 8001762:	edd3 7a00 	vldr	s15, [r3]
 8001766:	f207 4324 	addw	r3, r7, #1060	; 0x424
 800176a:	ed93 7a00 	vldr	s14, [r3]
 800176e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001776:	d50d      	bpl.n	8001794 <main+0x378>
            max_val = ((ai_float*)out_data)[i];
 8001778:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8001782:	4413      	add	r3, r2
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f207 4224 	addw	r2, r7, #1060	; 0x424
 800178a:	6013      	str	r3, [r2, #0]
            max_idx = i;
 800178c:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001790:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
    for (int i = 0; i < AI_MODEL_OUT_1_SIZE; i++) {
 8001794:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8001798:	3301      	adds	r3, #1
 800179a:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 800179e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 80017a2:	2b04      	cmp	r3, #4
 80017a4:	ddd7      	ble.n	8001756 <main+0x33a>
        }
    }

    buf_len = sprintf(buf, "Output Class: %d, Probability: %f\r\n", max_idx, max_val);
 80017a6:	f207 4324 	addw	r3, r7, #1060	; 0x424
 80017aa:	6818      	ldr	r0, [r3, #0]
 80017ac:	f7fe fecc 	bl	8000548 <__aeabi_f2d>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	f507 7066 	add.w	r0, r7, #920	; 0x398
 80017b8:	e9cd 2300 	strd	r2, r3, [sp]
 80017bc:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 80017c0:	493b      	ldr	r1, [pc, #236]	; (80018b0 <main+0x494>)
 80017c2:	f005 fd65 	bl	8007290 <siprintf>
 80017c6:	f8c7 0418 	str.w	r0, [r7, #1048]	; 0x418
    HAL_UART_Transmit(&huart3, (uint8_t *)buf, buf_len, 100);
 80017ca:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 80017ce:	b29a      	uxth	r2, r3
 80017d0:	f507 7166 	add.w	r1, r7, #920	; 0x398
 80017d4:	2364      	movs	r3, #100	; 0x64
 80017d6:	4831      	ldr	r0, [pc, #196]	; (800189c <main+0x480>)
 80017d8:	f002 fc9a 	bl	8004110 <HAL_UART_Transmit>

    // Indicate Tilt Based on Neural Network Output
    switch (max_idx) {
 80017dc:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d83f      	bhi.n	8001864 <main+0x448>
 80017e4:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <main+0x3d0>)
 80017e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ea:	bf00      	nop
 80017ec:	080017fd 	.word	0x080017fd
 80017f0:	08001817 	.word	0x08001817
 80017f4:	08001831 	.word	0x08001831
 80017f8:	0800184b 	.word	0x0800184b
      case 0:
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);  // Blue LED ON
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001802:	482c      	ldr	r0, [pc, #176]	; (80018b4 <main+0x498>)
 8001804:	f000 ff18 	bl	8002638 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_15 | GPIO_PIN_14, GPIO_PIN_RESET);  // Others OFF
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 4150 	mov.w	r1, #53248	; 0xd000
 800180e:	4829      	ldr	r0, [pc, #164]	; (80018b4 <main+0x498>)
 8001810:	f000 ff12 	bl	8002638 <HAL_GPIO_WritePin>
        break;
 8001814:	e02d      	b.n	8001872 <main+0x456>
      case 1:
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_15, GPIO_PIN_SET);  // Orange LED ON
 8001816:	2201      	movs	r2, #1
 8001818:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800181c:	4825      	ldr	r0, [pc, #148]	; (80018b4 <main+0x498>)
 800181e:	f000 ff0b 	bl	8002638 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14, GPIO_PIN_RESET);  // Others OFF
 8001822:	2200      	movs	r2, #0
 8001824:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8001828:	4822      	ldr	r0, [pc, #136]	; (80018b4 <main+0x498>)
 800182a:	f000 ff05 	bl	8002638 <HAL_GPIO_WritePin>
        break;
 800182e:	e020      	b.n	8001872 <main+0x456>
      case 2:
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);  // Green LED ON
 8001830:	2201      	movs	r2, #1
 8001832:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001836:	481f      	ldr	r0, [pc, #124]	; (80018b4 <main+0x498>)
 8001838:	f000 fefe 	bl	8002638 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);  // Others OFF
 800183c:	2200      	movs	r2, #0
 800183e:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001842:	481c      	ldr	r0, [pc, #112]	; (80018b4 <main+0x498>)
 8001844:	f000 fef8 	bl	8002638 <HAL_GPIO_WritePin>
        break;
 8001848:	e013      	b.n	8001872 <main+0x456>
      case 3:
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);  // Red LED ON
 800184a:	2201      	movs	r2, #1
 800184c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001850:	4818      	ldr	r0, [pc, #96]	; (80018b4 <main+0x498>)
 8001852:	f000 fef1 	bl	8002638 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_15, GPIO_PIN_RESET);  // Others OFF
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 4130 	mov.w	r1, #45056	; 0xb000
 800185c:	4815      	ldr	r0, [pc, #84]	; (80018b4 <main+0x498>)
 800185e:	f000 feeb 	bl	8002638 <HAL_GPIO_WritePin>
        break;
 8001862:	e006      	b.n	8001872 <main+0x456>
      //case 4:
        //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13, GPIO_PIN_SET);  // Example: Turn on two LEDs
        //HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);  // Turn off others
        //break;
      default:
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);  // All OFF
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800186a:	4812      	ldr	r0, [pc, #72]	; (80018b4 <main+0x498>)
 800186c:	f000 fee4 	bl	8002638 <HAL_GPIO_WritePin>
        break;
 8001870:	bf00      	nop
    }

    HAL_Delay(500); // Delay for simulation
 8001872:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001876:	f000 fc39 	bl	80020ec <HAL_Delay>
	if (LIS3DSH_PollDRDY(1000) == true)
 800187a:	e6e6      	b.n	800164a <main+0x22e>
 800187c:	2000099c 	.word	0x2000099c
 8001880:	4480c000 	.word	0x4480c000
 8001884:	c4760000 	.word	0xc4760000
 8001888:	447f0000 	.word	0x447f0000
 800188c:	c470c000 	.word	0xc470c000
 8001890:	44818000 	.word	0x44818000
 8001894:	c46b0000 	.word	0xc46b0000
 8001898:	08009620 	.word	0x08009620
 800189c:	20000a3c 	.word	0x20000a3c
 80018a0:	0800963c 	.word	0x0800963c
 80018a4:	08009664 	.word	0x08009664
 80018a8:	08009688 	.word	0x08009688
 80018ac:	080096a8 	.word	0x080096a8
 80018b0:	080096cc 	.word	0x080096cc
 80018b4:	40020c00 	.word	0x40020c00

080018b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b094      	sub	sp, #80	; 0x50
 80018bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018be:	f107 0320 	add.w	r3, r7, #32
 80018c2:	2230      	movs	r2, #48	; 0x30
 80018c4:	2100      	movs	r1, #0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f005 fd45 	bl	8007356 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018cc:	f107 030c 	add.w	r3, r7, #12
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
 80018d4:	605a      	str	r2, [r3, #4]
 80018d6:	609a      	str	r2, [r3, #8]
 80018d8:	60da      	str	r2, [r3, #12]
 80018da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018dc:	2300      	movs	r3, #0
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	4b28      	ldr	r3, [pc, #160]	; (8001984 <SystemClock_Config+0xcc>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a27      	ldr	r2, [pc, #156]	; (8001984 <SystemClock_Config+0xcc>)
 80018e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
 80018ec:	4b25      	ldr	r3, [pc, #148]	; (8001984 <SystemClock_Config+0xcc>)
 80018ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f4:	60bb      	str	r3, [r7, #8]
 80018f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018f8:	2300      	movs	r3, #0
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	4b22      	ldr	r3, [pc, #136]	; (8001988 <SystemClock_Config+0xd0>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a21      	ldr	r2, [pc, #132]	; (8001988 <SystemClock_Config+0xd0>)
 8001902:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <SystemClock_Config+0xd0>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001910:	607b      	str	r3, [r7, #4]
 8001912:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001914:	2302      	movs	r3, #2
 8001916:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001918:	2301      	movs	r3, #1
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800191c:	2310      	movs	r3, #16
 800191e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001920:	2302      	movs	r3, #2
 8001922:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001924:	2300      	movs	r3, #0
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001928:	2308      	movs	r3, #8
 800192a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800192c:	23a8      	movs	r3, #168	; 0xa8
 800192e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001930:	2302      	movs	r3, #2
 8001932:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001934:	2304      	movs	r3, #4
 8001936:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4618      	mov	r0, r3
 800193e:	f000 fe95 	bl	800266c <HAL_RCC_OscConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001948:	f000 f952 	bl	8001bf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194c:	230f      	movs	r3, #15
 800194e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001950:	2302      	movs	r3, #2
 8001952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001958:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800195c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800195e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001962:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001964:	f107 030c 	add.w	r3, r7, #12
 8001968:	2105      	movs	r1, #5
 800196a:	4618      	mov	r0, r3
 800196c:	f001 f8f6 	bl	8002b5c <HAL_RCC_ClockConfig>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001976:	f000 f93b 	bl	8001bf0 <Error_Handler>
  }
}
 800197a:	bf00      	nop
 800197c:	3750      	adds	r7, #80	; 0x50
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	40023800 	.word	0x40023800
 8001988:	40007000 	.word	0x40007000

0800198c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001990:	4b17      	ldr	r3, [pc, #92]	; (80019f0 <MX_SPI1_Init+0x64>)
 8001992:	4a18      	ldr	r2, [pc, #96]	; (80019f4 <MX_SPI1_Init+0x68>)
 8001994:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <MX_SPI1_Init+0x64>)
 8001998:	f44f 7282 	mov.w	r2, #260	; 0x104
 800199c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019a4:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019aa:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019b0:	4b0f      	ldr	r3, [pc, #60]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019be:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019c4:	4b0a      	ldr	r3, [pc, #40]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019ca:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80019d0:	4b07      	ldr	r3, [pc, #28]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80019d6:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019d8:	220a      	movs	r2, #10
 80019da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80019dc:	4804      	ldr	r0, [pc, #16]	; (80019f0 <MX_SPI1_Init+0x64>)
 80019de:	f001 fa9d 	bl	8002f1c <HAL_SPI_Init>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80019e8:	f000 f902 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	2000099c 	.word	0x2000099c
 80019f4:	40013000 	.word	0x40013000

080019f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b086      	sub	sp, #24
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019fe:	f107 0308 	add.w	r3, r7, #8
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	605a      	str	r2, [r3, #4]
 8001a08:	609a      	str	r2, [r3, #8]
 8001a0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a0c:	463b      	mov	r3, r7
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a14:	4b1d      	ldr	r3, [pc, #116]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <MX_TIM3_Init+0x98>)
 8001a18:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8001a1a:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a1c:	2201      	movs	r2, #1
 8001a1e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a20:	4b1a      	ldr	r3, [pc, #104]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a2c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a2e:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a34:	4b15      	ldr	r3, [pc, #84]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a3a:	4814      	ldr	r0, [pc, #80]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a3c:	f002 f840 	bl	8003ac0 <HAL_TIM_Base_Init>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001a46:	f000 f8d3 	bl	8001bf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a50:	f107 0308 	add.w	r3, r7, #8
 8001a54:	4619      	mov	r1, r3
 8001a56:	480d      	ldr	r0, [pc, #52]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a58:	f002 f881 	bl	8003b5e <HAL_TIM_ConfigClockSource>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d001      	beq.n	8001a66 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001a62:	f000 f8c5 	bl	8001bf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a6e:	463b      	mov	r3, r7
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <MX_TIM3_Init+0x94>)
 8001a74:	f002 fa80 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001a7e:	f000 f8b7 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	200009f4 	.word	0x200009f4
 8001a90:	40000400 	.word	0x40000400

08001a94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_USART3_UART_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_USART3_UART_Init+0x4c>)
 8001acc:	f002 fad0 	bl	8004070 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 f88b 	bl	8001bf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000a3c 	.word	0x20000a3c
 8001ae4:	40004800 	.word	0x40004800

08001ae8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b08a      	sub	sp, #40	; 0x28
 8001aec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aee:	f107 0314 	add.w	r3, r7, #20
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]
 8001af8:	609a      	str	r2, [r3, #8]
 8001afa:	60da      	str	r2, [r3, #12]
 8001afc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
 8001b02:	4b37      	ldr	r3, [pc, #220]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	4a36      	ldr	r2, [pc, #216]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0e:	4b34      	ldr	r3, [pc, #208]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	613b      	str	r3, [r7, #16]
 8001b18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	4b30      	ldr	r3, [pc, #192]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	4a2f      	ldr	r2, [pc, #188]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b24:	f043 0301 	orr.w	r3, r3, #1
 8001b28:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2a:	4b2d      	ldr	r3, [pc, #180]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2e:	f003 0301 	and.w	r3, r3, #1
 8001b32:	60fb      	str	r3, [r7, #12]
 8001b34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	60bb      	str	r3, [r7, #8]
 8001b3a:	4b29      	ldr	r3, [pc, #164]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a28      	ldr	r2, [pc, #160]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b40:	f043 0302 	orr.w	r3, r3, #2
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b26      	ldr	r3, [pc, #152]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b52:	2300      	movs	r3, #0
 8001b54:	607b      	str	r3, [r7, #4]
 8001b56:	4b22      	ldr	r3, [pc, #136]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b5c:	f043 0308 	orr.w	r3, r3, #8
 8001b60:	6313      	str	r3, [r2, #48]	; 0x30
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <MX_GPIO_Init+0xf8>)
 8001b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b66:	f003 0308 	and.w	r3, r3, #8
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, MEMs_CS_Pin|GPIO_PIN_0, GPIO_PIN_RESET);
 8001b6e:	2200      	movs	r2, #0
 8001b70:	2109      	movs	r1, #9
 8001b72:	481c      	ldr	r0, [pc, #112]	; (8001be4 <MX_GPIO_Init+0xfc>)
 8001b74:	f000 fd60 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f44f 41f0 	mov.w	r1, #30720	; 0x7800
 8001b7e:	481a      	ldr	r0, [pc, #104]	; (8001be8 <MX_GPIO_Init+0x100>)
 8001b80:	f000 fd5a 	bl	8002638 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MEMs_CS_Pin PE0 */
  GPIO_InitStruct.Pin = MEMs_CS_Pin|GPIO_PIN_0;
 8001b84:	2309      	movs	r3, #9
 8001b86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b90:	2300      	movs	r3, #0
 8001b92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b94:	f107 0314 	add.w	r3, r7, #20
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4812      	ldr	r0, [pc, #72]	; (8001be4 <MX_GPIO_Init+0xfc>)
 8001b9c:	f000 fbb0 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <MX_GPIO_Init+0x104>)
 8001bb4:	f000 fba4 	bl	8002300 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11 PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001bb8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001bbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	4805      	ldr	r0, [pc, #20]	; (8001be8 <MX_GPIO_Init+0x100>)
 8001bd2:	f000 fb95 	bl	8002300 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	40023800 	.word	0x40023800
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40020000 	.word	0x40020000

08001bf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bf4:	b672      	cpsid	i
}
 8001bf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bf8:	e7fe      	b.n	8001bf8 <Error_Handler+0x8>
	...

08001bfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	607b      	str	r3, [r7, #4]
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0a:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c10:	6453      	str	r3, [r2, #68]	; 0x44
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	603b      	str	r3, [r7, #0]
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c26:	4a08      	ldr	r2, [pc, #32]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c2e:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <HAL_MspInit+0x4c>)
 8001c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	40023800 	.word	0x40023800

08001c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	; 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a19      	ldr	r2, [pc, #100]	; (8001cd0 <HAL_SPI_MspInit+0x84>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d12b      	bne.n	8001cc6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	4a17      	ldr	r2, [pc, #92]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c92:	4a10      	ldr	r2, [pc, #64]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	6313      	str	r3, [r2, #48]	; 0x30
 8001c9a:	4b0e      	ldr	r3, [pc, #56]	; (8001cd4 <HAL_SPI_MspInit+0x88>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001ca6:	23e0      	movs	r3, #224	; 0xe0
 8001ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001caa:	2302      	movs	r3, #2
 8001cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	f107 0314 	add.w	r3, r7, #20
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <HAL_SPI_MspInit+0x8c>)
 8001cc2:	f000 fb1d 	bl	8002300 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001cc6:	bf00      	nop
 8001cc8:	3728      	adds	r7, #40	; 0x28
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40013000 	.word	0x40013000
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020000 	.word	0x40020000

08001cdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0b      	ldr	r2, [pc, #44]	; (8001d18 <HAL_TIM_Base_MspInit+0x3c>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d10d      	bne.n	8001d0a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	60fb      	str	r3, [r7, #12]
 8001cf2:	4b0a      	ldr	r3, [pc, #40]	; (8001d1c <HAL_TIM_Base_MspInit+0x40>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	4a09      	ldr	r2, [pc, #36]	; (8001d1c <HAL_TIM_Base_MspInit+0x40>)
 8001cf8:	f043 0302 	orr.w	r3, r3, #2
 8001cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001cfe:	4b07      	ldr	r3, [pc, #28]	; (8001d1c <HAL_TIM_Base_MspInit+0x40>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	60fb      	str	r3, [r7, #12]
 8001d08:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001d0a:	bf00      	nop
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	40000400 	.word	0x40000400
 8001d1c:	40023800 	.word	0x40023800

08001d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <HAL_UART_MspInit+0x84>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d12c      	bne.n	8001d9c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_UART_MspInit+0x88>)
 8001d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_UART_MspInit+0x88>)
 8001d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d50:	6413      	str	r3, [r2, #64]	; 0x40
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_UART_MspInit+0x88>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_UART_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_UART_MspInit+0x88>)
 8001d68:	f043 0302 	orr.w	r3, r3, #2
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_UART_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0302 	and.w	r3, r3, #2
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001d7a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001d7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d80:	2302      	movs	r3, #2
 8001d82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d90:	f107 0314 	add.w	r3, r7, #20
 8001d94:	4619      	mov	r1, r3
 8001d96:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_UART_MspInit+0x8c>)
 8001d98:	f000 fab2 	bl	8002300 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001d9c:	bf00      	nop
 8001d9e:	3728      	adds	r7, #40	; 0x28
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40004800 	.word	0x40004800
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020400 	.word	0x40020400

08001db0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001db0:	b480      	push	{r7}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001db4:	e7fe      	b.n	8001db4 <NMI_Handler+0x4>

08001db6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001db6:	b480      	push	{r7}
 8001db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dba:	e7fe      	b.n	8001dba <HardFault_Handler+0x4>

08001dbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc0:	e7fe      	b.n	8001dc0 <MemManage_Handler+0x4>

08001dc2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc2:	b480      	push	{r7}
 8001dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dc6:	e7fe      	b.n	8001dc6 <BusFault_Handler+0x4>

08001dc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <UsageFault_Handler+0x4>

08001dce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dce:	b480      	push	{r7}
 8001dd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr

08001ddc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr

08001dea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001dea:	b480      	push	{r7}
 8001dec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001dee:	bf00      	nop
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dfc:	f000 f956 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return 1;
 8001e08:	2301      	movs	r3, #1
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_kill>:

int _kill(int pid, int sig)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e1e:	f005 fafd 	bl	800741c <__errno>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2216      	movs	r2, #22
 8001e26:	601a      	str	r2, [r3, #0]
  return -1;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <_exit>:

void _exit (int status)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f7ff ffe7 	bl	8001e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e46:	e7fe      	b.n	8001e46 <_exit+0x12>

08001e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	60f8      	str	r0, [r7, #12]
 8001e50:	60b9      	str	r1, [r7, #8]
 8001e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e00a      	b.n	8001e70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e5a:	f3af 8000 	nop.w
 8001e5e:	4601      	mov	r1, r0
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	1c5a      	adds	r2, r3, #1
 8001e64:	60ba      	str	r2, [r7, #8]
 8001e66:	b2ca      	uxtb	r2, r1
 8001e68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	697a      	ldr	r2, [r7, #20]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	dbf0      	blt.n	8001e5a <_read+0x12>
  }

  return len;
 8001e78:	687b      	ldr	r3, [r7, #4]
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8e:	2300      	movs	r3, #0
 8001e90:	617b      	str	r3, [r7, #20]
 8001e92:	e009      	b.n	8001ea8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	1c5a      	adds	r2, r3, #1
 8001e98:	60ba      	str	r2, [r7, #8]
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf1      	blt.n	8001e94 <_write+0x12>
  }
  return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_close>:

int _close(int file)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr

08001ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed2:	b480      	push	{r7}
 8001ed4:	b083      	sub	sp, #12
 8001ed6:	af00      	add	r7, sp, #0
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	370c      	adds	r7, #12
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <_isatty>:

int _isatty(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001efa:	2301      	movs	r3, #1
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
	...

08001f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f2c:	4a14      	ldr	r2, [pc, #80]	; (8001f80 <_sbrk+0x5c>)
 8001f2e:	4b15      	ldr	r3, [pc, #84]	; (8001f84 <_sbrk+0x60>)
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f38:	4b13      	ldr	r3, [pc, #76]	; (8001f88 <_sbrk+0x64>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d102      	bne.n	8001f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <_sbrk+0x64>)
 8001f42:	4a12      	ldr	r2, [pc, #72]	; (8001f8c <_sbrk+0x68>)
 8001f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f46:	4b10      	ldr	r3, [pc, #64]	; (8001f88 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d207      	bcs.n	8001f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f54:	f005 fa62 	bl	800741c <__errno>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f62:	e009      	b.n	8001f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f64:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <_sbrk+0x64>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <_sbrk+0x64>)
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4413      	add	r3, r2
 8001f72:	4a05      	ldr	r2, [pc, #20]	; (8001f88 <_sbrk+0x64>)
 8001f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2001c000 	.word	0x2001c000
 8001f84:	00000800 	.word	0x00000800
 8001f88:	20000a84 	.word	0x20000a84
 8001f8c:	20000c70 	.word	0x20000c70

08001f90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f94:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <SystemInit+0x20>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f9a:	4a05      	ldr	r2, [pc, #20]	; (8001fb0 <SystemInit+0x20>)
 8001f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fa4:	bf00      	nop
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	e000ed00 	.word	0xe000ed00

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fb8:	f7ff ffea 	bl	8001f90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fbe:	490d      	ldr	r1, [pc, #52]	; (8001ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd4:	4c0a      	ldr	r4, [pc, #40]	; (8002000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f005 fa21 	bl	8007428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7ff fa19 	bl	800141c <main>
  bx  lr    
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001fec:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ff4:	2000091c 	.word	0x2000091c
  ldr r2, =_sidata
 8001ff8:	08012934 	.word	0x08012934
  ldr r2, =_sbss
 8001ffc:	2000091c 	.word	0x2000091c
  ldr r4, =_ebss
 8002000:	20000c6c 	.word	0x20000c6c

08002004 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC_IRQHandler>
	...

08002008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800200c:	4b0e      	ldr	r3, [pc, #56]	; (8002048 <HAL_Init+0x40>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a0d      	ldr	r2, [pc, #52]	; (8002048 <HAL_Init+0x40>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002016:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_Init+0x40>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_Init+0x40>)
 800201e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002022:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_Init+0x40>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a07      	ldr	r2, [pc, #28]	; (8002048 <HAL_Init+0x40>)
 800202a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800202e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002030:	2003      	movs	r0, #3
 8002032:	f000 f931 	bl	8002298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002036:	200f      	movs	r0, #15
 8002038:	f000 f808 	bl	800204c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800203c:	f7ff fdde 	bl	8001bfc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	40023c00 	.word	0x40023c00

0800204c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002054:	4b12      	ldr	r3, [pc, #72]	; (80020a0 <HAL_InitTick+0x54>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	4b12      	ldr	r3, [pc, #72]	; (80020a4 <HAL_InitTick+0x58>)
 800205a:	781b      	ldrb	r3, [r3, #0]
 800205c:	4619      	mov	r1, r3
 800205e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002062:	fbb3 f3f1 	udiv	r3, r3, r1
 8002066:	fbb2 f3f3 	udiv	r3, r2, r3
 800206a:	4618      	mov	r0, r3
 800206c:	f000 f93b 	bl	80022e6 <HAL_SYSTICK_Config>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e00e      	b.n	8002098 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b0f      	cmp	r3, #15
 800207e:	d80a      	bhi.n	8002096 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002080:	2200      	movs	r2, #0
 8002082:	6879      	ldr	r1, [r7, #4]
 8002084:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002088:	f000 f911 	bl	80022ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800208c:	4a06      	ldr	r2, [pc, #24]	; (80020a8 <HAL_InitTick+0x5c>)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e000      	b.n	8002098 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
}
 8002098:	4618      	mov	r0, r3
 800209a:	3708      	adds	r7, #8
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	20000010 	.word	0x20000010
 80020a4:	20000018 	.word	0x20000018
 80020a8:	20000014 	.word	0x20000014

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000018 	.word	0x20000018
 80020d0:	20000a88 	.word	0x20000a88

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000a88 	.word	0x20000a88

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_Delay+0x44>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000018 	.word	0x20000018

08002134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002144:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002150:	4013      	ands	r3, r2
 8002152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800215c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002166:	4a04      	ldr	r2, [pc, #16]	; (8002178 <__NVIC_SetPriorityGrouping+0x44>)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	60d3      	str	r3, [r2, #12]
}
 800216c:	bf00      	nop
 800216e:	3714      	adds	r7, #20
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	e000ed00 	.word	0xe000ed00

0800217c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800217c:	b480      	push	{r7}
 800217e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002180:	4b04      	ldr	r3, [pc, #16]	; (8002194 <__NVIC_GetPriorityGrouping+0x18>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	0a1b      	lsrs	r3, r3, #8
 8002186:	f003 0307 	and.w	r3, r3, #7
}
 800218a:	4618      	mov	r0, r3
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	6039      	str	r1, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	db0a      	blt.n	80021c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	490c      	ldr	r1, [pc, #48]	; (80021e4 <__NVIC_SetPriority+0x4c>)
 80021b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	440b      	add	r3, r1
 80021bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c0:	e00a      	b.n	80021d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	4908      	ldr	r1, [pc, #32]	; (80021e8 <__NVIC_SetPriority+0x50>)
 80021c8:	79fb      	ldrb	r3, [r7, #7]
 80021ca:	f003 030f 	and.w	r3, r3, #15
 80021ce:	3b04      	subs	r3, #4
 80021d0:	0112      	lsls	r2, r2, #4
 80021d2:	b2d2      	uxtb	r2, r2
 80021d4:	440b      	add	r3, r1
 80021d6:	761a      	strb	r2, [r3, #24]
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000e100 	.word	0xe000e100
 80021e8:	e000ed00 	.word	0xe000ed00

080021ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b089      	sub	sp, #36	; 0x24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	f1c3 0307 	rsb	r3, r3, #7
 8002206:	2b04      	cmp	r3, #4
 8002208:	bf28      	it	cs
 800220a:	2304      	movcs	r3, #4
 800220c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3304      	adds	r3, #4
 8002212:	2b06      	cmp	r3, #6
 8002214:	d902      	bls.n	800221c <NVIC_EncodePriority+0x30>
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	3b03      	subs	r3, #3
 800221a:	e000      	b.n	800221e <NVIC_EncodePriority+0x32>
 800221c:	2300      	movs	r3, #0
 800221e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002220:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43da      	mvns	r2, r3
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	401a      	ands	r2, r3
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002234:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	fa01 f303 	lsl.w	r3, r1, r3
 800223e:	43d9      	mvns	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002244:	4313      	orrs	r3, r2
         );
}
 8002246:	4618      	mov	r0, r3
 8002248:	3724      	adds	r7, #36	; 0x24
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
	...

08002254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b082      	sub	sp, #8
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3b01      	subs	r3, #1
 8002260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002264:	d301      	bcc.n	800226a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226a:	4a0a      	ldr	r2, [pc, #40]	; (8002294 <SysTick_Config+0x40>)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3b01      	subs	r3, #1
 8002270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002272:	210f      	movs	r1, #15
 8002274:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002278:	f7ff ff8e 	bl	8002198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <SysTick_Config+0x40>)
 800227e:	2200      	movs	r2, #0
 8002280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002282:	4b04      	ldr	r3, [pc, #16]	; (8002294 <SysTick_Config+0x40>)
 8002284:	2207      	movs	r2, #7
 8002286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	e000e010 	.word	0xe000e010

08002298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	f7ff ff47 	bl	8002134 <__NVIC_SetPriorityGrouping>
}
 80022a6:	bf00      	nop
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b086      	sub	sp, #24
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	4603      	mov	r3, r0
 80022b6:	60b9      	str	r1, [r7, #8]
 80022b8:	607a      	str	r2, [r7, #4]
 80022ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022bc:	2300      	movs	r3, #0
 80022be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c0:	f7ff ff5c 	bl	800217c <__NVIC_GetPriorityGrouping>
 80022c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	6978      	ldr	r0, [r7, #20]
 80022cc:	f7ff ff8e 	bl	80021ec <NVIC_EncodePriority>
 80022d0:	4602      	mov	r2, r0
 80022d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d6:	4611      	mov	r1, r2
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff5d 	bl	8002198 <__NVIC_SetPriority>
}
 80022de:	bf00      	nop
 80022e0:	3718      	adds	r7, #24
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b082      	sub	sp, #8
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	f7ff ffb0 	bl	8002254 <SysTick_Config>
 80022f4:	4603      	mov	r3, r0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800230a:	2300      	movs	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800230e:	2300      	movs	r3, #0
 8002310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	e16b      	b.n	80025f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800231c:	2201      	movs	r2, #1
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	697a      	ldr	r2, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	429a      	cmp	r2, r3
 8002336:	f040 815a 	bne.w	80025ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f003 0303 	and.w	r3, r3, #3
 8002342:	2b01      	cmp	r3, #1
 8002344:	d005      	beq.n	8002352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800234e:	2b02      	cmp	r3, #2
 8002350:	d130      	bne.n	80023b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	2203      	movs	r2, #3
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	68da      	ldr	r2, [r3, #12]
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	fa02 f303 	lsl.w	r3, r2, r3
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	43db      	mvns	r3, r3
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	4013      	ands	r3, r2
 8002396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 0201 	and.w	r2, r3, #1
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d017      	beq.n	80023f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	2203      	movs	r2, #3
 80023cc:	fa02 f303 	lsl.w	r3, r2, r3
 80023d0:	43db      	mvns	r3, r3
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	4013      	ands	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f003 0303 	and.w	r3, r3, #3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d123      	bne.n	8002444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	08da      	lsrs	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3208      	adds	r2, #8
 8002404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800240a:	69fb      	ldr	r3, [r7, #28]
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	220f      	movs	r2, #15
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	691a      	ldr	r2, [r3, #16]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	009b      	lsls	r3, r3, #2
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	08da      	lsrs	r2, r3, #3
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3208      	adds	r2, #8
 800243e:	69b9      	ldr	r1, [r7, #24]
 8002440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f003 0203 	and.w	r2, r3, #3
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 80b4 	beq.w	80025ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	60fb      	str	r3, [r7, #12]
 800248a:	4b60      	ldr	r3, [pc, #384]	; (800260c <HAL_GPIO_Init+0x30c>)
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	4a5f      	ldr	r2, [pc, #380]	; (800260c <HAL_GPIO_Init+0x30c>)
 8002490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002494:	6453      	str	r3, [r2, #68]	; 0x44
 8002496:	4b5d      	ldr	r3, [pc, #372]	; (800260c <HAL_GPIO_Init+0x30c>)
 8002498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800249e:	60fb      	str	r3, [r7, #12]
 80024a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024a2:	4a5b      	ldr	r2, [pc, #364]	; (8002610 <HAL_GPIO_Init+0x310>)
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	089b      	lsrs	r3, r3, #2
 80024a8:	3302      	adds	r3, #2
 80024aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	220f      	movs	r2, #15
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4013      	ands	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a52      	ldr	r2, [pc, #328]	; (8002614 <HAL_GPIO_Init+0x314>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02b      	beq.n	8002526 <HAL_GPIO_Init+0x226>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a51      	ldr	r2, [pc, #324]	; (8002618 <HAL_GPIO_Init+0x318>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d025      	beq.n	8002522 <HAL_GPIO_Init+0x222>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a50      	ldr	r2, [pc, #320]	; (800261c <HAL_GPIO_Init+0x31c>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d01f      	beq.n	800251e <HAL_GPIO_Init+0x21e>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4f      	ldr	r2, [pc, #316]	; (8002620 <HAL_GPIO_Init+0x320>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d019      	beq.n	800251a <HAL_GPIO_Init+0x21a>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4e      	ldr	r2, [pc, #312]	; (8002624 <HAL_GPIO_Init+0x324>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d013      	beq.n	8002516 <HAL_GPIO_Init+0x216>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_GPIO_Init+0x328>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d00d      	beq.n	8002512 <HAL_GPIO_Init+0x212>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_GPIO_Init+0x32c>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d007      	beq.n	800250e <HAL_GPIO_Init+0x20e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a4b      	ldr	r2, [pc, #300]	; (8002630 <HAL_GPIO_Init+0x330>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d101      	bne.n	800250a <HAL_GPIO_Init+0x20a>
 8002506:	2307      	movs	r3, #7
 8002508:	e00e      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800250a:	2308      	movs	r3, #8
 800250c:	e00c      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800250e:	2306      	movs	r3, #6
 8002510:	e00a      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002512:	2305      	movs	r3, #5
 8002514:	e008      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002516:	2304      	movs	r3, #4
 8002518:	e006      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800251a:	2303      	movs	r3, #3
 800251c:	e004      	b.n	8002528 <HAL_GPIO_Init+0x228>
 800251e:	2302      	movs	r3, #2
 8002520:	e002      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002522:	2301      	movs	r3, #1
 8002524:	e000      	b.n	8002528 <HAL_GPIO_Init+0x228>
 8002526:	2300      	movs	r3, #0
 8002528:	69fa      	ldr	r2, [r7, #28]
 800252a:	f002 0203 	and.w	r2, r2, #3
 800252e:	0092      	lsls	r2, r2, #2
 8002530:	4093      	lsls	r3, r2
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002538:	4935      	ldr	r1, [pc, #212]	; (8002610 <HAL_GPIO_Init+0x310>)
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	089b      	lsrs	r3, r3, #2
 800253e:	3302      	adds	r3, #2
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002546:	4b3b      	ldr	r3, [pc, #236]	; (8002634 <HAL_GPIO_Init+0x334>)
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	43db      	mvns	r3, r3
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	4013      	ands	r3, r2
 8002554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800256a:	4a32      	ldr	r2, [pc, #200]	; (8002634 <HAL_GPIO_Init+0x334>)
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <HAL_GPIO_Init+0x334>)
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	43db      	mvns	r3, r3
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	4013      	ands	r3, r2
 800257e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d003      	beq.n	8002594 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002594:	4a27      	ldr	r2, [pc, #156]	; (8002634 <HAL_GPIO_Init+0x334>)
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_GPIO_Init+0x334>)
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	43db      	mvns	r3, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4013      	ands	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685b      	ldr	r3, [r3, #4]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025be:	4a1d      	ldr	r2, [pc, #116]	; (8002634 <HAL_GPIO_Init+0x334>)
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025c4:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_GPIO_Init+0x334>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	43db      	mvns	r3, r3
 80025ce:	69ba      	ldr	r2, [r7, #24]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d003      	beq.n	80025e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025e8:	4a12      	ldr	r2, [pc, #72]	; (8002634 <HAL_GPIO_Init+0x334>)
 80025ea:	69bb      	ldr	r3, [r7, #24]
 80025ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	69fb      	ldr	r3, [r7, #28]
 80025f0:	3301      	adds	r3, #1
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	2b0f      	cmp	r3, #15
 80025f8:	f67f ae90 	bls.w	800231c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025fc:	bf00      	nop
 80025fe:	bf00      	nop
 8002600:	3724      	adds	r7, #36	; 0x24
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40023800 	.word	0x40023800
 8002610:	40013800 	.word	0x40013800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400
 800261c:	40020800 	.word	0x40020800
 8002620:	40020c00 	.word	0x40020c00
 8002624:	40021000 	.word	0x40021000
 8002628:	40021400 	.word	0x40021400
 800262c:	40021800 	.word	0x40021800
 8002630:	40021c00 	.word	0x40021c00
 8002634:	40013c00 	.word	0x40013c00

08002638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	460b      	mov	r3, r1
 8002642:	807b      	strh	r3, [r7, #2]
 8002644:	4613      	mov	r3, r2
 8002646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002648:	787b      	ldrb	r3, [r7, #1]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d003      	beq.n	8002656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800264e:	887a      	ldrh	r2, [r7, #2]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002654:	e003      	b.n	800265e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002656:	887b      	ldrh	r3, [r7, #2]
 8002658:	041a      	lsls	r2, r3, #16
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	619a      	str	r2, [r3, #24]
}
 800265e:	bf00      	nop
 8002660:	370c      	adds	r7, #12
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
	...

0800266c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e267      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	2b00      	cmp	r3, #0
 8002688:	d075      	beq.n	8002776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800268a:	4b88      	ldr	r3, [pc, #544]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b04      	cmp	r3, #4
 8002694:	d00c      	beq.n	80026b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002696:	4b85      	ldr	r3, [pc, #532]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d112      	bne.n	80026c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026a2:	4b82      	ldr	r3, [pc, #520]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026ae:	d10b      	bne.n	80026c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026b0:	4b7e      	ldr	r3, [pc, #504]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d05b      	beq.n	8002774 <HAL_RCC_OscConfig+0x108>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d157      	bne.n	8002774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e242      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026d0:	d106      	bne.n	80026e0 <HAL_RCC_OscConfig+0x74>
 80026d2:	4b76      	ldr	r3, [pc, #472]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a75      	ldr	r2, [pc, #468]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	e01d      	b.n	800271c <HAL_RCC_OscConfig+0xb0>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x98>
 80026ea:	4b70      	ldr	r3, [pc, #448]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6f      	ldr	r2, [pc, #444]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	4b6d      	ldr	r3, [pc, #436]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a6c      	ldr	r2, [pc, #432]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	6013      	str	r3, [r2, #0]
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0xb0>
 8002704:	4b69      	ldr	r3, [pc, #420]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a68      	ldr	r2, [pc, #416]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 800270a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b66      	ldr	r3, [pc, #408]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a65      	ldr	r2, [pc, #404]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800271a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d013      	beq.n	800274c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff fcd6 	bl	80020d4 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800272c:	f7ff fcd2 	bl	80020d4 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e207      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800273e:	4b5b      	ldr	r3, [pc, #364]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d0f0      	beq.n	800272c <HAL_RCC_OscConfig+0xc0>
 800274a:	e014      	b.n	8002776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800274c:	f7ff fcc2 	bl	80020d4 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002754:	f7ff fcbe 	bl	80020d4 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b64      	cmp	r3, #100	; 0x64
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e1f3      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002766:	4b51      	ldr	r3, [pc, #324]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d1f0      	bne.n	8002754 <HAL_RCC_OscConfig+0xe8>
 8002772:	e000      	b.n	8002776 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d063      	beq.n	800284a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002782:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800278e:	4b47      	ldr	r3, [pc, #284]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002796:	2b08      	cmp	r3, #8
 8002798:	d11c      	bne.n	80027d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800279a:	4b44      	ldr	r3, [pc, #272]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d116      	bne.n	80027d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_RCC_OscConfig+0x152>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d001      	beq.n	80027be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e1c7      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027be:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4937      	ldr	r1, [pc, #220]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80027ce:	4313      	orrs	r3, r2
 80027d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027d2:	e03a      	b.n	800284a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027dc:	4b34      	ldr	r3, [pc, #208]	; (80028b0 <HAL_RCC_OscConfig+0x244>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7ff fc77 	bl	80020d4 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ea:	f7ff fc73 	bl	80020d4 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e1a8      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027fc:	4b2b      	ldr	r3, [pc, #172]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002808:	4b28      	ldr	r3, [pc, #160]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4925      	ldr	r1, [pc, #148]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002818:	4313      	orrs	r3, r2
 800281a:	600b      	str	r3, [r1, #0]
 800281c:	e015      	b.n	800284a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800281e:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <HAL_RCC_OscConfig+0x244>)
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002824:	f7ff fc56 	bl	80020d4 <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800282c:	f7ff fc52 	bl	80020d4 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b02      	cmp	r3, #2
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e187      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800283e:	4b1b      	ldr	r3, [pc, #108]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0302 	and.w	r3, r3, #2
 8002846:	2b00      	cmp	r3, #0
 8002848:	d1f0      	bne.n	800282c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d036      	beq.n	80028c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	695b      	ldr	r3, [r3, #20]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800285e:	4b15      	ldr	r3, [pc, #84]	; (80028b4 <HAL_RCC_OscConfig+0x248>)
 8002860:	2201      	movs	r2, #1
 8002862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002864:	f7ff fc36 	bl	80020d4 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286c:	f7ff fc32 	bl	80020d4 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e167      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800287e:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_RCC_OscConfig+0x240>)
 8002880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x200>
 800288a:	e01b      	b.n	80028c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800288c:	4b09      	ldr	r3, [pc, #36]	; (80028b4 <HAL_RCC_OscConfig+0x248>)
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002892:	f7ff fc1f 	bl	80020d4 <HAL_GetTick>
 8002896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002898:	e00e      	b.n	80028b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800289a:	f7ff fc1b 	bl	80020d4 <HAL_GetTick>
 800289e:	4602      	mov	r2, r0
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	1ad3      	subs	r3, r2, r3
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	d907      	bls.n	80028b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028a8:	2303      	movs	r3, #3
 80028aa:	e150      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
 80028ac:	40023800 	.word	0x40023800
 80028b0:	42470000 	.word	0x42470000
 80028b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	4b88      	ldr	r3, [pc, #544]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80028ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1ea      	bne.n	800289a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0304 	and.w	r3, r3, #4
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 8097 	beq.w	8002a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028d2:	2300      	movs	r3, #0
 80028d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028d6:	4b81      	ldr	r3, [pc, #516]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80028d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
 80028e6:	4b7d      	ldr	r3, [pc, #500]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80028e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ea:	4a7c      	ldr	r2, [pc, #496]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80028ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028f0:	6413      	str	r3, [r2, #64]	; 0x40
 80028f2:	4b7a      	ldr	r3, [pc, #488]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028fe:	2301      	movs	r3, #1
 8002900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002902:	4b77      	ldr	r3, [pc, #476]	; (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d118      	bne.n	8002940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800290e:	4b74      	ldr	r3, [pc, #464]	; (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a73      	ldr	r2, [pc, #460]	; (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002914:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800291a:	f7ff fbdb 	bl	80020d4 <HAL_GetTick>
 800291e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002920:	e008      	b.n	8002934 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002922:	f7ff fbd7 	bl	80020d4 <HAL_GetTick>
 8002926:	4602      	mov	r2, r0
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	1ad3      	subs	r3, r2, r3
 800292c:	2b02      	cmp	r3, #2
 800292e:	d901      	bls.n	8002934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002930:	2303      	movs	r3, #3
 8002932:	e10c      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002934:	4b6a      	ldr	r3, [pc, #424]	; (8002ae0 <HAL_RCC_OscConfig+0x474>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800293c:	2b00      	cmp	r3, #0
 800293e:	d0f0      	beq.n	8002922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d106      	bne.n	8002956 <HAL_RCC_OscConfig+0x2ea>
 8002948:	4b64      	ldr	r3, [pc, #400]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a63      	ldr	r2, [pc, #396]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	e01c      	b.n	8002990 <HAL_RCC_OscConfig+0x324>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	2b05      	cmp	r3, #5
 800295c:	d10c      	bne.n	8002978 <HAL_RCC_OscConfig+0x30c>
 800295e:	4b5f      	ldr	r3, [pc, #380]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002962:	4a5e      	ldr	r2, [pc, #376]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6713      	str	r3, [r2, #112]	; 0x70
 800296a:	4b5c      	ldr	r3, [pc, #368]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 800296c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296e:	4a5b      	ldr	r2, [pc, #364]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6713      	str	r3, [r2, #112]	; 0x70
 8002976:	e00b      	b.n	8002990 <HAL_RCC_OscConfig+0x324>
 8002978:	4b58      	ldr	r3, [pc, #352]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 800297a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800297c:	4a57      	ldr	r2, [pc, #348]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 0301 	bic.w	r3, r3, #1
 8002982:	6713      	str	r3, [r2, #112]	; 0x70
 8002984:	4b55      	ldr	r3, [pc, #340]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	4a54      	ldr	r2, [pc, #336]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 800298a:	f023 0304 	bic.w	r3, r3, #4
 800298e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7ff fb9c 	bl	80020d4 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800299e:	e00a      	b.n	80029b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a0:	f7ff fb98 	bl	80020d4 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e0cb      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	4b49      	ldr	r3, [pc, #292]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d0ee      	beq.n	80029a0 <HAL_RCC_OscConfig+0x334>
 80029c2:	e014      	b.n	80029ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c4:	f7ff fb86 	bl	80020d4 <HAL_GetTick>
 80029c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029cc:	f7ff fb82 	bl	80020d4 <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e0b5      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	4b3e      	ldr	r3, [pc, #248]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80029e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e6:	f003 0302 	and.w	r3, r3, #2
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d1ee      	bne.n	80029cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029ee:	7dfb      	ldrb	r3, [r7, #23]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d105      	bne.n	8002a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f4:	4b39      	ldr	r3, [pc, #228]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	4a38      	ldr	r2, [pc, #224]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 80029fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	f000 80a1 	beq.w	8002b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a0a:	4b34      	ldr	r3, [pc, #208]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d05c      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d141      	bne.n	8002aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1e:	4b31      	ldr	r3, [pc, #196]	; (8002ae4 <HAL_RCC_OscConfig+0x478>)
 8002a20:	2200      	movs	r2, #0
 8002a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff fb56 	bl	80020d4 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2c:	f7ff fb52 	bl	80020d4 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e087      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a3e:	4b27      	ldr	r3, [pc, #156]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69da      	ldr	r2, [r3, #28]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	431a      	orrs	r2, r3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a58:	019b      	lsls	r3, r3, #6
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a60:	085b      	lsrs	r3, r3, #1
 8002a62:	3b01      	subs	r3, #1
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6c:	061b      	lsls	r3, r3, #24
 8002a6e:	491b      	ldr	r1, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a74:	4b1b      	ldr	r3, [pc, #108]	; (8002ae4 <HAL_RCC_OscConfig+0x478>)
 8002a76:	2201      	movs	r2, #1
 8002a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7a:	f7ff fb2b 	bl	80020d4 <HAL_GetTick>
 8002a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a80:	e008      	b.n	8002a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a82:	f7ff fb27 	bl	80020d4 <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	2b02      	cmp	r3, #2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e05c      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a94:	4b11      	ldr	r3, [pc, #68]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0f0      	beq.n	8002a82 <HAL_RCC_OscConfig+0x416>
 8002aa0:	e054      	b.n	8002b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa2:	4b10      	ldr	r3, [pc, #64]	; (8002ae4 <HAL_RCC_OscConfig+0x478>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff fb14 	bl	80020d4 <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ab0:	f7ff fb10 	bl	80020d4 <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e045      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac2:	4b06      	ldr	r3, [pc, #24]	; (8002adc <HAL_RCC_OscConfig+0x470>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0x444>
 8002ace:	e03d      	b.n	8002b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	2b01      	cmp	r3, #1
 8002ad6:	d107      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e038      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
 8002adc:	40023800 	.word	0x40023800
 8002ae0:	40007000 	.word	0x40007000
 8002ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ae8:	4b1b      	ldr	r3, [pc, #108]	; (8002b58 <HAL_RCC_OscConfig+0x4ec>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d028      	beq.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b00:	429a      	cmp	r2, r3
 8002b02:	d121      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d11a      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002b18:	4013      	ands	r3, r2
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d111      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	085b      	lsrs	r3, r3, #1
 8002b30:	3b01      	subs	r3, #1
 8002b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d107      	bne.n	8002b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d001      	beq.n	8002b4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3718      	adds	r7, #24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023800 	.word	0x40023800

08002b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d101      	bne.n	8002b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0cc      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b70:	4b68      	ldr	r3, [pc, #416]	; (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0307 	and.w	r3, r3, #7
 8002b78:	683a      	ldr	r2, [r7, #0]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d90c      	bls.n	8002b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b7e:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b80:	683a      	ldr	r2, [r7, #0]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b63      	ldr	r3, [pc, #396]	; (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0b8      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0302 	and.w	r3, r3, #2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d020      	beq.n	8002be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0304 	and.w	r3, r3, #4
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bb0:	4b59      	ldr	r3, [pc, #356]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	4a58      	ldr	r2, [pc, #352]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0308 	and.w	r3, r3, #8
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a52      	ldr	r2, [pc, #328]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	494d      	ldr	r1, [pc, #308]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d044      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d107      	bne.n	8002c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfa:	4b47      	ldr	r3, [pc, #284]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d119      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e07f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d003      	beq.n	8002c1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c16:	2b03      	cmp	r3, #3
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c1a:	4b3f      	ldr	r3, [pc, #252]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d109      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e06f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c2a:	4b3b      	ldr	r3, [pc, #236]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e067      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c3a:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f023 0203 	bic.w	r2, r3, #3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	4934      	ldr	r1, [pc, #208]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c4c:	f7ff fa42 	bl	80020d4 <HAL_GetTick>
 8002c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c52:	e00a      	b.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c54:	f7ff fa3e 	bl	80020d4 <HAL_GetTick>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d901      	bls.n	8002c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c66:	2303      	movs	r3, #3
 8002c68:	e04f      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	4b2b      	ldr	r3, [pc, #172]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 020c 	and.w	r2, r3, #12
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d1eb      	bne.n	8002c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b25      	ldr	r3, [pc, #148]	; (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d20c      	bcs.n	8002ca4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	4b22      	ldr	r3, [pc, #136]	; (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c92:	4b20      	ldr	r3, [pc, #128]	; (8002d14 <HAL_RCC_ClockConfig+0x1b8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0307 	and.w	r3, r3, #7
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d001      	beq.n	8002ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e032      	b.n	8002d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cb0:	4b19      	ldr	r3, [pc, #100]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	4916      	ldr	r1, [pc, #88]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0308 	and.w	r3, r3, #8
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d009      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cce:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	691b      	ldr	r3, [r3, #16]
 8002cda:	00db      	lsls	r3, r3, #3
 8002cdc:	490e      	ldr	r1, [pc, #56]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ce2:	f000 f821 	bl	8002d28 <HAL_RCC_GetSysClockFreq>
 8002ce6:	4602      	mov	r2, r0
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	490a      	ldr	r1, [pc, #40]	; (8002d1c <HAL_RCC_ClockConfig+0x1c0>)
 8002cf4:	5ccb      	ldrb	r3, [r1, r3]
 8002cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfa:	4a09      	ldr	r2, [pc, #36]	; (8002d20 <HAL_RCC_ClockConfig+0x1c4>)
 8002cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002cfe:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <HAL_RCC_ClockConfig+0x1c8>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4618      	mov	r0, r3
 8002d04:	f7ff f9a2 	bl	800204c <HAL_InitTick>

  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3710      	adds	r7, #16
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	40023c00 	.word	0x40023c00
 8002d18:	40023800 	.word	0x40023800
 8002d1c:	08009720 	.word	0x08009720
 8002d20:	20000010 	.word	0x20000010
 8002d24:	20000014 	.word	0x20000014

08002d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d2c:	b090      	sub	sp, #64	; 0x40
 8002d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t pllvco = 0U;
 8002d34:	2300      	movs	r3, #0
 8002d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t pllp = 0U;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d40:	4b59      	ldr	r3, [pc, #356]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f003 030c 	and.w	r3, r3, #12
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d00d      	beq.n	8002d68 <HAL_RCC_GetSysClockFreq+0x40>
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	f200 80a1 	bhi.w	8002e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d002      	beq.n	8002d5c <HAL_RCC_GetSysClockFreq+0x34>
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d003      	beq.n	8002d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d5a:	e09b      	b.n	8002e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d5c:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_GetSysClockFreq+0x184>)
 8002d5e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d60:	e09b      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d62:	4b53      	ldr	r3, [pc, #332]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d66:	e098      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d68:	4b4f      	ldr	r3, [pc, #316]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d70:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d72:	4b4d      	ldr	r3, [pc, #308]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d028      	beq.n	8002dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d7e:	4b4a      	ldr	r3, [pc, #296]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	099b      	lsrs	r3, r3, #6
 8002d84:	2200      	movs	r2, #0
 8002d86:	623b      	str	r3, [r7, #32]
 8002d88:	627a      	str	r2, [r7, #36]	; 0x24
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d90:	2100      	movs	r1, #0
 8002d92:	4b47      	ldr	r3, [pc, #284]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d94:	fb03 f201 	mul.w	r2, r3, r1
 8002d98:	2300      	movs	r3, #0
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	4413      	add	r3, r2
 8002da0:	4a43      	ldr	r2, [pc, #268]	; (8002eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8002da2:	fba0 1202 	umull	r1, r2, r0, r2
 8002da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002da8:	460a      	mov	r2, r1
 8002daa:	62ba      	str	r2, [r7, #40]	; 0x28
 8002dac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dae:	4413      	add	r3, r2
 8002db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	2200      	movs	r2, #0
 8002db6:	61bb      	str	r3, [r7, #24]
 8002db8:	61fa      	str	r2, [r7, #28]
 8002dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002dc2:	f7fd fef1 	bl	8000ba8 <__aeabi_uldivmod>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4613      	mov	r3, r2
 8002dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002dce:	e053      	b.n	8002e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd0:	4b35      	ldr	r3, [pc, #212]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	099b      	lsrs	r3, r3, #6
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	617a      	str	r2, [r7, #20]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002de2:	f04f 0b00 	mov.w	fp, #0
 8002de6:	4652      	mov	r2, sl
 8002de8:	465b      	mov	r3, fp
 8002dea:	f04f 0000 	mov.w	r0, #0
 8002dee:	f04f 0100 	mov.w	r1, #0
 8002df2:	0159      	lsls	r1, r3, #5
 8002df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df8:	0150      	lsls	r0, r2, #5
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8002e02:	eb63 090b 	sbc.w	r9, r3, fp
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8002e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8002e22:	f04f 0200 	mov.w	r2, #0
 8002e26:	f04f 0300 	mov.w	r3, #0
 8002e2a:	00eb      	lsls	r3, r5, #3
 8002e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e30:	00e2      	lsls	r2, r4, #3
 8002e32:	4614      	mov	r4, r2
 8002e34:	461d      	mov	r5, r3
 8002e36:	eb14 030a 	adds.w	r3, r4, sl
 8002e3a:	603b      	str	r3, [r7, #0]
 8002e3c:	eb45 030b 	adc.w	r3, r5, fp
 8002e40:	607b      	str	r3, [r7, #4]
 8002e42:	f04f 0200 	mov.w	r2, #0
 8002e46:	f04f 0300 	mov.w	r3, #0
 8002e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e4e:	4629      	mov	r1, r5
 8002e50:	028b      	lsls	r3, r1, #10
 8002e52:	4621      	mov	r1, r4
 8002e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e58:	4621      	mov	r1, r4
 8002e5a:	028a      	lsls	r2, r1, #10
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e62:	2200      	movs	r2, #0
 8002e64:	60bb      	str	r3, [r7, #8]
 8002e66:	60fa      	str	r2, [r7, #12]
 8002e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e6c:	f7fd fe9c 	bl	8000ba8 <__aeabi_uldivmod>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4613      	mov	r3, r2
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0c1b      	lsrs	r3, r3, #16
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	3301      	adds	r3, #1
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002e88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e92:	e002      	b.n	8002e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e94:	4b05      	ldr	r3, [pc, #20]	; (8002eac <HAL_RCC_GetSysClockFreq+0x184>)
 8002e96:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3740      	adds	r7, #64	; 0x40
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400
 8002eb0:	017d7840 	.word	0x017d7840

08002eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002eb8:	4b03      	ldr	r3, [pc, #12]	; (8002ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eba:	681b      	ldr	r3, [r3, #0]
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr
 8002ec6:	bf00      	nop
 8002ec8:	20000010 	.word	0x20000010

08002ecc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ed0:	f7ff fff0 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	0a9b      	lsrs	r3, r3, #10
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	4903      	ldr	r1, [pc, #12]	; (8002ef0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ee2:	5ccb      	ldrb	r3, [r1, r3]
 8002ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	08009730 	.word	0x08009730

08002ef4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ef8:	f7ff ffdc 	bl	8002eb4 <HAL_RCC_GetHCLKFreq>
 8002efc:	4602      	mov	r2, r0
 8002efe:	4b05      	ldr	r3, [pc, #20]	; (8002f14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	0b5b      	lsrs	r3, r3, #13
 8002f04:	f003 0307 	and.w	r3, r3, #7
 8002f08:	4903      	ldr	r1, [pc, #12]	; (8002f18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f0a:	5ccb      	ldrb	r3, [r1, r3]
 8002f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	40023800 	.word	0x40023800
 8002f18:	08009730 	.word	0x08009730

08002f1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e07b      	b.n	8003026 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d108      	bne.n	8002f48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f3e:	d009      	beq.n	8002f54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	61da      	str	r2, [r3, #28]
 8002f46:	e005      	b.n	8002f54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d106      	bne.n	8002f74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7fe fe6c 	bl	8001c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2202      	movs	r2, #2
 8002f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002f9c:	431a      	orrs	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691b      	ldr	r3, [r3, #16]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a1b      	ldr	r3, [r3, #32]
 8002fd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd8:	ea42 0103 	orr.w	r1, r2, r3
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	699b      	ldr	r3, [r3, #24]
 8002ff0:	0c1b      	lsrs	r3, r3, #16
 8002ff2:	f003 0104 	and.w	r1, r3, #4
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	f003 0210 	and.w	r2, r3, #16
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69da      	ldr	r2, [r3, #28]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003014:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3708      	adds	r7, #8
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}

0800302e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	b088      	sub	sp, #32
 8003032:	af00      	add	r7, sp, #0
 8003034:	60f8      	str	r0, [r7, #12]
 8003036:	60b9      	str	r1, [r7, #8]
 8003038:	603b      	str	r3, [r7, #0]
 800303a:	4613      	mov	r3, r2
 800303c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800303e:	f7ff f849 	bl	80020d4 <HAL_GetTick>
 8003042:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800304e:	b2db      	uxtb	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d001      	beq.n	8003058 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003054:	2302      	movs	r3, #2
 8003056:	e12a      	b.n	80032ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d002      	beq.n	8003064 <HAL_SPI_Transmit+0x36>
 800305e:	88fb      	ldrh	r3, [r7, #6]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d101      	bne.n	8003068 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e122      	b.n	80032ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800306e:	2b01      	cmp	r3, #1
 8003070:	d101      	bne.n	8003076 <HAL_SPI_Transmit+0x48>
 8003072:	2302      	movs	r3, #2
 8003074:	e11b      	b.n	80032ae <HAL_SPI_Transmit+0x280>
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2201      	movs	r2, #1
 800307a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2203      	movs	r2, #3
 8003082:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	68ba      	ldr	r2, [r7, #8]
 8003090:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	88fa      	ldrh	r2, [r7, #6]
 8003096:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2200      	movs	r2, #0
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2200      	movs	r2, #0
 80030ba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c4:	d10f      	bne.n	80030e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030f0:	2b40      	cmp	r3, #64	; 0x40
 80030f2:	d007      	beq.n	8003104 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003102:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800310c:	d152      	bne.n	80031b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <HAL_SPI_Transmit+0xee>
 8003116:	8b7b      	ldrh	r3, [r7, #26]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d145      	bne.n	80031a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312c:	1c9a      	adds	r2, r3, #2
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003140:	e032      	b.n	80031a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f003 0302 	and.w	r3, r3, #2
 800314c:	2b02      	cmp	r3, #2
 800314e:	d112      	bne.n	8003176 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	1c9a      	adds	r2, r3, #2
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800316a:	b29b      	uxth	r3, r3
 800316c:	3b01      	subs	r3, #1
 800316e:	b29a      	uxth	r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	86da      	strh	r2, [r3, #54]	; 0x36
 8003174:	e018      	b.n	80031a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003176:	f7fe ffad 	bl	80020d4 <HAL_GetTick>
 800317a:	4602      	mov	r2, r0
 800317c:	69fb      	ldr	r3, [r7, #28]
 800317e:	1ad3      	subs	r3, r2, r3
 8003180:	683a      	ldr	r2, [r7, #0]
 8003182:	429a      	cmp	r2, r3
 8003184:	d803      	bhi.n	800318e <HAL_SPI_Transmit+0x160>
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800318c:	d102      	bne.n	8003194 <HAL_SPI_Transmit+0x166>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e082      	b.n	80032ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1c7      	bne.n	8003142 <HAL_SPI_Transmit+0x114>
 80031b2:	e053      	b.n	800325c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d002      	beq.n	80031c2 <HAL_SPI_Transmit+0x194>
 80031bc:	8b7b      	ldrh	r3, [r7, #26]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d147      	bne.n	8003252 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	330c      	adds	r3, #12
 80031cc:	7812      	ldrb	r2, [r2, #0]
 80031ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	1c5a      	adds	r2, r3, #1
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80031de:	b29b      	uxth	r3, r3
 80031e0:	3b01      	subs	r3, #1
 80031e2:	b29a      	uxth	r2, r3
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80031e8:	e033      	b.n	8003252 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d113      	bne.n	8003220 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	330c      	adds	r3, #12
 8003202:	7812      	ldrb	r2, [r2, #0]
 8003204:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320a:	1c5a      	adds	r2, r3, #1
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003214:	b29b      	uxth	r3, r3
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	86da      	strh	r2, [r3, #54]	; 0x36
 800321e:	e018      	b.n	8003252 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003220:	f7fe ff58 	bl	80020d4 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	429a      	cmp	r2, r3
 800322e:	d803      	bhi.n	8003238 <HAL_SPI_Transmit+0x20a>
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003236:	d102      	bne.n	800323e <HAL_SPI_Transmit+0x210>
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d109      	bne.n	8003252 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e02d      	b.n	80032ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d1c6      	bne.n	80031ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800325c:	69fa      	ldr	r2, [r7, #28]
 800325e:	6839      	ldr	r1, [r7, #0]
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fbd9 	bl	8003a18 <SPI_EndRxTxTransaction>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2220      	movs	r2, #32
 8003270:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d10a      	bne.n	8003290 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800327a:	2300      	movs	r3, #0
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68db      	ldr	r3, [r3, #12]
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	617b      	str	r3, [r7, #20]
 800328e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d001      	beq.n	80032ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	e000      	b.n	80032ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80032ac:	2300      	movs	r3, #0
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3720      	adds	r7, #32
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b088      	sub	sp, #32
 80032ba:	af02      	add	r7, sp, #8
 80032bc:	60f8      	str	r0, [r7, #12]
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4613      	mov	r3, r2
 80032c4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d001      	beq.n	80032d6 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	e104      	b.n	80034e0 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032de:	d112      	bne.n	8003306 <HAL_SPI_Receive+0x50>
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10e      	bne.n	8003306 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2204      	movs	r2, #4
 80032ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80032f0:	88fa      	ldrh	r2, [r7, #6]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	9300      	str	r3, [sp, #0]
 80032f6:	4613      	mov	r3, r2
 80032f8:	68ba      	ldr	r2, [r7, #8]
 80032fa:	68b9      	ldr	r1, [r7, #8]
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f8f3 	bl	80034e8 <HAL_SPI_TransmitReceive>
 8003302:	4603      	mov	r3, r0
 8003304:	e0ec      	b.n	80034e0 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003306:	f7fe fee5 	bl	80020d4 <HAL_GetTick>
 800330a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_SPI_Receive+0x62>
 8003312:	88fb      	ldrh	r3, [r7, #6]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d101      	bne.n	800331c <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e0e1      	b.n	80034e0 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003322:	2b01      	cmp	r3, #1
 8003324:	d101      	bne.n	800332a <HAL_SPI_Receive+0x74>
 8003326:	2302      	movs	r3, #2
 8003328:	e0da      	b.n	80034e0 <HAL_SPI_Receive+0x22a>
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2201      	movs	r2, #1
 800332e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2204      	movs	r2, #4
 8003336:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	88fa      	ldrh	r2, [r7, #6]
 800334a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2200      	movs	r2, #0
 800336e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003378:	d10f      	bne.n	800339a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681a      	ldr	r2, [r3, #0]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003388:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003398:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	d007      	beq.n	80033b8 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d170      	bne.n	80034a2 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80033c0:	e035      	b.n	800342e <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d115      	bne.n	80033fc <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f103 020c 	add.w	r2, r3, #12
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	7812      	ldrb	r2, [r2, #0]
 80033de:	b2d2      	uxtb	r2, r2
 80033e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e6:	1c5a      	adds	r2, r3, #1
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f0:	b29b      	uxth	r3, r3
 80033f2:	3b01      	subs	r3, #1
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033fa:	e018      	b.n	800342e <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033fc:	f7fe fe6a 	bl	80020d4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	429a      	cmp	r2, r3
 800340a:	d803      	bhi.n	8003414 <HAL_SPI_Receive+0x15e>
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003412:	d102      	bne.n	800341a <HAL_SPI_Receive+0x164>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d109      	bne.n	800342e <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e058      	b.n	80034e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003432:	b29b      	uxth	r3, r3
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1c4      	bne.n	80033c2 <HAL_SPI_Receive+0x10c>
 8003438:	e038      	b.n	80034ac <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f003 0301 	and.w	r3, r3, #1
 8003444:	2b01      	cmp	r3, #1
 8003446:	d113      	bne.n	8003470 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68da      	ldr	r2, [r3, #12]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003452:	b292      	uxth	r2, r2
 8003454:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	1c9a      	adds	r2, r3, #2
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800346e:	e018      	b.n	80034a2 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003470:	f7fe fe30 	bl	80020d4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	429a      	cmp	r2, r3
 800347e:	d803      	bhi.n	8003488 <HAL_SPI_Receive+0x1d2>
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003486:	d102      	bne.n	800348e <HAL_SPI_Receive+0x1d8>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d109      	bne.n	80034a2 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          __HAL_UNLOCK(hspi);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e01e      	b.n	80034e0 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a6:	b29b      	uxth	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d1c6      	bne.n	800343a <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034ac:	697a      	ldr	r2, [r7, #20]
 80034ae:	6839      	ldr	r1, [r7, #0]
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f000 fa4b 	bl	800394c <SPI_EndRxTransaction>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d002      	beq.n	80034c2 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e000      	b.n	80034e0 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80034de:	2300      	movs	r3, #0
  }
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3718      	adds	r7, #24
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08a      	sub	sp, #40	; 0x28
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
 80034f4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034f6:	2301      	movs	r3, #1
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034fa:	f7fe fdeb 	bl	80020d4 <HAL_GetTick>
 80034fe:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003506:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800350e:	887b      	ldrh	r3, [r7, #2]
 8003510:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003512:	7ffb      	ldrb	r3, [r7, #31]
 8003514:	2b01      	cmp	r3, #1
 8003516:	d00c      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x4a>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800351e:	d106      	bne.n	800352e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d102      	bne.n	800352e <HAL_SPI_TransmitReceive+0x46>
 8003528:	7ffb      	ldrb	r3, [r7, #31]
 800352a:	2b04      	cmp	r3, #4
 800352c:	d001      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800352e:	2302      	movs	r3, #2
 8003530:	e17f      	b.n	8003832 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x5c>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d002      	beq.n	8003544 <HAL_SPI_TransmitReceive+0x5c>
 800353e:	887b      	ldrh	r3, [r7, #2]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d101      	bne.n	8003548 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e174      	b.n	8003832 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800354e:	2b01      	cmp	r3, #1
 8003550:	d101      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x6e>
 8003552:	2302      	movs	r3, #2
 8003554:	e16d      	b.n	8003832 <HAL_SPI_TransmitReceive+0x34a>
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	2201      	movs	r2, #1
 800355a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2205      	movs	r2, #5
 800356e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	887a      	ldrh	r2, [r7, #2]
 8003582:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	887a      	ldrh	r2, [r7, #2]
 8003588:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	68ba      	ldr	r2, [r7, #8]
 800358e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	887a      	ldrh	r2, [r7, #2]
 8003594:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	887a      	ldrh	r2, [r7, #2]
 800359a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2200      	movs	r2, #0
 80035a6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d007      	beq.n	80035c6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80035c4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	68db      	ldr	r3, [r3, #12]
 80035ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035ce:	d17e      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d002      	beq.n	80035de <HAL_SPI_TransmitReceive+0xf6>
 80035d8:	8afb      	ldrh	r3, [r7, #22]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d16c      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	881a      	ldrh	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	1c9a      	adds	r2, r3, #2
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	3b01      	subs	r3, #1
 80035fc:	b29a      	uxth	r2, r3
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	86da      	strh	r2, [r3, #54]	; 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003602:	e059      	b.n	80036b8 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b02      	cmp	r3, #2
 8003610:	d11b      	bne.n	800364a <HAL_SPI_TransmitReceive+0x162>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003616:	b29b      	uxth	r3, r3
 8003618:	2b00      	cmp	r3, #0
 800361a:	d016      	beq.n	800364a <HAL_SPI_TransmitReceive+0x162>
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	2b01      	cmp	r3, #1
 8003620:	d113      	bne.n	800364a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003626:	881a      	ldrh	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	1c9a      	adds	r2, r3, #2
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003646:	2300      	movs	r3, #0
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b01      	cmp	r3, #1
 8003656:	d119      	bne.n	800368c <HAL_SPI_TransmitReceive+0x1a4>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800365c:	b29b      	uxth	r3, r3
 800365e:	2b00      	cmp	r3, #0
 8003660:	d014      	beq.n	800368c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68da      	ldr	r2, [r3, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800366c:	b292      	uxth	r2, r2
 800366e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	1c9a      	adds	r2, r3, #2
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800367e:	b29b      	uxth	r3, r3
 8003680:	3b01      	subs	r3, #1
 8003682:	b29a      	uxth	r2, r3
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003688:	2301      	movs	r3, #1
 800368a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800368c:	f7fe fd22 	bl	80020d4 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	6a3b      	ldr	r3, [r7, #32]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003698:	429a      	cmp	r2, r3
 800369a:	d80d      	bhi.n	80036b8 <HAL_SPI_TransmitReceive+0x1d0>
 800369c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80036a2:	d009      	beq.n	80036b8 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e0bc      	b.n	8003832 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1a0      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x11c>
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d19b      	bne.n	8003604 <HAL_SPI_TransmitReceive+0x11c>
 80036cc:	e082      	b.n	80037d4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <HAL_SPI_TransmitReceive+0x1f4>
 80036d6:	8afb      	ldrh	r3, [r7, #22]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d171      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	330c      	adds	r3, #12
 80036e6:	7812      	ldrb	r2, [r2, #0]
 80036e8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	1c5a      	adds	r2, r3, #1
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036f8:	b29b      	uxth	r3, r3
 80036fa:	3b01      	subs	r3, #1
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	86da      	strh	r2, [r3, #54]	; 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003702:	e05d      	b.n	80037c0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b02      	cmp	r3, #2
 8003710:	d11c      	bne.n	800374c <HAL_SPI_TransmitReceive+0x264>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003716:	b29b      	uxth	r3, r3
 8003718:	2b00      	cmp	r3, #0
 800371a:	d017      	beq.n	800374c <HAL_SPI_TransmitReceive+0x264>
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	2b01      	cmp	r3, #1
 8003720:	d114      	bne.n	800374c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	330c      	adds	r3, #12
 800372c:	7812      	ldrb	r2, [r2, #0]
 800372e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003734:	1c5a      	adds	r2, r3, #1
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800373e:	b29b      	uxth	r3, r3
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003748:	2300      	movs	r3, #0
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b01      	cmp	r3, #1
 8003758:	d119      	bne.n	800378e <HAL_SPI_TransmitReceive+0x2a6>
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800375e:	b29b      	uxth	r3, r3
 8003760:	2b00      	cmp	r3, #0
 8003762:	d014      	beq.n	800378e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003776:	1c5a      	adds	r2, r3, #1
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003780:	b29b      	uxth	r3, r3
 8003782:	3b01      	subs	r3, #1
 8003784:	b29a      	uxth	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800378a:	2301      	movs	r3, #1
 800378c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800378e:	f7fe fca1 	bl	80020d4 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	6a3b      	ldr	r3, [r7, #32]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379a:	429a      	cmp	r2, r3
 800379c:	d803      	bhi.n	80037a6 <HAL_SPI_TransmitReceive+0x2be>
 800379e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037a4:	d102      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x2c4>
 80037a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d109      	bne.n	80037c0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e038      	b.n	8003832 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d19c      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x21c>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d197      	bne.n	8003704 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80037d4:	6a3a      	ldr	r2, [r7, #32]
 80037d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80037d8:	68f8      	ldr	r0, [r7, #12]
 80037da:	f000 f91d 	bl	8003a18 <SPI_EndRxTxTransaction>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2220      	movs	r2, #32
 80037e8:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hspi);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e01d      	b.n	8003832 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d10a      	bne.n	8003814 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037fe:	2300      	movs	r3, #0
 8003800:	613b      	str	r3, [r7, #16]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	613b      	str	r3, [r7, #16]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	613b      	str	r3, [r7, #16]
 8003812:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	2b00      	cmp	r3, #0
 800382a:	d001      	beq.n	8003830 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e000      	b.n	8003832 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003830:	2300      	movs	r3, #0
  }
}
 8003832:	4618      	mov	r0, r3
 8003834:	3728      	adds	r7, #40	; 0x28
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
	...

0800383c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800384c:	f7fe fc42 	bl	80020d4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	4413      	add	r3, r2
 800385a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800385c:	f7fe fc3a 	bl	80020d4 <HAL_GetTick>
 8003860:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003862:	4b39      	ldr	r3, [pc, #228]	; (8003948 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	015b      	lsls	r3, r3, #5
 8003868:	0d1b      	lsrs	r3, r3, #20
 800386a:	69fa      	ldr	r2, [r7, #28]
 800386c:	fb02 f303 	mul.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003872:	e054      	b.n	800391e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800387a:	d050      	beq.n	800391e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800387c:	f7fe fc2a 	bl	80020d4 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	69bb      	ldr	r3, [r7, #24]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	429a      	cmp	r2, r3
 800388a:	d902      	bls.n	8003892 <SPI_WaitFlagStateUntilTimeout+0x56>
 800388c:	69fb      	ldr	r3, [r7, #28]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d13d      	bne.n	800390e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80038a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038aa:	d111      	bne.n	80038d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b4:	d004      	beq.n	80038c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038be:	d107      	bne.n	80038d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d8:	d10f      	bne.n	80038fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2201      	movs	r2, #1
 80038fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800390a:	2303      	movs	r3, #3
 800390c:	e017      	b.n	800393e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d101      	bne.n	8003918 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	3b01      	subs	r3, #1
 800391c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4013      	ands	r3, r2
 8003928:	68ba      	ldr	r2, [r7, #8]
 800392a:	429a      	cmp	r2, r3
 800392c:	bf0c      	ite	eq
 800392e:	2301      	moveq	r3, #1
 8003930:	2300      	movne	r3, #0
 8003932:	b2db      	uxtb	r3, r3
 8003934:	461a      	mov	r2, r3
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	429a      	cmp	r2, r3
 800393a:	d19b      	bne.n	8003874 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	20000010 	.word	0x20000010

0800394c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b086      	sub	sp, #24
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003960:	d111      	bne.n	8003986 <SPI_EndRxTransaction+0x3a>
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800396a:	d004      	beq.n	8003976 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003974:	d107      	bne.n	8003986 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003984:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800398e:	d12a      	bne.n	80039e6 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003998:	d012      	beq.n	80039c0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2180      	movs	r1, #128	; 0x80
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f7ff ff49 	bl	800383c <SPI_WaitFlagStateUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d02d      	beq.n	8003a0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b4:	f043 0220 	orr.w	r2, r3, #32
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e026      	b.n	8003a0e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	2101      	movs	r1, #1
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff ff36 	bl	800383c <SPI_WaitFlagStateUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d01a      	beq.n	8003a0c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039da:	f043 0220 	orr.w	r2, r3, #32
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e013      	b.n	8003a0e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	68bb      	ldr	r3, [r7, #8]
 80039ec:	2200      	movs	r2, #0
 80039ee:	2101      	movs	r1, #1
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f7ff ff23 	bl	800383c <SPI_WaitFlagStateUntilTimeout>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d007      	beq.n	8003a0c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a00:	f043 0220 	orr.w	r2, r3, #32
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a08:	2303      	movs	r3, #3
 8003a0a:	e000      	b.n	8003a0e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
	...

08003a18 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b088      	sub	sp, #32
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	2102      	movs	r1, #2
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f7ff ff04 	bl	800383c <SPI_WaitFlagStateUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d007      	beq.n	8003a4a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3e:	f043 0220 	orr.w	r2, r3, #32
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003a46:	2303      	movs	r3, #3
 8003a48:	e032      	b.n	8003ab0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a4a:	4b1b      	ldr	r3, [pc, #108]	; (8003ab8 <SPI_EndRxTxTransaction+0xa0>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	; (8003abc <SPI_EndRxTxTransaction+0xa4>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	0d5b      	lsrs	r3, r3, #21
 8003a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a5a:	fb02 f303 	mul.w	r3, r2, r3
 8003a5e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a68:	d112      	bne.n	8003a90 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	9300      	str	r3, [sp, #0]
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	2200      	movs	r2, #0
 8003a72:	2180      	movs	r1, #128	; 0x80
 8003a74:	68f8      	ldr	r0, [r7, #12]
 8003a76:	f7ff fee1 	bl	800383c <SPI_WaitFlagStateUntilTimeout>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d016      	beq.n	8003aae <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a84:	f043 0220 	orr.w	r2, r3, #32
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e00f      	b.n	8003ab0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00a      	beq.n	8003aac <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d0f2      	beq.n	8003a90 <SPI_EndRxTxTransaction+0x78>
 8003aaa:	e000      	b.n	8003aae <SPI_EndRxTxTransaction+0x96>
        break;
 8003aac:	bf00      	nop
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3718      	adds	r7, #24
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000010 	.word	0x20000010
 8003abc:	165e9f81 	.word	0x165e9f81

08003ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b082      	sub	sp, #8
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e041      	b.n	8003b56 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d106      	bne.n	8003aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7fe f8f8 	bl	8001cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2202      	movs	r2, #2
 8003af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4619      	mov	r1, r3
 8003afe:	4610      	mov	r0, r2
 8003b00:	f000 f8f4 	bl	8003cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2201      	movs	r2, #1
 8003b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b54:	2300      	movs	r3, #0
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}

08003b5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b5e:	b580      	push	{r7, lr}
 8003b60:	b084      	sub	sp, #16
 8003b62:	af00      	add	r7, sp, #0
 8003b64:	6078      	str	r0, [r7, #4]
 8003b66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d101      	bne.n	8003b7a <HAL_TIM_ConfigClockSource+0x1c>
 8003b76:	2302      	movs	r3, #2
 8003b78:	e0b4      	b.n	8003ce4 <HAL_TIM_ConfigClockSource+0x186>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2202      	movs	r2, #2
 8003b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003ba0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb2:	d03e      	beq.n	8003c32 <HAL_TIM_ConfigClockSource+0xd4>
 8003bb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb8:	f200 8087 	bhi.w	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc0:	f000 8086 	beq.w	8003cd0 <HAL_TIM_ConfigClockSource+0x172>
 8003bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc8:	d87f      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003bca:	2b70      	cmp	r3, #112	; 0x70
 8003bcc:	d01a      	beq.n	8003c04 <HAL_TIM_ConfigClockSource+0xa6>
 8003bce:	2b70      	cmp	r3, #112	; 0x70
 8003bd0:	d87b      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003bd2:	2b60      	cmp	r3, #96	; 0x60
 8003bd4:	d050      	beq.n	8003c78 <HAL_TIM_ConfigClockSource+0x11a>
 8003bd6:	2b60      	cmp	r3, #96	; 0x60
 8003bd8:	d877      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003bda:	2b50      	cmp	r3, #80	; 0x50
 8003bdc:	d03c      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0xfa>
 8003bde:	2b50      	cmp	r3, #80	; 0x50
 8003be0:	d873      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003be2:	2b40      	cmp	r3, #64	; 0x40
 8003be4:	d058      	beq.n	8003c98 <HAL_TIM_ConfigClockSource+0x13a>
 8003be6:	2b40      	cmp	r3, #64	; 0x40
 8003be8:	d86f      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003bea:	2b30      	cmp	r3, #48	; 0x30
 8003bec:	d064      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15a>
 8003bee:	2b30      	cmp	r3, #48	; 0x30
 8003bf0:	d86b      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d060      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15a>
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d867      	bhi.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d05c      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15a>
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d05a      	beq.n	8003cb8 <HAL_TIM_ConfigClockSource+0x15a>
 8003c02:	e062      	b.n	8003cca <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c14:	f000 f990 	bl	8003f38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	609a      	str	r2, [r3, #8]
      break;
 8003c30:	e04f      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003c42:	f000 f979 	bl	8003f38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	689a      	ldr	r2, [r3, #8]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c54:	609a      	str	r2, [r3, #8]
      break;
 8003c56:	e03c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c64:	461a      	mov	r2, r3
 8003c66:	f000 f8ed 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	2150      	movs	r1, #80	; 0x50
 8003c70:	4618      	mov	r0, r3
 8003c72:	f000 f946 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003c76:	e02c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c84:	461a      	mov	r2, r3
 8003c86:	f000 f90c 	bl	8003ea2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2160      	movs	r1, #96	; 0x60
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 f936 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003c96:	e01c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	f000 f8cd 	bl	8003e44 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2140      	movs	r1, #64	; 0x40
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f000 f926 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003cb6:	e00c      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	4610      	mov	r0, r2
 8003cc4:	f000 f91d 	bl	8003f02 <TIM_ITRx_SetConfig>
      break;
 8003cc8:	e003      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8003cce:	e000      	b.n	8003cd2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ce2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a46      	ldr	r2, [pc, #280]	; (8003e18 <TIM_Base_SetConfig+0x12c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d013      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d0a:	d00f      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a43      	ldr	r2, [pc, #268]	; (8003e1c <TIM_Base_SetConfig+0x130>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00b      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a42      	ldr	r2, [pc, #264]	; (8003e20 <TIM_Base_SetConfig+0x134>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d007      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	4a41      	ldr	r2, [pc, #260]	; (8003e24 <TIM_Base_SetConfig+0x138>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d003      	beq.n	8003d2c <TIM_Base_SetConfig+0x40>
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a40      	ldr	r2, [pc, #256]	; (8003e28 <TIM_Base_SetConfig+0x13c>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d108      	bne.n	8003d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	68fa      	ldr	r2, [r7, #12]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a35      	ldr	r2, [pc, #212]	; (8003e18 <TIM_Base_SetConfig+0x12c>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d02b      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d4c:	d027      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <TIM_Base_SetConfig+0x130>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d023      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	4a31      	ldr	r2, [pc, #196]	; (8003e20 <TIM_Base_SetConfig+0x134>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d01f      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <TIM_Base_SetConfig+0x138>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d01b      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <TIM_Base_SetConfig+0x13c>)
 8003d6a:	4293      	cmp	r3, r2
 8003d6c:	d017      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4a2e      	ldr	r2, [pc, #184]	; (8003e2c <TIM_Base_SetConfig+0x140>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d013      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <TIM_Base_SetConfig+0x144>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d00f      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <TIM_Base_SetConfig+0x148>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00b      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <TIM_Base_SetConfig+0x14c>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d007      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a2a      	ldr	r2, [pc, #168]	; (8003e3c <TIM_Base_SetConfig+0x150>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d003      	beq.n	8003d9e <TIM_Base_SetConfig+0xb2>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a29      	ldr	r2, [pc, #164]	; (8003e40 <TIM_Base_SetConfig+0x154>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d108      	bne.n	8003db0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681a      	ldr	r2, [r3, #0]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a10      	ldr	r2, [pc, #64]	; (8003e18 <TIM_Base_SetConfig+0x12c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d003      	beq.n	8003de4 <TIM_Base_SetConfig+0xf8>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a12      	ldr	r2, [pc, #72]	; (8003e28 <TIM_Base_SetConfig+0x13c>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d103      	bne.n	8003dec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691a      	ldr	r2, [r3, #16]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d105      	bne.n	8003e0a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f023 0201 	bic.w	r2, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	611a      	str	r2, [r3, #16]
  }
}
 8003e0a:	bf00      	nop
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	40000400 	.word	0x40000400
 8003e20:	40000800 	.word	0x40000800
 8003e24:	40000c00 	.word	0x40000c00
 8003e28:	40010400 	.word	0x40010400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	40001800 	.word	0x40001800
 8003e3c:	40001c00 	.word	0x40001c00
 8003e40:	40002000 	.word	0x40002000

08003e44 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6a1b      	ldr	r3, [r3, #32]
 8003e5a:	f023 0201 	bic.w	r2, r3, #1
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f023 030a 	bic.w	r3, r3, #10
 8003e80:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	621a      	str	r2, [r3, #32]
}
 8003e96:	bf00      	nop
 8003e98:	371c      	adds	r7, #28
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b087      	sub	sp, #28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	f023 0210 	bic.w	r2, r3, #16
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ecc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	031b      	lsls	r3, r3, #12
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ede:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	011b      	lsls	r3, r3, #4
 8003ee4:	697a      	ldr	r2, [r7, #20]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	693a      	ldr	r2, [r7, #16]
 8003eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	697a      	ldr	r2, [r7, #20]
 8003ef4:	621a      	str	r2, [r3, #32]
}
 8003ef6:	bf00      	nop
 8003ef8:	371c      	adds	r7, #28
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr

08003f02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f02:	b480      	push	{r7}
 8003f04:	b085      	sub	sp, #20
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
 8003f0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f1a:	683a      	ldr	r2, [r7, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f043 0307 	orr.w	r3, r3, #7
 8003f24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	609a      	str	r2, [r3, #8]
}
 8003f2c:	bf00      	nop
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f38:	b480      	push	{r7}
 8003f3a:	b087      	sub	sp, #28
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	60b9      	str	r1, [r7, #8]
 8003f42:	607a      	str	r2, [r7, #4]
 8003f44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	021a      	lsls	r2, r3, #8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	697a      	ldr	r2, [r7, #20]
 8003f6a:	609a      	str	r2, [r3, #8]
}
 8003f6c:	bf00      	nop
 8003f6e:	371c      	adds	r7, #28
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e05a      	b.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a21      	ldr	r2, [pc, #132]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d01d      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10c      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40010400 	.word	0x40010400
 8004068:	40014000 	.word	0x40014000
 800406c:	40001800 	.word	0x40001800

08004070 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d101      	bne.n	8004082 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e042      	b.n	8004108 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004088:	b2db      	uxtb	r3, r3
 800408a:	2b00      	cmp	r3, #0
 800408c:	d106      	bne.n	800409c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7fd fe42 	bl	8001d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2224      	movs	r2, #36	; 0x24
 80040a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f000 f973 	bl	80043a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	695a      	ldr	r2, [r3, #20]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80040d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80040e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2200      	movs	r2, #0
 80040ee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2220      	movs	r2, #32
 80040f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2220      	movs	r2, #32
 80040fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3708      	adds	r7, #8
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b08a      	sub	sp, #40	; 0x28
 8004114:	af02      	add	r7, sp, #8
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	603b      	str	r3, [r7, #0]
 800411c:	4613      	mov	r3, r2
 800411e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800412a:	b2db      	uxtb	r3, r3
 800412c:	2b20      	cmp	r3, #32
 800412e:	d175      	bne.n	800421c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_UART_Transmit+0x2c>
 8004136:	88fb      	ldrh	r3, [r7, #6]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d101      	bne.n	8004140 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e06e      	b.n	800421e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2200      	movs	r2, #0
 8004144:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2221      	movs	r2, #33	; 0x21
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800414e:	f7fd ffc1 	bl	80020d4 <HAL_GetTick>
 8004152:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	88fa      	ldrh	r2, [r7, #6]
 8004158:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	88fa      	ldrh	r2, [r7, #6]
 800415e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004168:	d108      	bne.n	800417c <HAL_UART_Transmit+0x6c>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d104      	bne.n	800417c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004172:	2300      	movs	r3, #0
 8004174:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	61bb      	str	r3, [r7, #24]
 800417a:	e003      	b.n	8004184 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004180:	2300      	movs	r3, #0
 8004182:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004184:	e02e      	b.n	80041e4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	9300      	str	r3, [sp, #0]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2200      	movs	r2, #0
 800418e:	2180      	movs	r1, #128	; 0x80
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f000 f848 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 8004196:	4603      	mov	r3, r0
 8004198:	2b00      	cmp	r3, #0
 800419a:	d005      	beq.n	80041a8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80041a4:	2303      	movs	r3, #3
 80041a6:	e03a      	b.n	800421e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10b      	bne.n	80041c6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	881b      	ldrh	r3, [r3, #0]
 80041b2:	461a      	mov	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	3302      	adds	r3, #2
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	e007      	b.n	80041d6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	781a      	ldrb	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	3301      	adds	r3, #1
 80041d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041da:	b29b      	uxth	r3, r3
 80041dc:	3b01      	subs	r3, #1
 80041de:	b29a      	uxth	r2, r3
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1cb      	bne.n	8004186 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	9300      	str	r3, [sp, #0]
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	2200      	movs	r2, #0
 80041f6:	2140      	movs	r1, #64	; 0x40
 80041f8:	68f8      	ldr	r0, [r7, #12]
 80041fa:	f000 f814 	bl	8004226 <UART_WaitOnFlagUntilTimeout>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d005      	beq.n	8004210 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2220      	movs	r2, #32
 8004208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e006      	b.n	800421e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2220      	movs	r2, #32
 8004214:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	e000      	b.n	800421e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800421c:	2302      	movs	r3, #2
  }
}
 800421e:	4618      	mov	r0, r3
 8004220:	3720      	adds	r7, #32
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b086      	sub	sp, #24
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4613      	mov	r3, r2
 8004234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004236:	e03b      	b.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800423e:	d037      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004240:	f7fd ff48 	bl	80020d4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	6a3a      	ldr	r2, [r7, #32]
 800424c:	429a      	cmp	r2, r3
 800424e:	d302      	bcc.n	8004256 <UART_WaitOnFlagUntilTimeout+0x30>
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e03a      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	f003 0304 	and.w	r3, r3, #4
 8004264:	2b00      	cmp	r3, #0
 8004266:	d023      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	2b80      	cmp	r3, #128	; 0x80
 800426c:	d020      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b40      	cmp	r3, #64	; 0x40
 8004272:	d01d      	beq.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0308 	and.w	r3, r3, #8
 800427e:	2b08      	cmp	r3, #8
 8004280:	d116      	bne.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004282:	2300      	movs	r3, #0
 8004284:	617b      	str	r3, [r7, #20]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	617b      	str	r3, [r7, #20]
 8004296:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004298:	68f8      	ldr	r0, [r7, #12]
 800429a:	f000 f81d 	bl	80042d8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2208      	movs	r2, #8
 80042a2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e00f      	b.n	80042d0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	4013      	ands	r3, r2
 80042ba:	68ba      	ldr	r2, [r7, #8]
 80042bc:	429a      	cmp	r2, r3
 80042be:	bf0c      	ite	eq
 80042c0:	2301      	moveq	r3, #1
 80042c2:	2300      	movne	r3, #0
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	461a      	mov	r2, r3
 80042c8:	79fb      	ldrb	r3, [r7, #7]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d0b4      	beq.n	8004238 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042d8:	b480      	push	{r7}
 80042da:	b095      	sub	sp, #84	; 0x54
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042ea:	e853 3f00 	ldrex	r3, [r3]
 80042ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80042f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004300:	643a      	str	r2, [r7, #64]	; 0x40
 8004302:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004304:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004306:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800430e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004310:	2b00      	cmp	r3, #0
 8004312:	d1e5      	bne.n	80042e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	3314      	adds	r3, #20
 800431a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	6a3b      	ldr	r3, [r7, #32]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	61fb      	str	r3, [r7, #28]
   return(result);
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	64bb      	str	r3, [r7, #72]	; 0x48
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004334:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004338:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800433a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800433c:	e841 2300 	strex	r3, r2, [r1]
 8004340:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e5      	bne.n	8004314 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	2b01      	cmp	r3, #1
 800434e:	d119      	bne.n	8004384 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	330c      	adds	r3, #12
 8004356:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	f023 0310 	bic.w	r3, r3, #16
 8004366:	647b      	str	r3, [r7, #68]	; 0x44
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004370:	61ba      	str	r2, [r7, #24]
 8004372:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004374:	6979      	ldr	r1, [r7, #20]
 8004376:	69ba      	ldr	r2, [r7, #24]
 8004378:	e841 2300 	strex	r3, r2, [r1]
 800437c:	613b      	str	r3, [r7, #16]
   return(result);
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1e5      	bne.n	8004350 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2220      	movs	r2, #32
 8004388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004392:	bf00      	nop
 8004394:	3754      	adds	r7, #84	; 0x54
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
	...

080043a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043a4:	b0c0      	sub	sp, #256	; 0x100
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	691b      	ldr	r3, [r3, #16]
 80043b4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	68d9      	ldr	r1, [r3, #12]
 80043be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	ea40 0301 	orr.w	r3, r0, r1
 80043c8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043ce:	689a      	ldr	r2, [r3, #8]
 80043d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043d4:	691b      	ldr	r3, [r3, #16]
 80043d6:	431a      	orrs	r2, r3
 80043d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	431a      	orrs	r2, r3
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80043ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80043f8:	f021 010c 	bic.w	r1, r1, #12
 80043fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004406:	430b      	orrs	r3, r1
 8004408:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800441a:	6999      	ldr	r1, [r3, #24]
 800441c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	ea40 0301 	orr.w	r3, r0, r1
 8004426:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b8f      	ldr	r3, [pc, #572]	; (800466c <UART_SetConfig+0x2cc>)
 8004430:	429a      	cmp	r2, r3
 8004432:	d005      	beq.n	8004440 <UART_SetConfig+0xa0>
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	4b8d      	ldr	r3, [pc, #564]	; (8004670 <UART_SetConfig+0x2d0>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d104      	bne.n	800444a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004440:	f7fe fd58 	bl	8002ef4 <HAL_RCC_GetPCLK2Freq>
 8004444:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004448:	e003      	b.n	8004452 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800444a:	f7fe fd3f 	bl	8002ecc <HAL_RCC_GetPCLK1Freq>
 800444e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800445c:	f040 810c 	bne.w	8004678 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800446a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800446e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	1891      	adds	r1, r2, r2
 8004478:	65b9      	str	r1, [r7, #88]	; 0x58
 800447a:	415b      	adcs	r3, r3
 800447c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800447e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004482:	4621      	mov	r1, r4
 8004484:	eb12 0801 	adds.w	r8, r2, r1
 8004488:	4629      	mov	r1, r5
 800448a:	eb43 0901 	adc.w	r9, r3, r1
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	f04f 0300 	mov.w	r3, #0
 8004496:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800449a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800449e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044a2:	4690      	mov	r8, r2
 80044a4:	4699      	mov	r9, r3
 80044a6:	4623      	mov	r3, r4
 80044a8:	eb18 0303 	adds.w	r3, r8, r3
 80044ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80044b0:	462b      	mov	r3, r5
 80044b2:	eb49 0303 	adc.w	r3, r9, r3
 80044b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80044ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80044c6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80044ca:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80044ce:	460b      	mov	r3, r1
 80044d0:	18db      	adds	r3, r3, r3
 80044d2:	653b      	str	r3, [r7, #80]	; 0x50
 80044d4:	4613      	mov	r3, r2
 80044d6:	eb42 0303 	adc.w	r3, r2, r3
 80044da:	657b      	str	r3, [r7, #84]	; 0x54
 80044dc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80044e0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80044e4:	f7fc fb60 	bl	8000ba8 <__aeabi_uldivmod>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	4b61      	ldr	r3, [pc, #388]	; (8004674 <UART_SetConfig+0x2d4>)
 80044ee:	fba3 2302 	umull	r2, r3, r3, r2
 80044f2:	095b      	lsrs	r3, r3, #5
 80044f4:	011c      	lsls	r4, r3, #4
 80044f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044fa:	2200      	movs	r2, #0
 80044fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004500:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004504:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004508:	4642      	mov	r2, r8
 800450a:	464b      	mov	r3, r9
 800450c:	1891      	adds	r1, r2, r2
 800450e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004510:	415b      	adcs	r3, r3
 8004512:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004514:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004518:	4641      	mov	r1, r8
 800451a:	eb12 0a01 	adds.w	sl, r2, r1
 800451e:	4649      	mov	r1, r9
 8004520:	eb43 0b01 	adc.w	fp, r3, r1
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004530:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004534:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004538:	4692      	mov	sl, r2
 800453a:	469b      	mov	fp, r3
 800453c:	4643      	mov	r3, r8
 800453e:	eb1a 0303 	adds.w	r3, sl, r3
 8004542:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004546:	464b      	mov	r3, r9
 8004548:	eb4b 0303 	adc.w	r3, fp, r3
 800454c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800455c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004560:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004564:	460b      	mov	r3, r1
 8004566:	18db      	adds	r3, r3, r3
 8004568:	643b      	str	r3, [r7, #64]	; 0x40
 800456a:	4613      	mov	r3, r2
 800456c:	eb42 0303 	adc.w	r3, r2, r3
 8004570:	647b      	str	r3, [r7, #68]	; 0x44
 8004572:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004576:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800457a:	f7fc fb15 	bl	8000ba8 <__aeabi_uldivmod>
 800457e:	4602      	mov	r2, r0
 8004580:	460b      	mov	r3, r1
 8004582:	4611      	mov	r1, r2
 8004584:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <UART_SetConfig+0x2d4>)
 8004586:	fba3 2301 	umull	r2, r3, r3, r1
 800458a:	095b      	lsrs	r3, r3, #5
 800458c:	2264      	movs	r2, #100	; 0x64
 800458e:	fb02 f303 	mul.w	r3, r2, r3
 8004592:	1acb      	subs	r3, r1, r3
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800459a:	4b36      	ldr	r3, [pc, #216]	; (8004674 <UART_SetConfig+0x2d4>)
 800459c:	fba3 2302 	umull	r2, r3, r3, r2
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045a8:	441c      	add	r4, r3
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80045b4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80045b8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80045c4:	415b      	adcs	r3, r3
 80045c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6339      	str	r1, [r7, #48]	; 0x30
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	637b      	str	r3, [r7, #52]	; 0x34
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004618:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800461c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004620:	460b      	mov	r3, r1
 8004622:	18db      	adds	r3, r3, r3
 8004624:	62bb      	str	r3, [r7, #40]	; 0x28
 8004626:	4613      	mov	r3, r2
 8004628:	eb42 0303 	adc.w	r3, r2, r3
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800462e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004632:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004636:	f7fc fab7 	bl	8000ba8 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4b0d      	ldr	r3, [pc, #52]	; (8004674 <UART_SetConfig+0x2d4>)
 8004640:	fba3 1302 	umull	r1, r3, r3, r2
 8004644:	095b      	lsrs	r3, r3, #5
 8004646:	2164      	movs	r1, #100	; 0x64
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	3332      	adds	r3, #50	; 0x32
 8004652:	4a08      	ldr	r2, [pc, #32]	; (8004674 <UART_SetConfig+0x2d4>)
 8004654:	fba2 2303 	umull	r2, r3, r2, r3
 8004658:	095b      	lsrs	r3, r3, #5
 800465a:	f003 0207 	and.w	r2, r3, #7
 800465e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4422      	add	r2, r4
 8004666:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004668:	e106      	b.n	8004878 <UART_SetConfig+0x4d8>
 800466a:	bf00      	nop
 800466c:	40011000 	.word	0x40011000
 8004670:	40011400 	.word	0x40011400
 8004674:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004682:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004686:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800468a:	4642      	mov	r2, r8
 800468c:	464b      	mov	r3, r9
 800468e:	1891      	adds	r1, r2, r2
 8004690:	6239      	str	r1, [r7, #32]
 8004692:	415b      	adcs	r3, r3
 8004694:	627b      	str	r3, [r7, #36]	; 0x24
 8004696:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800469a:	4641      	mov	r1, r8
 800469c:	1854      	adds	r4, r2, r1
 800469e:	4649      	mov	r1, r9
 80046a0:	eb43 0501 	adc.w	r5, r3, r1
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	f04f 0300 	mov.w	r3, #0
 80046ac:	00eb      	lsls	r3, r5, #3
 80046ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046b2:	00e2      	lsls	r2, r4, #3
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	4643      	mov	r3, r8
 80046ba:	18e3      	adds	r3, r4, r3
 80046bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80046c0:	464b      	mov	r3, r9
 80046c2:	eb45 0303 	adc.w	r3, r5, r3
 80046c6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80046ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80046d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80046e6:	4629      	mov	r1, r5
 80046e8:	008b      	lsls	r3, r1, #2
 80046ea:	4621      	mov	r1, r4
 80046ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f0:	4621      	mov	r1, r4
 80046f2:	008a      	lsls	r2, r1, #2
 80046f4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80046f8:	f7fc fa56 	bl	8000ba8 <__aeabi_uldivmod>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4b60      	ldr	r3, [pc, #384]	; (8004884 <UART_SetConfig+0x4e4>)
 8004702:	fba3 2302 	umull	r2, r3, r3, r2
 8004706:	095b      	lsrs	r3, r3, #5
 8004708:	011c      	lsls	r4, r3, #4
 800470a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800470e:	2200      	movs	r2, #0
 8004710:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004714:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004718:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800471c:	4642      	mov	r2, r8
 800471e:	464b      	mov	r3, r9
 8004720:	1891      	adds	r1, r2, r2
 8004722:	61b9      	str	r1, [r7, #24]
 8004724:	415b      	adcs	r3, r3
 8004726:	61fb      	str	r3, [r7, #28]
 8004728:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800472c:	4641      	mov	r1, r8
 800472e:	1851      	adds	r1, r2, r1
 8004730:	6139      	str	r1, [r7, #16]
 8004732:	4649      	mov	r1, r9
 8004734:	414b      	adcs	r3, r1
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	f04f 0200 	mov.w	r2, #0
 800473c:	f04f 0300 	mov.w	r3, #0
 8004740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004744:	4659      	mov	r1, fp
 8004746:	00cb      	lsls	r3, r1, #3
 8004748:	4651      	mov	r1, sl
 800474a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800474e:	4651      	mov	r1, sl
 8004750:	00ca      	lsls	r2, r1, #3
 8004752:	4610      	mov	r0, r2
 8004754:	4619      	mov	r1, r3
 8004756:	4603      	mov	r3, r0
 8004758:	4642      	mov	r2, r8
 800475a:	189b      	adds	r3, r3, r2
 800475c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004760:	464b      	mov	r3, r9
 8004762:	460a      	mov	r2, r1
 8004764:	eb42 0303 	adc.w	r3, r2, r3
 8004768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	67bb      	str	r3, [r7, #120]	; 0x78
 8004776:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004778:	f04f 0200 	mov.w	r2, #0
 800477c:	f04f 0300 	mov.w	r3, #0
 8004780:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004784:	4649      	mov	r1, r9
 8004786:	008b      	lsls	r3, r1, #2
 8004788:	4641      	mov	r1, r8
 800478a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800478e:	4641      	mov	r1, r8
 8004790:	008a      	lsls	r2, r1, #2
 8004792:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004796:	f7fc fa07 	bl	8000ba8 <__aeabi_uldivmod>
 800479a:	4602      	mov	r2, r0
 800479c:	460b      	mov	r3, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	4b38      	ldr	r3, [pc, #224]	; (8004884 <UART_SetConfig+0x4e4>)
 80047a2:	fba3 2301 	umull	r2, r3, r3, r1
 80047a6:	095b      	lsrs	r3, r3, #5
 80047a8:	2264      	movs	r2, #100	; 0x64
 80047aa:	fb02 f303 	mul.w	r3, r2, r3
 80047ae:	1acb      	subs	r3, r1, r3
 80047b0:	011b      	lsls	r3, r3, #4
 80047b2:	3332      	adds	r3, #50	; 0x32
 80047b4:	4a33      	ldr	r2, [pc, #204]	; (8004884 <UART_SetConfig+0x4e4>)
 80047b6:	fba2 2303 	umull	r2, r3, r2, r3
 80047ba:	095b      	lsrs	r3, r3, #5
 80047bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80047c0:	441c      	add	r4, r3
 80047c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c6:	2200      	movs	r2, #0
 80047c8:	673b      	str	r3, [r7, #112]	; 0x70
 80047ca:	677a      	str	r2, [r7, #116]	; 0x74
 80047cc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80047d0:	4642      	mov	r2, r8
 80047d2:	464b      	mov	r3, r9
 80047d4:	1891      	adds	r1, r2, r2
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	415b      	adcs	r3, r3
 80047da:	60fb      	str	r3, [r7, #12]
 80047dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80047e0:	4641      	mov	r1, r8
 80047e2:	1851      	adds	r1, r2, r1
 80047e4:	6039      	str	r1, [r7, #0]
 80047e6:	4649      	mov	r1, r9
 80047e8:	414b      	adcs	r3, r1
 80047ea:	607b      	str	r3, [r7, #4]
 80047ec:	f04f 0200 	mov.w	r2, #0
 80047f0:	f04f 0300 	mov.w	r3, #0
 80047f4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047f8:	4659      	mov	r1, fp
 80047fa:	00cb      	lsls	r3, r1, #3
 80047fc:	4651      	mov	r1, sl
 80047fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004802:	4651      	mov	r1, sl
 8004804:	00ca      	lsls	r2, r1, #3
 8004806:	4610      	mov	r0, r2
 8004808:	4619      	mov	r1, r3
 800480a:	4603      	mov	r3, r0
 800480c:	4642      	mov	r2, r8
 800480e:	189b      	adds	r3, r3, r2
 8004810:	66bb      	str	r3, [r7, #104]	; 0x68
 8004812:	464b      	mov	r3, r9
 8004814:	460a      	mov	r2, r1
 8004816:	eb42 0303 	adc.w	r3, r2, r3
 800481a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800481c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	663b      	str	r3, [r7, #96]	; 0x60
 8004826:	667a      	str	r2, [r7, #100]	; 0x64
 8004828:	f04f 0200 	mov.w	r2, #0
 800482c:	f04f 0300 	mov.w	r3, #0
 8004830:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004834:	4649      	mov	r1, r9
 8004836:	008b      	lsls	r3, r1, #2
 8004838:	4641      	mov	r1, r8
 800483a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800483e:	4641      	mov	r1, r8
 8004840:	008a      	lsls	r2, r1, #2
 8004842:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004846:	f7fc f9af 	bl	8000ba8 <__aeabi_uldivmod>
 800484a:	4602      	mov	r2, r0
 800484c:	460b      	mov	r3, r1
 800484e:	4b0d      	ldr	r3, [pc, #52]	; (8004884 <UART_SetConfig+0x4e4>)
 8004850:	fba3 1302 	umull	r1, r3, r3, r2
 8004854:	095b      	lsrs	r3, r3, #5
 8004856:	2164      	movs	r1, #100	; 0x64
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	1ad3      	subs	r3, r2, r3
 800485e:	011b      	lsls	r3, r3, #4
 8004860:	3332      	adds	r3, #50	; 0x32
 8004862:	4a08      	ldr	r2, [pc, #32]	; (8004884 <UART_SetConfig+0x4e4>)
 8004864:	fba2 2303 	umull	r2, r3, r2, r3
 8004868:	095b      	lsrs	r3, r3, #5
 800486a:	f003 020f 	and.w	r2, r3, #15
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4422      	add	r2, r4
 8004876:	609a      	str	r2, [r3, #8]
}
 8004878:	bf00      	nop
 800487a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800487e:	46bd      	mov	sp, r7
 8004880:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004884:	51eb851f 	.word	0x51eb851f

08004888 <model_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool model_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_model_activations_map, 1, params)) {
 8004892:	683a      	ldr	r2, [r7, #0]
 8004894:	2101      	movs	r1, #1
 8004896:	482d      	ldr	r0, [pc, #180]	; (800494c <model_configure_activations+0xc4>)
 8004898:	f000 fa92 	bl	8004dc0 <ai_platform_get_activations_map>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d049      	beq.n	8004936 <model_configure_activations+0xae>
    /* Updating activations (byte) offsets */
    
    serving_default_keras_tensor_60_output_array.data = AI_PTR(g_model_activations_map[0] + 244);
 80048a2:	4b2a      	ldr	r3, [pc, #168]	; (800494c <model_configure_activations+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	33f4      	adds	r3, #244	; 0xf4
 80048a8:	4a29      	ldr	r2, [pc, #164]	; (8004950 <model_configure_activations+0xc8>)
 80048aa:	6093      	str	r3, [r2, #8]
    serving_default_keras_tensor_60_output_array.data_start = AI_PTR(g_model_activations_map[0] + 244);
 80048ac:	4b27      	ldr	r3, [pc, #156]	; (800494c <model_configure_activations+0xc4>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	33f4      	adds	r3, #244	; 0xf4
 80048b2:	4a27      	ldr	r2, [pc, #156]	; (8004950 <model_configure_activations+0xc8>)
 80048b4:	60d3      	str	r3, [r2, #12]
    gemm_0_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 80048b6:	4b25      	ldr	r3, [pc, #148]	; (800494c <model_configure_activations+0xc4>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048be:	4a25      	ldr	r2, [pc, #148]	; (8004954 <model_configure_activations+0xcc>)
 80048c0:	6093      	str	r3, [r2, #8]
    gemm_0_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 80048c2:	4b22      	ldr	r3, [pc, #136]	; (800494c <model_configure_activations+0xc4>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048ca:	4a22      	ldr	r2, [pc, #136]	; (8004954 <model_configure_activations+0xcc>)
 80048cc:	60d3      	str	r3, [r2, #12]
    nl_0_nl_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 80048ce:	4b1f      	ldr	r3, [pc, #124]	; (800494c <model_configure_activations+0xc4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048d6:	4a20      	ldr	r2, [pc, #128]	; (8004958 <model_configure_activations+0xd0>)
 80048d8:	6093      	str	r3, [r2, #8]
    nl_0_nl_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 80048da:	4b1c      	ldr	r3, [pc, #112]	; (800494c <model_configure_activations+0xc4>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048e2:	4a1d      	ldr	r2, [pc, #116]	; (8004958 <model_configure_activations+0xd0>)
 80048e4:	60d3      	str	r3, [r2, #12]
    gemm_1_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 80048e6:	4b19      	ldr	r3, [pc, #100]	; (800494c <model_configure_activations+0xc4>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a1c      	ldr	r2, [pc, #112]	; (800495c <model_configure_activations+0xd4>)
 80048ec:	6093      	str	r3, [r2, #8]
    gemm_1_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 80048ee:	4b17      	ldr	r3, [pc, #92]	; (800494c <model_configure_activations+0xc4>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a1a      	ldr	r2, [pc, #104]	; (800495c <model_configure_activations+0xd4>)
 80048f4:	60d3      	str	r3, [r2, #12]
    nl_1_nl_output_array.data = AI_PTR(g_model_activations_map[0] + 256);
 80048f6:	4b15      	ldr	r3, [pc, #84]	; (800494c <model_configure_activations+0xc4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80048fe:	4a18      	ldr	r2, [pc, #96]	; (8004960 <model_configure_activations+0xd8>)
 8004900:	6093      	str	r3, [r2, #8]
    nl_1_nl_output_array.data_start = AI_PTR(g_model_activations_map[0] + 256);
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <model_configure_activations+0xc4>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800490a:	4a15      	ldr	r2, [pc, #84]	; (8004960 <model_configure_activations+0xd8>)
 800490c:	60d3      	str	r3, [r2, #12]
    gemm_2_output_array.data = AI_PTR(g_model_activations_map[0] + 0);
 800490e:	4b0f      	ldr	r3, [pc, #60]	; (800494c <model_configure_activations+0xc4>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a14      	ldr	r2, [pc, #80]	; (8004964 <model_configure_activations+0xdc>)
 8004914:	6093      	str	r3, [r2, #8]
    gemm_2_output_array.data_start = AI_PTR(g_model_activations_map[0] + 0);
 8004916:	4b0d      	ldr	r3, [pc, #52]	; (800494c <model_configure_activations+0xc4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a12      	ldr	r2, [pc, #72]	; (8004964 <model_configure_activations+0xdc>)
 800491c:	60d3      	str	r3, [r2, #12]
    nl_3_output_array.data = AI_PTR(g_model_activations_map[0] + 20);
 800491e:	4b0b      	ldr	r3, [pc, #44]	; (800494c <model_configure_activations+0xc4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	3314      	adds	r3, #20
 8004924:	4a10      	ldr	r2, [pc, #64]	; (8004968 <model_configure_activations+0xe0>)
 8004926:	6093      	str	r3, [r2, #8]
    nl_3_output_array.data_start = AI_PTR(g_model_activations_map[0] + 20);
 8004928:	4b08      	ldr	r3, [pc, #32]	; (800494c <model_configure_activations+0xc4>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3314      	adds	r3, #20
 800492e:	4a0e      	ldr	r2, [pc, #56]	; (8004968 <model_configure_activations+0xe0>)
 8004930:	60d3      	str	r3, [r2, #12]
    return true;
 8004932:	2301      	movs	r3, #1
 8004934:	e005      	b.n	8004942 <model_configure_activations+0xba>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8004936:	2213      	movs	r2, #19
 8004938:	2130      	movs	r1, #48	; 0x30
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fa94 	bl	8004e68 <ai_platform_network_set_error>
  return false;
 8004940:	2300      	movs	r3, #0
}
 8004942:	4618      	mov	r0, r3
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	20000a8c 	.word	0x20000a8c
 8004950:	2000001c 	.word	0x2000001c
 8004954:	2000002c 	.word	0x2000002c
 8004958:	2000003c 	.word	0x2000003c
 800495c:	2000004c 	.word	0x2000004c
 8004960:	2000005c 	.word	0x2000005c
 8004964:	2000006c 	.word	0x2000006c
 8004968:	2000007c 	.word	0x2000007c

0800496c <model_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool model_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_model_weights_map, 1, params)) {
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	2101      	movs	r1, #1
 800497a:	483d      	ldr	r0, [pc, #244]	; (8004a70 <model_configure_weights+0x104>)
 800497c:	f000 f9cc 	bl	8004d18 <ai_platform_get_weights_map>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d069      	beq.n	8004a5a <model_configure_weights+0xee>
    /* Updating weights (byte) offsets */
    
    gemm_0_weights_array.format |= AI_FMT_FLAG_CONST;
 8004986:	4b3b      	ldr	r3, [pc, #236]	; (8004a74 <model_configure_weights+0x108>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800498e:	4a39      	ldr	r2, [pc, #228]	; (8004a74 <model_configure_weights+0x108>)
 8004990:	6013      	str	r3, [r2, #0]
    gemm_0_weights_array.data = AI_PTR(g_model_weights_map[0] + 0);
 8004992:	4b37      	ldr	r3, [pc, #220]	; (8004a70 <model_configure_weights+0x104>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a37      	ldr	r2, [pc, #220]	; (8004a74 <model_configure_weights+0x108>)
 8004998:	6093      	str	r3, [r2, #8]
    gemm_0_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 0);
 800499a:	4b35      	ldr	r3, [pc, #212]	; (8004a70 <model_configure_weights+0x104>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a35      	ldr	r2, [pc, #212]	; (8004a74 <model_configure_weights+0x108>)
 80049a0:	60d3      	str	r3, [r2, #12]
    gemm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 80049a2:	4b35      	ldr	r3, [pc, #212]	; (8004a78 <model_configure_weights+0x10c>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049aa:	4a33      	ldr	r2, [pc, #204]	; (8004a78 <model_configure_weights+0x10c>)
 80049ac:	6013      	str	r3, [r2, #0]
    gemm_0_bias_array.data = AI_PTR(g_model_weights_map[0] + 1536);
 80049ae:	4b30      	ldr	r3, [pc, #192]	; (8004a70 <model_configure_weights+0x104>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80049b6:	4a30      	ldr	r2, [pc, #192]	; (8004a78 <model_configure_weights+0x10c>)
 80049b8:	6093      	str	r3, [r2, #8]
    gemm_0_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 1536);
 80049ba:	4b2d      	ldr	r3, [pc, #180]	; (8004a70 <model_configure_weights+0x104>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80049c2:	4a2d      	ldr	r2, [pc, #180]	; (8004a78 <model_configure_weights+0x10c>)
 80049c4:	60d3      	str	r3, [r2, #12]
    gemm_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80049c6:	4b2d      	ldr	r3, [pc, #180]	; (8004a7c <model_configure_weights+0x110>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049ce:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <model_configure_weights+0x110>)
 80049d0:	6013      	str	r3, [r2, #0]
    gemm_1_weights_array.data = AI_PTR(g_model_weights_map[0] + 2048);
 80049d2:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <model_configure_weights+0x104>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049da:	4a28      	ldr	r2, [pc, #160]	; (8004a7c <model_configure_weights+0x110>)
 80049dc:	6093      	str	r3, [r2, #8]
    gemm_1_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 2048);
 80049de:	4b24      	ldr	r3, [pc, #144]	; (8004a70 <model_configure_weights+0x104>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <model_configure_weights+0x110>)
 80049e8:	60d3      	str	r3, [r2, #12]
    gemm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80049ea:	4b25      	ldr	r3, [pc, #148]	; (8004a80 <model_configure_weights+0x114>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049f2:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <model_configure_weights+0x114>)
 80049f4:	6013      	str	r3, [r2, #0]
    gemm_1_bias_array.data = AI_PTR(g_model_weights_map[0] + 34816);
 80049f6:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <model_configure_weights+0x104>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 80049fe:	4a20      	ldr	r2, [pc, #128]	; (8004a80 <model_configure_weights+0x114>)
 8004a00:	6093      	str	r3, [r2, #8]
    gemm_1_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 34816);
 8004a02:	4b1b      	ldr	r3, [pc, #108]	; (8004a70 <model_configure_weights+0x104>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f503 4308 	add.w	r3, r3, #34816	; 0x8800
 8004a0a:	4a1d      	ldr	r2, [pc, #116]	; (8004a80 <model_configure_weights+0x114>)
 8004a0c:	60d3      	str	r3, [r2, #12]
    gemm_2_weights_array.format |= AI_FMT_FLAG_CONST;
 8004a0e:	4b1d      	ldr	r3, [pc, #116]	; (8004a84 <model_configure_weights+0x118>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a16:	4a1b      	ldr	r2, [pc, #108]	; (8004a84 <model_configure_weights+0x118>)
 8004a18:	6013      	str	r3, [r2, #0]
    gemm_2_weights_array.data = AI_PTR(g_model_weights_map[0] + 35072);
 8004a1a:	4b15      	ldr	r3, [pc, #84]	; (8004a70 <model_configure_weights+0x104>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f503 4309 	add.w	r3, r3, #35072	; 0x8900
 8004a22:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <model_configure_weights+0x118>)
 8004a24:	6093      	str	r3, [r2, #8]
    gemm_2_weights_array.data_start = AI_PTR(g_model_weights_map[0] + 35072);
 8004a26:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <model_configure_weights+0x104>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f503 4309 	add.w	r3, r3, #35072	; 0x8900
 8004a2e:	4a15      	ldr	r2, [pc, #84]	; (8004a84 <model_configure_weights+0x118>)
 8004a30:	60d3      	str	r3, [r2, #12]
    gemm_2_bias_array.format |= AI_FMT_FLAG_CONST;
 8004a32:	4b15      	ldr	r3, [pc, #84]	; (8004a88 <model_configure_weights+0x11c>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004a3a:	4a13      	ldr	r2, [pc, #76]	; (8004a88 <model_configure_weights+0x11c>)
 8004a3c:	6013      	str	r3, [r2, #0]
    gemm_2_bias_array.data = AI_PTR(g_model_weights_map[0] + 36352);
 8004a3e:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <model_configure_weights+0x104>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8004a46:	4a10      	ldr	r2, [pc, #64]	; (8004a88 <model_configure_weights+0x11c>)
 8004a48:	6093      	str	r3, [r2, #8]
    gemm_2_bias_array.data_start = AI_PTR(g_model_weights_map[0] + 36352);
 8004a4a:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <model_configure_weights+0x104>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f503 430e 	add.w	r3, r3, #36352	; 0x8e00
 8004a52:	4a0d      	ldr	r2, [pc, #52]	; (8004a88 <model_configure_weights+0x11c>)
 8004a54:	60d3      	str	r3, [r2, #12]
    return true;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e005      	b.n	8004a66 <model_configure_weights+0xfa>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004a5a:	2212      	movs	r2, #18
 8004a5c:	2130      	movs	r1, #48	; 0x30
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa02 	bl	8004e68 <ai_platform_network_set_error>
  return false;
 8004a64:	2300      	movs	r3, #0
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000a90 	.word	0x20000a90
 8004a74:	2000008c 	.word	0x2000008c
 8004a78:	2000009c 	.word	0x2000009c
 8004a7c:	200000ac 	.word	0x200000ac
 8004a80:	200000bc 	.word	0x200000bc
 8004a84:	200000cc 	.word	0x200000cc
 8004a88:	200000dc 	.word	0x200000dc

08004a8c <ai_model_create>:


AI_API_ENTRY
ai_error ai_model_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af02      	add	r7, sp, #8
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8004a96:	2300      	movs	r3, #0
 8004a98:	9301      	str	r3, [sp, #4]
 8004a9a:	2305      	movs	r3, #5
 8004a9c:	9300      	str	r3, [sp, #0]
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4a04      	ldr	r2, [pc, #16]	; (8004ab4 <ai_model_create+0x28>)
 8004aa2:	6839      	ldr	r1, [r7, #0]
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 facf 	bl	8005048 <ai_platform_network_create>
 8004aaa:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3708      	adds	r7, #8
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200006a4 	.word	0x200006a4

08004ab8 <ai_model_inputs_get>:
}


AI_API_ENTRY
ai_buffer* ai_model_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d104      	bne.n	8004ad2 <ai_model_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004ac8:	4b06      	ldr	r3, [pc, #24]	; (8004ae4 <ai_model_inputs_get+0x2c>)
 8004aca:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	4a06      	ldr	r2, [pc, #24]	; (8004ae8 <ai_model_inputs_get+0x30>)
 8004ad0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8004ad2:	6839      	ldr	r1, [r7, #0]
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f9cd 	bl	8004e74 <ai_platform_inputs_get>
 8004ada:	4603      	mov	r3, r0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	200006a4 	.word	0x200006a4
 8004ae8:	a1c00100 	.word	0xa1c00100

08004aec <ai_model_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_model_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
 8004af4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d104      	bne.n	8004b06 <ai_model_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8004afc:	4b06      	ldr	r3, [pc, #24]	; (8004b18 <ai_model_outputs_get+0x2c>)
 8004afe:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	4a06      	ldr	r2, [pc, #24]	; (8004b1c <ai_model_outputs_get+0x30>)
 8004b04:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8004b06:	6839      	ldr	r1, [r7, #0]
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fa29 	bl	8004f60 <ai_platform_outputs_get>
 8004b0e:	4603      	mov	r3, r0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3708      	adds	r7, #8
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	200006a4 	.word	0x200006a4
 8004b1c:	a1c00100 	.word	0xa1c00100

08004b20 <ai_model_init>:


AI_API_ENTRY
ai_bool ai_model_init(
  ai_handle network, const ai_network_params* params)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8004b2a:	6839      	ldr	r1, [r7, #0]
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 facd 	bl	80050cc <ai_platform_network_init>
 8004b32:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8004b34:	2301      	movs	r3, #1
 8004b36:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d101      	bne.n	8004b42 <ai_model_init+0x22>
 8004b3e:	2300      	movs	r3, #0
 8004b40:	e026      	b.n	8004b90 <ai_model_init+0x70>
  ok &= model_configure_weights(net_ctx, params);
 8004b42:	6839      	ldr	r1, [r7, #0]
 8004b44:	68f8      	ldr	r0, [r7, #12]
 8004b46:	f7ff ff11 	bl	800496c <model_configure_weights>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	7afb      	ldrb	r3, [r7, #11]
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	bf14      	ite	ne
 8004b56:	2301      	movne	r3, #1
 8004b58:	2300      	moveq	r3, #0
 8004b5a:	72fb      	strb	r3, [r7, #11]
  ok &= model_configure_activations(net_ctx, params);
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f7ff fe92 	bl	8004888 <model_configure_activations>
 8004b64:	4603      	mov	r3, r0
 8004b66:	461a      	mov	r2, r3
 8004b68:	7afb      	ldrb	r3, [r7, #11]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf14      	ite	ne
 8004b70:	2301      	movne	r3, #1
 8004b72:	2300      	moveq	r3, #0
 8004b74:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fb76 	bl	8005268 <ai_platform_network_post_init>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	461a      	mov	r2, r3
 8004b80:	7afb      	ldrb	r3, [r7, #11]
 8004b82:	4013      	ands	r3, r2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	bf14      	ite	ne
 8004b88:	2301      	movne	r3, #1
 8004b8a:	2300      	moveq	r3, #0
 8004b8c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8004b8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004b90:	4618      	mov	r0, r3
 8004b92:	3710      	adds	r7, #16
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <ai_model_run>:


AI_API_ENTRY
ai_i32 ai_model_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fb8d 	bl	80052c8 <ai_platform_network_process>
 8004bae:	4603      	mov	r3, r0
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}

08004bb8 <ai_model_data_activations_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_model_data_activations_buffer_get(const ai_handle ptr)
{
 8004bb8:	b4b0      	push	{r4, r5, r7}
 8004bba:	b08f      	sub	sp, #60	; 0x3c
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <ai_model_data_activations_buffer_get+0x60>)
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	623b      	str	r3, [r7, #32]
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8004bce:	2300      	movs	r3, #0
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bd2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bd8:	2301      	movs	r3, #1
 8004bda:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	2204      	movs	r2, #4
 8004be2:	f362 231f 	bfi	r3, r2, #8, #24
 8004be6:	633b      	str	r3, [r7, #48]	; 0x30
 8004be8:	4b0c      	ldr	r3, [pc, #48]	; (8004c1c <ai_model_data_activations_buffer_get+0x64>)
 8004bea:	f107 040c 	add.w	r4, r7, #12
 8004bee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004bf0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004bf4:	f107 030c 	add.w	r3, r7, #12
 8004bf8:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_MODEL_DATA_ACTIVATIONS_SIZE, 1, AI_MODEL_DATA_ACTIVATIONS_COUNT),
    AI_MODEL_DATA_ACTIVATIONS_SIZE,
    NULL, ptr);
  return buf;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	461d      	mov	r5, r3
 8004bfe:	f107 041c 	add.w	r4, r7, #28
 8004c02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c06:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004c0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	373c      	adds	r7, #60	; 0x3c
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bcb0      	pop	{r4, r5, r7}
 8004c16:	4770      	bx	lr
 8004c18:	00040440 	.word	0x00040440
 8004c1c:	080096f0 	.word	0x080096f0

08004c20 <ai_model_data_weights_buffer_get>:
 * @return an ai_buffer initialized struct
 */
AI_DEPRECATED
AI_API_ENTRY
ai_buffer ai_model_data_weights_buffer_get(const ai_handle ptr)
{
 8004c20:	b4b0      	push	{r4, r5, r7}
 8004c22:	b08f      	sub	sp, #60	; 0x3c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  ai_buffer buf = AI_BUFFER_INIT(
 8004c2a:	4b15      	ldr	r3, [pc, #84]	; (8004c80 <ai_model_data_weights_buffer_get+0x60>)
 8004c2c:	61fb      	str	r3, [r7, #28]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	623b      	str	r3, [r7, #32]
 8004c32:	2300      	movs	r3, #0
 8004c34:	627b      	str	r3, [r7, #36]	; 0x24
 8004c36:	2300      	movs	r3, #0
 8004c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c3a:	f648 6314 	movw	r3, #36372	; 0x8e14
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2204      	movs	r2, #4
 8004c4a:	f362 231f 	bfi	r3, r2, #8, #24
 8004c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8004c50:	4b0c      	ldr	r3, [pc, #48]	; (8004c84 <ai_model_data_weights_buffer_get+0x64>)
 8004c52:	f107 040c 	add.w	r4, r7, #12
 8004c56:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004c58:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004c5c:	f107 030c 	add.w	r3, r7, #12
 8004c60:	637b      	str	r3, [r7, #52]	; 0x34
    AI_FLAG_NONE, AI_BUFFER_FORMAT_U8|AI_BUFFER_FMT_FLAG_CONST,
    AI_BUFFER_SHAPE_INIT(AI_SHAPE_BCWH, 4, 1, AI_MODEL_DATA_WEIGHTS_SIZE, 1, AI_MODEL_DATA_WEIGHTS_COUNT),
    AI_MODEL_DATA_WEIGHTS_SIZE,
    NULL, ptr);
  return buf;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	461d      	mov	r5, r3
 8004c66:	f107 041c 	add.w	r4, r7, #28
 8004c6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004c6e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004c72:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	373c      	adds	r7, #60	; 0x3c
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bcb0      	pop	{r4, r5, r7}
 8004c7e:	4770      	bx	lr
 8004c80:	40040440 	.word	0x40040440
 8004c84:	08009700 	.word	0x08009700

08004c88 <ai_model_data_weights_get>:
 * @return a ai_handle pointer to the weights array
 */
AI_DEPRECATED
AI_API_ENTRY
ai_handle ai_model_data_weights_get(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  return AI_HANDLE_PTR(g_model_weights_table);
 8004c8c:	4b02      	ldr	r3, [pc, #8]	; (8004c98 <ai_model_data_weights_get+0x10>)

}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	20000748 	.word	0x20000748

08004c9c <ai_buffer_get_size>:
 8004c9c:	b378      	cbz	r0, 8004cfe <ai_buffer_get_size+0x62>
 8004c9e:	b410      	push	{r4}
 8004ca0:	6803      	ldr	r3, [r0, #0]
 8004ca2:	4a17      	ldr	r2, [pc, #92]	; (8004d00 <ai_buffer_get_size+0x64>)
 8004ca4:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8004ca8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d01e      	beq.n	8004cee <ai_buffer_get_size+0x52>
 8004cb0:	6984      	ldr	r4, [r0, #24]
 8004cb2:	6862      	ldr	r2, [r4, #4]
 8004cb4:	7d03      	ldrb	r3, [r0, #20]
 8004cb6:	6941      	ldr	r1, [r0, #20]
 8004cb8:	f1a3 0301 	sub.w	r3, r3, #1
 8004cbc:	fab3 f383 	clz	r3, r3
 8004cc0:	095b      	lsrs	r3, r3, #5
 8004cc2:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004cc6:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8004cca:	da0b      	bge.n	8004ce4 <ai_buffer_get_size+0x48>
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d102      	bne.n	8004cd6 <ai_buffer_get_size+0x3a>
 8004cd0:	2802      	cmp	r0, #2
 8004cd2:	d007      	beq.n	8004ce4 <ai_buffer_get_size+0x48>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004cda:	3301      	adds	r3, #1
 8004cdc:	4298      	cmp	r0, r3
 8004cde:	fb01 f202 	mul.w	r2, r1, r2
 8004ce2:	d1f3      	bne.n	8004ccc <ai_buffer_get_size+0x30>
 8004ce4:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8004ce8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	d0de      	beq.n	8004cb0 <ai_buffer_get_size+0x14>
 8004cf2:	6984      	ldr	r4, [r0, #24]
 8004cf4:	6862      	ldr	r2, [r4, #4]
 8004cf6:	321f      	adds	r2, #31
 8004cf8:	f022 021f 	bic.w	r2, r2, #31
 8004cfc:	e7da      	b.n	8004cb4 <ai_buffer_get_size+0x18>
 8004cfe:	4770      	bx	lr
 8004d00:	000400c0 	.word	0x000400c0

08004d04 <ai_buffer_array_sane>:
 8004d04:	b138      	cbz	r0, 8004d16 <ai_buffer_array_sane+0x12>
 8004d06:	6843      	ldr	r3, [r0, #4]
 8004d08:	b123      	cbz	r3, 8004d14 <ai_buffer_array_sane+0x10>
 8004d0a:	8840      	ldrh	r0, [r0, #2]
 8004d0c:	3800      	subs	r0, #0
 8004d0e:	bf18      	it	ne
 8004d10:	2001      	movne	r0, #1
 8004d12:	4770      	bx	lr
 8004d14:	4618      	mov	r0, r3
 8004d16:	4770      	bx	lr

08004d18 <ai_platform_get_weights_map>:
 8004d18:	2a00      	cmp	r2, #0
 8004d1a:	d037      	beq.n	8004d8c <ai_platform_get_weights_map+0x74>
 8004d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d1e:	4604      	mov	r4, r0
 8004d20:	b1a0      	cbz	r0, 8004d4c <ai_platform_get_weights_map+0x34>
 8004d22:	460f      	mov	r7, r1
 8004d24:	b191      	cbz	r1, 8004d4c <ai_platform_get_weights_map+0x34>
 8004d26:	4b25      	ldr	r3, [pc, #148]	; (8004dbc <ai_platform_get_weights_map+0xa4>)
 8004d28:	6810      	ldr	r0, [r2, #0]
 8004d2a:	4298      	cmp	r0, r3
 8004d2c:	4615      	mov	r5, r2
 8004d2e:	d00f      	beq.n	8004d50 <ai_platform_get_weights_map+0x38>
 8004d30:	6855      	ldr	r5, [r2, #4]
 8004d32:	b15d      	cbz	r5, 8004d4c <ai_platform_get_weights_map+0x34>
 8004d34:	682e      	ldr	r6, [r5, #0]
 8004d36:	429e      	cmp	r6, r3
 8004d38:	d02a      	beq.n	8004d90 <ai_platform_get_weights_map+0x78>
 8004d3a:	f1a1 0001 	sub.w	r0, r1, #1
 8004d3e:	6025      	str	r5, [r4, #0]
 8004d40:	fab0 f080 	clz	r0, r0
 8004d44:	0940      	lsrs	r0, r0, #5
 8004d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d48:	42a7      	cmp	r7, r4
 8004d4a:	d034      	beq.n	8004db6 <ai_platform_get_weights_map+0x9e>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d50:	1d10      	adds	r0, r2, #4
 8004d52:	f7ff ffd7 	bl	8004d04 <ai_buffer_array_sane>
 8004d56:	2800      	cmp	r0, #0
 8004d58:	d0f8      	beq.n	8004d4c <ai_platform_get_weights_map+0x34>
 8004d5a:	88eb      	ldrh	r3, [r5, #6]
 8004d5c:	429f      	cmp	r7, r3
 8004d5e:	d1f5      	bne.n	8004d4c <ai_platform_get_weights_map+0x34>
 8004d60:	f04f 0c00 	mov.w	ip, #0
 8004d64:	1f20      	subs	r0, r4, #4
 8004d66:	46e6      	mov	lr, ip
 8004d68:	68ab      	ldr	r3, [r5, #8]
 8004d6a:	4463      	add	r3, ip
 8004d6c:	f10c 0c1c 	add.w	ip, ip, #28
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	b12b      	cbz	r3, 8004d80 <ai_platform_get_weights_map+0x68>
 8004d74:	f10e 0e01 	add.w	lr, lr, #1
 8004d78:	4577      	cmp	r7, lr
 8004d7a:	f840 3f04 	str.w	r3, [r0, #4]!
 8004d7e:	d1f3      	bne.n	8004d68 <ai_platform_get_weights_map+0x50>
 8004d80:	eba7 000e 	sub.w	r0, r7, lr
 8004d84:	fab0 f080 	clz	r0, r0
 8004d88:	0940      	lsrs	r0, r0, #5
 8004d8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	4770      	bx	lr
 8004d90:	1f20      	subs	r0, r4, #4
 8004d92:	462a      	mov	r2, r5
 8004d94:	2400      	movs	r4, #0
 8004d96:	e000      	b.n	8004d9a <ai_platform_get_weights_map+0x82>
 8004d98:	461c      	mov	r4, r3
 8004d9a:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004d9e:	42b3      	cmp	r3, r6
 8004da0:	d0d2      	beq.n	8004d48 <ai_platform_get_weights_map+0x30>
 8004da2:	f840 3f04 	str.w	r3, [r0, #4]!
 8004da6:	1c63      	adds	r3, r4, #1
 8004da8:	429f      	cmp	r7, r3
 8004daa:	d1f5      	bne.n	8004d98 <ai_platform_get_weights_map+0x80>
 8004dac:	3402      	adds	r4, #2
 8004dae:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004db2:	42b3      	cmp	r3, r6
 8004db4:	d1ca      	bne.n	8004d4c <ai_platform_get_weights_map+0x34>
 8004db6:	2001      	movs	r0, #1
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004dba:	bf00      	nop
 8004dbc:	a1facade 	.word	0xa1facade

08004dc0 <ai_platform_get_activations_map>:
 8004dc0:	2a00      	cmp	r2, #0
 8004dc2:	d038      	beq.n	8004e36 <ai_platform_get_activations_map+0x76>
 8004dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	b1a0      	cbz	r0, 8004df4 <ai_platform_get_activations_map+0x34>
 8004dca:	460f      	mov	r7, r1
 8004dcc:	b191      	cbz	r1, 8004df4 <ai_platform_get_activations_map+0x34>
 8004dce:	4b25      	ldr	r3, [pc, #148]	; (8004e64 <ai_platform_get_activations_map+0xa4>)
 8004dd0:	6810      	ldr	r0, [r2, #0]
 8004dd2:	4298      	cmp	r0, r3
 8004dd4:	4615      	mov	r5, r2
 8004dd6:	d00f      	beq.n	8004df8 <ai_platform_get_activations_map+0x38>
 8004dd8:	6a15      	ldr	r5, [r2, #32]
 8004dda:	b15d      	cbz	r5, 8004df4 <ai_platform_get_activations_map+0x34>
 8004ddc:	682e      	ldr	r6, [r5, #0]
 8004dde:	429e      	cmp	r6, r3
 8004de0:	d02b      	beq.n	8004e3a <ai_platform_get_activations_map+0x7a>
 8004de2:	f1a1 0001 	sub.w	r0, r1, #1
 8004de6:	6025      	str	r5, [r4, #0]
 8004de8:	fab0 f080 	clz	r0, r0
 8004dec:	0940      	lsrs	r0, r0, #5
 8004dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df0:	42a7      	cmp	r7, r4
 8004df2:	d035      	beq.n	8004e60 <ai_platform_get_activations_map+0xa0>
 8004df4:	2000      	movs	r0, #0
 8004df6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004df8:	f102 000c 	add.w	r0, r2, #12
 8004dfc:	f7ff ff82 	bl	8004d04 <ai_buffer_array_sane>
 8004e00:	2800      	cmp	r0, #0
 8004e02:	d0f7      	beq.n	8004df4 <ai_platform_get_activations_map+0x34>
 8004e04:	89eb      	ldrh	r3, [r5, #14]
 8004e06:	429f      	cmp	r7, r3
 8004e08:	d1f4      	bne.n	8004df4 <ai_platform_get_activations_map+0x34>
 8004e0a:	f04f 0c00 	mov.w	ip, #0
 8004e0e:	1f20      	subs	r0, r4, #4
 8004e10:	46e6      	mov	lr, ip
 8004e12:	692b      	ldr	r3, [r5, #16]
 8004e14:	4463      	add	r3, ip
 8004e16:	f10c 0c1c 	add.w	ip, ip, #28
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	b12b      	cbz	r3, 8004e2a <ai_platform_get_activations_map+0x6a>
 8004e1e:	f10e 0e01 	add.w	lr, lr, #1
 8004e22:	4577      	cmp	r7, lr
 8004e24:	f840 3f04 	str.w	r3, [r0, #4]!
 8004e28:	d1f3      	bne.n	8004e12 <ai_platform_get_activations_map+0x52>
 8004e2a:	eba7 000e 	sub.w	r0, r7, lr
 8004e2e:	fab0 f080 	clz	r0, r0
 8004e32:	0940      	lsrs	r0, r0, #5
 8004e34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e36:	2000      	movs	r0, #0
 8004e38:	4770      	bx	lr
 8004e3a:	1f20      	subs	r0, r4, #4
 8004e3c:	462a      	mov	r2, r5
 8004e3e:	2400      	movs	r4, #0
 8004e40:	e000      	b.n	8004e44 <ai_platform_get_activations_map+0x84>
 8004e42:	461c      	mov	r4, r3
 8004e44:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004e48:	42b3      	cmp	r3, r6
 8004e4a:	d0d1      	beq.n	8004df0 <ai_platform_get_activations_map+0x30>
 8004e4c:	f840 3f04 	str.w	r3, [r0, #4]!
 8004e50:	1c63      	adds	r3, r4, #1
 8004e52:	429f      	cmp	r7, r3
 8004e54:	d1f5      	bne.n	8004e42 <ai_platform_get_activations_map+0x82>
 8004e56:	3402      	adds	r4, #2
 8004e58:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8004e5c:	42b3      	cmp	r3, r6
 8004e5e:	d1c9      	bne.n	8004df4 <ai_platform_get_activations_map+0x34>
 8004e60:	2001      	movs	r0, #1
 8004e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e64:	a1facade 	.word	0xa1facade

08004e68 <ai_platform_network_set_error>:
 8004e68:	b110      	cbz	r0, 8004e70 <ai_platform_network_set_error+0x8>
 8004e6a:	300c      	adds	r0, #12
 8004e6c:	f000 bc6e 	b.w	800574c <core_set_error>
 8004e70:	4770      	bx	lr
 8004e72:	bf00      	nop

08004e74 <ai_platform_inputs_get>:
 8004e74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e78:	4b38      	ldr	r3, [pc, #224]	; (8004f5c <ai_platform_inputs_get+0xe8>)
 8004e7a:	6802      	ldr	r2, [r0, #0]
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	4393      	bics	r3, r2
 8004e80:	9003      	str	r0, [sp, #12]
 8004e82:	9102      	str	r1, [sp, #8]
 8004e84:	d160      	bne.n	8004f48 <ai_platform_inputs_get+0xd4>
 8004e86:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d04f      	beq.n	8004f2c <ai_platform_inputs_get+0xb8>
 8004e8c:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8004e90:	f1ba 0f00 	cmp.w	sl, #0
 8004e94:	d04a      	beq.n	8004f2c <ai_platform_inputs_get+0xb8>
 8004e96:	f04f 0b00 	mov.w	fp, #0
 8004e9a:	465d      	mov	r5, fp
 8004e9c:	e016      	b.n	8004ecc <ai_platform_inputs_get+0x58>
 8004e9e:	9901      	ldr	r1, [sp, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	507a      	str	r2, [r7, r1]
 8004ea4:	69b1      	ldr	r1, [r6, #24]
 8004ea6:	684e      	ldr	r6, [r1, #4]
 8004ea8:	60a3      	str	r3, [r4, #8]
 8004eaa:	f04f 0201 	mov.w	r2, #1
 8004eae:	7522      	strb	r2, [r4, #20]
 8004eb0:	6961      	ldr	r1, [r4, #20]
 8004eb2:	6020      	str	r0, [r4, #0]
 8004eb4:	f369 211f 	bfi	r1, r9, #8, #24
 8004eb8:	2300      	movs	r3, #0
 8004eba:	e9c4 3603 	strd	r3, r6, [r4, #12]
 8004ebe:	e9c4 1805 	strd	r1, r8, [r4, #20]
 8004ec2:	f8c4 c004 	str.w	ip, [r4, #4]
 8004ec6:	3501      	adds	r5, #1
 8004ec8:	f10b 0b1c 	add.w	fp, fp, #28
 8004ecc:	f8ba 3000 	ldrh.w	r3, [sl]
 8004ed0:	42ab      	cmp	r3, r5
 8004ed2:	b2aa      	uxth	r2, r5
 8004ed4:	d93c      	bls.n	8004f50 <ai_platform_inputs_get+0xdc>
 8004ed6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8004eda:	00e9      	lsls	r1, r5, #3
 8004edc:	9101      	str	r1, [sp, #4]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d036      	beq.n	8004f50 <ai_platform_inputs_get+0xdc>
 8004ee2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004ee6:	2e00      	cmp	r6, #0
 8004ee8:	d032      	beq.n	8004f50 <ai_platform_inputs_get+0xdc>
 8004eea:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004eee:	69b2      	ldr	r2, [r6, #24]
 8004ef0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8004ef4:	6810      	ldr	r0, [r2, #0]
 8004ef6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004efa:	68b3      	ldr	r3, [r6, #8]
 8004efc:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004f00:	f001 fb1a 	bl	8006538 <ai_array_to_buffer_fmt>
 8004f04:	69b1      	ldr	r1, [r6, #24]
 8004f06:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004f0a:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8004f0e:	445c      	add	r4, fp
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d0c8      	beq.n	8004ea6 <ai_platform_inputs_get+0x32>
 8004f14:	2100      	movs	r1, #0
 8004f16:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8004f1a:	6831      	ldr	r1, [r6, #0]
 8004f1c:	6059      	str	r1, [r3, #4]
 8004f1e:	b111      	cbz	r1, 8004f26 <ai_platform_inputs_get+0xb2>
 8004f20:	8849      	ldrh	r1, [r1, #2]
 8004f22:	2900      	cmp	r1, #0
 8004f24:	d1bb      	bne.n	8004e9e <ai_platform_inputs_get+0x2a>
 8004f26:	69b1      	ldr	r1, [r6, #24]
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e7bc      	b.n	8004ea6 <ai_platform_inputs_get+0x32>
 8004f2c:	9803      	ldr	r0, [sp, #12]
 8004f2e:	2218      	movs	r2, #24
 8004f30:	2111      	movs	r1, #17
 8004f32:	300c      	adds	r0, #12
 8004f34:	f000 fc0a 	bl	800574c <core_set_error>
 8004f38:	2200      	movs	r2, #0
 8004f3a:	4610      	mov	r0, r2
 8004f3c:	9b02      	ldr	r3, [sp, #8]
 8004f3e:	b103      	cbz	r3, 8004f42 <ai_platform_inputs_get+0xce>
 8004f40:	801a      	strh	r2, [r3, #0]
 8004f42:	b005      	add	sp, #20
 8004f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f48:	2000      	movs	r0, #0
 8004f4a:	b005      	add	sp, #20
 8004f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f50:	2a00      	cmp	r2, #0
 8004f52:	d0eb      	beq.n	8004f2c <ai_platform_inputs_get+0xb8>
 8004f54:	f8da 3008 	ldr.w	r3, [sl, #8]
 8004f58:	6858      	ldr	r0, [r3, #4]
 8004f5a:	e7ef      	b.n	8004f3c <ai_platform_inputs_get+0xc8>
 8004f5c:	a1c00100 	.word	0xa1c00100

08004f60 <ai_platform_outputs_get>:
 8004f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f64:	4b37      	ldr	r3, [pc, #220]	; (8005044 <ai_platform_outputs_get+0xe4>)
 8004f66:	6802      	ldr	r2, [r0, #0]
 8004f68:	b085      	sub	sp, #20
 8004f6a:	4393      	bics	r3, r2
 8004f6c:	9003      	str	r0, [sp, #12]
 8004f6e:	9102      	str	r1, [sp, #8]
 8004f70:	d15d      	bne.n	800502e <ai_platform_outputs_get+0xce>
 8004f72:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8004f74:	2b01      	cmp	r3, #1
 8004f76:	d94c      	bls.n	8005012 <ai_platform_outputs_get+0xb2>
 8004f78:	f04f 0b00 	mov.w	fp, #0
 8004f7c:	f8d0 a034 	ldr.w	sl, [r0, #52]	; 0x34
 8004f80:	465d      	mov	r5, fp
 8004f82:	46d8      	mov	r8, fp
 8004f84:	e016      	b.n	8004fb4 <ai_platform_outputs_get+0x54>
 8004f86:	9a01      	ldr	r2, [sp, #4]
 8004f88:	2101      	movs	r1, #1
 8004f8a:	50b9      	str	r1, [r7, r2]
 8004f8c:	69b2      	ldr	r2, [r6, #24]
 8004f8e:	6856      	ldr	r6, [r2, #4]
 8004f90:	6020      	str	r0, [r4, #0]
 8004f92:	f04f 0201 	mov.w	r2, #1
 8004f96:	7522      	strb	r2, [r4, #20]
 8004f98:	6960      	ldr	r0, [r4, #20]
 8004f9a:	f8c4 c004 	str.w	ip, [r4, #4]
 8004f9e:	f369 201f 	bfi	r0, r9, #8, #24
 8004fa2:	e9c4 6004 	strd	r6, r0, [r4, #16]
 8004fa6:	e9c4 3802 	strd	r3, r8, [r4, #8]
 8004faa:	9b00      	ldr	r3, [sp, #0]
 8004fac:	61a3      	str	r3, [r4, #24]
 8004fae:	3501      	adds	r5, #1
 8004fb0:	f10b 0b1c 	add.w	fp, fp, #28
 8004fb4:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8004fb8:	42ab      	cmp	r3, r5
 8004fba:	b2aa      	uxth	r2, r5
 8004fbc:	d93b      	bls.n	8005036 <ai_platform_outputs_get+0xd6>
 8004fbe:	f8da 3010 	ldr.w	r3, [sl, #16]
 8004fc2:	00e9      	lsls	r1, r5, #3
 8004fc4:	9101      	str	r1, [sp, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d035      	beq.n	8005036 <ai_platform_outputs_get+0xd6>
 8004fca:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8004fce:	2e00      	cmp	r6, #0
 8004fd0:	d031      	beq.n	8005036 <ai_platform_outputs_get+0xd6>
 8004fd2:	f8da 3014 	ldr.w	r3, [sl, #20]
 8004fd6:	69b2      	ldr	r2, [r6, #24]
 8004fd8:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8004fdc:	68b3      	ldr	r3, [r6, #8]
 8004fde:	6810      	ldr	r0, [r2, #0]
 8004fe0:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8004fe4:	68f3      	ldr	r3, [r6, #12]
 8004fe6:	9300      	str	r3, [sp, #0]
 8004fe8:	f001 faa6 	bl	8006538 <ai_array_to_buffer_fmt>
 8004fec:	69b2      	ldr	r2, [r6, #24]
 8004fee:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8004ff2:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8004ff6:	445c      	add	r4, fp
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d0c8      	beq.n	8004f8e <ai_platform_outputs_get+0x2e>
 8004ffc:	f847 8035 	str.w	r8, [r7, r5, lsl #3]
 8005000:	6832      	ldr	r2, [r6, #0]
 8005002:	605a      	str	r2, [r3, #4]
 8005004:	b112      	cbz	r2, 800500c <ai_platform_outputs_get+0xac>
 8005006:	8852      	ldrh	r2, [r2, #2]
 8005008:	2a00      	cmp	r2, #0
 800500a:	d1bc      	bne.n	8004f86 <ai_platform_outputs_get+0x26>
 800500c:	69b2      	ldr	r2, [r6, #24]
 800500e:	2300      	movs	r3, #0
 8005010:	e7bd      	b.n	8004f8e <ai_platform_outputs_get+0x2e>
 8005012:	9803      	ldr	r0, [sp, #12]
 8005014:	2218      	movs	r2, #24
 8005016:	2111      	movs	r1, #17
 8005018:	300c      	adds	r0, #12
 800501a:	f000 fb97 	bl	800574c <core_set_error>
 800501e:	2200      	movs	r2, #0
 8005020:	4610      	mov	r0, r2
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	b103      	cbz	r3, 8005028 <ai_platform_outputs_get+0xc8>
 8005026:	801a      	strh	r2, [r3, #0]
 8005028:	b005      	add	sp, #20
 800502a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502e:	2000      	movs	r0, #0
 8005030:	b005      	add	sp, #20
 8005032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005036:	2a00      	cmp	r2, #0
 8005038:	d0eb      	beq.n	8005012 <ai_platform_outputs_get+0xb2>
 800503a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800503e:	6858      	ldr	r0, [r3, #4]
 8005040:	e7ef      	b.n	8005022 <ai_platform_outputs_get+0xc2>
 8005042:	bf00      	nop
 8005044:	a1c00100 	.word	0xa1c00100

08005048 <ai_platform_network_create>:
 8005048:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800504c:	b083      	sub	sp, #12
 800504e:	f89d 9028 	ldrb.w	r9, [sp, #40]	; 0x28
 8005052:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8005056:	b320      	cbz	r0, 80050a2 <ai_platform_network_create+0x5a>
 8005058:	6002      	str	r2, [r0, #0]
 800505a:	4616      	mov	r6, r2
 800505c:	461f      	mov	r7, r3
 800505e:	4604      	mov	r4, r0
 8005060:	f000 fb72 	bl	8005748 <core_init>
 8005064:	b970      	cbnz	r0, 8005084 <ai_platform_network_create+0x3c>
 8005066:	2530      	movs	r5, #48	; 0x30
 8005068:	2300      	movs	r3, #0
 800506a:	6023      	str	r3, [r4, #0]
 800506c:	2410      	movs	r4, #16
 800506e:	4642      	mov	r2, r8
 8005070:	4649      	mov	r1, r9
 8005072:	4638      	mov	r0, r7
 8005074:	f001 fae2 	bl	800663c <ai_version_get>
 8005078:	60b0      	str	r0, [r6, #8]
 800507a:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 800507e:	b003      	add	sp, #12
 8005080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005084:	2200      	movs	r2, #0
 8005086:	4649      	mov	r1, r9
 8005088:	4638      	mov	r0, r7
 800508a:	f001 fad7 	bl	800663c <ai_version_get>
 800508e:	2200      	movs	r2, #0
 8005090:	4605      	mov	r5, r0
 8005092:	2105      	movs	r1, #5
 8005094:	2001      	movs	r0, #1
 8005096:	f001 fad1 	bl	800663c <ai_version_get>
 800509a:	4285      	cmp	r5, r0
 800509c:	d008      	beq.n	80050b0 <ai_platform_network_create+0x68>
 800509e:	2501      	movs	r5, #1
 80050a0:	e7e2      	b.n	8005068 <ai_platform_network_create+0x20>
 80050a2:	2510      	movs	r5, #16
 80050a4:	462c      	mov	r4, r5
 80050a6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80050aa:	b003      	add	sp, #12
 80050ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <ai_platform_network_create+0x80>)
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	a801      	add	r0, sp, #4
 80050b6:	f000 fb55 	bl	8005764 <ai_check_custom_types>
 80050ba:	b110      	cbz	r0, 80050c2 <ai_platform_network_create+0x7a>
 80050bc:	2400      	movs	r4, #0
 80050be:	4625      	mov	r5, r4
 80050c0:	e7d5      	b.n	800506e <ai_platform_network_create+0x26>
 80050c2:	2502      	movs	r5, #2
 80050c4:	e7d0      	b.n	8005068 <ai_platform_network_create+0x20>
 80050c6:	bf00      	nop
 80050c8:	84048403 	.word	0x84048403

080050cc <ai_platform_network_init>:
 80050cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050d0:	4b63      	ldr	r3, [pc, #396]	; (8005260 <ai_platform_network_init+0x194>)
 80050d2:	6802      	ldr	r2, [r0, #0]
 80050d4:	4393      	bics	r3, r2
 80050d6:	b083      	sub	sp, #12
 80050d8:	d156      	bne.n	8005188 <ai_platform_network_init+0xbc>
 80050da:	4604      	mov	r4, r0
 80050dc:	460f      	mov	r7, r1
 80050de:	2900      	cmp	r1, #0
 80050e0:	f000 80a9 	beq.w	8005236 <ai_platform_network_init+0x16a>
 80050e4:	680b      	ldr	r3, [r1, #0]
 80050e6:	495f      	ldr	r1, [pc, #380]	; (8005264 <ai_platform_network_init+0x198>)
 80050e8:	428b      	cmp	r3, r1
 80050ea:	d113      	bne.n	8005114 <ai_platform_network_init+0x48>
 80050ec:	495c      	ldr	r1, [pc, #368]	; (8005260 <ai_platform_network_init+0x194>)
 80050ee:	89bd      	ldrh	r5, [r7, #12]
 80050f0:	f8b7 a00e 	ldrh.w	sl, [r7, #14]
 80050f4:	f8d7 8010 	ldr.w	r8, [r7, #16]
 80050f8:	f8b7 b004 	ldrh.w	fp, [r7, #4]
 80050fc:	f8b7 9006 	ldrh.w	r9, [r7, #6]
 8005100:	68be      	ldr	r6, [r7, #8]
 8005102:	428a      	cmp	r2, r1
 8005104:	d02c      	beq.n	8005160 <ai_platform_network_init+0x94>
 8005106:	2303      	movs	r3, #3
 8005108:	6123      	str	r3, [r4, #16]
 800510a:	4627      	mov	r7, r4
 800510c:	4638      	mov	r0, r7
 800510e:	b003      	add	sp, #12
 8005110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005114:	2101      	movs	r1, #1
 8005116:	4638      	mov	r0, r7
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	f8d7 b004 	ldr.w	fp, [r7, #4]
 800511e:	f7ff fdbd 	bl	8004c9c <ai_buffer_get_size>
 8005122:	f107 081c 	add.w	r8, r7, #28
 8005126:	4605      	mov	r5, r0
 8005128:	2101      	movs	r1, #1
 800512a:	4640      	mov	r0, r8
 800512c:	463e      	mov	r6, r7
 800512e:	6a3f      	ldr	r7, [r7, #32]
 8005130:	f7ff fdb4 	bl	8004c9c <ai_buffer_get_size>
 8005134:	2d00      	cmp	r5, #0
 8005136:	9b01      	ldr	r3, [sp, #4]
 8005138:	bf0a      	itet	eq
 800513a:	46a9      	moveq	r9, r5
 800513c:	f04f 0901 	movne.w	r9, #1
 8005140:	462e      	moveq	r6, r5
 8005142:	b330      	cbz	r0, 8005192 <ai_platform_network_init+0xc6>
 8005144:	2f00      	cmp	r7, #0
 8005146:	f000 8084 	beq.w	8005252 <ai_platform_network_init+0x186>
 800514a:	f04f 0a01 	mov.w	sl, #1
 800514e:	f1bb 0f00 	cmp.w	fp, #0
 8005152:	d021      	beq.n	8005198 <ai_platform_network_init+0xcc>
 8005154:	2500      	movs	r5, #0
 8005156:	6822      	ldr	r2, [r4, #0]
 8005158:	4941      	ldr	r1, [pc, #260]	; (8005260 <ai_platform_network_init+0x194>)
 800515a:	428a      	cmp	r2, r1
 800515c:	46ab      	mov	fp, r5
 800515e:	d1d2      	bne.n	8005106 <ai_platform_network_init+0x3a>
 8005160:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 8005162:	454a      	cmp	r2, r9
 8005164:	4a3f      	ldr	r2, [pc, #252]	; (8005264 <ai_platform_network_init+0x198>)
 8005166:	d221      	bcs.n	80051ac <ai_platform_network_init+0xe0>
 8005168:	4293      	cmp	r3, r2
 800516a:	d15c      	bne.n	8005226 <ai_platform_network_init+0x15a>
 800516c:	6266      	str	r6, [r4, #36]	; 0x24
 800516e:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 8005172:	f8a4 b020 	strh.w	fp, [r4, #32]
 8005176:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
 800517a:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
 800517e:	8525      	strh	r5, [r4, #40]	; 0x28
 8005180:	4620      	mov	r0, r4
 8005182:	f000 fb19 	bl	80057b8 <ai_layers_init_all>
 8005186:	e7be      	b.n	8005106 <ai_platform_network_init+0x3a>
 8005188:	2700      	movs	r7, #0
 800518a:	4638      	mov	r0, r7
 800518c:	b003      	add	sp, #12
 800518e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005192:	4680      	mov	r8, r0
 8005194:	4682      	mov	sl, r0
 8005196:	e7da      	b.n	800514e <ai_platform_network_init+0x82>
 8005198:	2d00      	cmp	r5, #0
 800519a:	d0dc      	beq.n	8005156 <ai_platform_network_init+0x8a>
 800519c:	2212      	movs	r2, #18
 800519e:	2110      	movs	r1, #16
 80051a0:	f104 000c 	add.w	r0, r4, #12
 80051a4:	f000 fad2 	bl	800574c <core_set_error>
 80051a8:	465f      	mov	r7, fp
 80051aa:	e7af      	b.n	800510c <ai_platform_network_init+0x40>
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d0dd      	beq.n	800516c <ai_platform_network_init+0xa0>
 80051b0:	f1b9 0f00 	cmp.w	r9, #0
 80051b4:	d018      	beq.n	80051e8 <ai_platform_network_init+0x11c>
 80051b6:	ebc9 03c9 	rsb	r3, r9, r9, lsl #3
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80051c0:	2700      	movs	r7, #0
 80051c2:	4699      	mov	r9, r3
 80051c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c6:	eb06 0e07 	add.w	lr, r6, r7
 80051ca:	eb03 0c07 	add.w	ip, r3, r7
 80051ce:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80051d2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80051d6:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 80051da:	371c      	adds	r7, #28
 80051dc:	45b9      	cmp	r9, r7
 80051de:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 80051e2:	d1ef      	bne.n	80051c4 <ai_platform_network_init+0xf8>
 80051e4:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80051e8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80051ea:	f8a4 9022 	strh.w	r9, [r4, #34]	; 0x22
 80051ee:	4553      	cmp	r3, sl
 80051f0:	f8a4 b020 	strh.w	fp, [r4, #32]
 80051f4:	d325      	bcc.n	8005242 <ai_platform_network_init+0x176>
 80051f6:	f1ba 0f00 	cmp.w	sl, #0
 80051fa:	d0be      	beq.n	800517a <ai_platform_network_init+0xae>
 80051fc:	ebca 0eca 	rsb	lr, sl, sl, lsl #3
 8005200:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005204:	f04f 0c00 	mov.w	ip, #0
 8005208:	eb08 070c 	add.w	r7, r8, ip
 800520c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800520e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005210:	4466      	add	r6, ip
 8005212:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8005214:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8005218:	f10c 0c1c 	add.w	ip, ip, #28
 800521c:	45f4      	cmp	ip, lr
 800521e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8005222:	d1f1      	bne.n	8005208 <ai_platform_network_init+0x13c>
 8005224:	e7a9      	b.n	800517a <ai_platform_network_init+0xae>
 8005226:	2212      	movs	r2, #18
 8005228:	2116      	movs	r1, #22
 800522a:	f104 000c 	add.w	r0, r4, #12
 800522e:	f000 fa8d 	bl	800574c <core_set_error>
 8005232:	2700      	movs	r7, #0
 8005234:	e76a      	b.n	800510c <ai_platform_network_init+0x40>
 8005236:	2211      	movs	r2, #17
 8005238:	2110      	movs	r1, #16
 800523a:	300c      	adds	r0, #12
 800523c:	f000 fa86 	bl	800574c <core_set_error>
 8005240:	e764      	b.n	800510c <ai_platform_network_init+0x40>
 8005242:	2213      	movs	r2, #19
 8005244:	2116      	movs	r1, #22
 8005246:	f104 000c 	add.w	r0, r4, #12
 800524a:	f000 fa7f 	bl	800574c <core_set_error>
 800524e:	2700      	movs	r7, #0
 8005250:	e75c      	b.n	800510c <ai_platform_network_init+0x40>
 8005252:	2213      	movs	r2, #19
 8005254:	2110      	movs	r1, #16
 8005256:	f104 000c 	add.w	r0, r4, #12
 800525a:	f000 fa77 	bl	800574c <core_set_error>
 800525e:	e755      	b.n	800510c <ai_platform_network_init+0x40>
 8005260:	a1c00100 	.word	0xa1c00100
 8005264:	a1facade 	.word	0xa1facade

08005268 <ai_platform_network_post_init>:
 8005268:	b538      	push	{r3, r4, r5, lr}
 800526a:	4b16      	ldr	r3, [pc, #88]	; (80052c4 <ai_platform_network_post_init+0x5c>)
 800526c:	6802      	ldr	r2, [r0, #0]
 800526e:	ea02 0103 	and.w	r1, r2, r3
 8005272:	4393      	bics	r3, r2
 8005274:	d108      	bne.n	8005288 <ai_platform_network_post_init+0x20>
 8005276:	6903      	ldr	r3, [r0, #16]
 8005278:	f013 0502 	ands.w	r5, r3, #2
 800527c:	4604      	mov	r4, r0
 800527e:	d005      	beq.n	800528c <ai_platform_network_post_init+0x24>
 8005280:	428a      	cmp	r2, r1
 8005282:	d00a      	beq.n	800529a <ai_platform_network_post_init+0x32>
 8005284:	2001      	movs	r0, #1
 8005286:	bd38      	pop	{r3, r4, r5, pc}
 8005288:	2000      	movs	r0, #0
 800528a:	bd38      	pop	{r3, r4, r5, pc}
 800528c:	2210      	movs	r2, #16
 800528e:	2111      	movs	r1, #17
 8005290:	300c      	adds	r0, #12
 8005292:	f000 fa5b 	bl	800574c <core_set_error>
 8005296:	4628      	mov	r0, r5
 8005298:	bd38      	pop	{r3, r4, r5, pc}
 800529a:	f000 fa9b 	bl	80057d4 <ai_layers_post_init_all>
 800529e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d0ef      	beq.n	8005284 <ai_platform_network_post_init+0x1c>
 80052a4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80052a6:	e008      	b.n	80052ba <ai_platform_network_post_init+0x52>
 80052a8:	e9d4 3210 	ldrd	r3, r2, [r4, #64]	; 0x40
 80052ac:	4798      	blx	r3
 80052ae:	692b      	ldr	r3, [r5, #16]
 80052b0:	42ab      	cmp	r3, r5
 80052b2:	d0e7      	beq.n	8005284 <ai_platform_network_post_init+0x1c>
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0e5      	beq.n	8005284 <ai_platform_network_post_init+0x1c>
 80052b8:	461d      	mov	r5, r3
 80052ba:	4629      	mov	r1, r5
 80052bc:	2000      	movs	r0, #0
 80052be:	2d00      	cmp	r5, #0
 80052c0:	d1f2      	bne.n	80052a8 <ai_platform_network_post_init+0x40>
 80052c2:	e7df      	b.n	8005284 <ai_platform_network_post_init+0x1c>
 80052c4:	a1c00100 	.word	0xa1c00100

080052c8 <ai_platform_network_process>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	4bb5      	ldr	r3, [pc, #724]	; (80055a4 <ai_platform_network_process+0x2dc>)
 80052ce:	4605      	mov	r5, r0
 80052d0:	6800      	ldr	r0, [r0, #0]
 80052d2:	b085      	sub	sp, #20
 80052d4:	4383      	bics	r3, r0
 80052d6:	9202      	str	r2, [sp, #8]
 80052d8:	f040 8140 	bne.w	800555c <ai_platform_network_process+0x294>
 80052dc:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
 80052de:	2b00      	cmp	r3, #0
 80052e0:	f000 8125 	beq.w	800552e <ai_platform_network_process+0x266>
 80052e4:	692b      	ldr	r3, [r5, #16]
 80052e6:	f8d5 a034 	ldr.w	sl, [r5, #52]	; 0x34
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	2700      	movs	r7, #0
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	61af      	str	r7, [r5, #24]
 80052f4:	f040 8137 	bne.w	8005566 <ai_platform_network_process+0x29e>
 80052f8:	2900      	cmp	r1, #0
 80052fa:	f000 811e 	beq.w	800553a <ai_platform_network_process+0x272>
 80052fe:	f1ba 0f00 	cmp.w	sl, #0
 8005302:	f000 811a 	beq.w	800553a <ai_platform_network_process+0x272>
 8005306:	f8ba 3000 	ldrh.w	r3, [sl]
 800530a:	2b00      	cmp	r3, #0
 800530c:	f000 8115 	beq.w	800553a <ai_platform_network_process+0x272>
 8005310:	698b      	ldr	r3, [r1, #24]
 8005312:	9503      	str	r5, [sp, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	9301      	str	r3, [sp, #4]
 8005318:	460e      	mov	r6, r1
 800531a:	f8da 3004 	ldr.w	r3, [sl, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d072      	beq.n	8005408 <ai_platform_network_process+0x140>
 8005322:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8005326:	2c00      	cmp	r4, #0
 8005328:	d06e      	beq.n	8005408 <ai_platform_network_process+0x140>
 800532a:	f8da 3008 	ldr.w	r3, [sl, #8]
 800532e:	f8d3 9000 	ldr.w	r9, [r3]
 8005332:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8005336:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800533a:	f000 81d3 	beq.w	80056e4 <ai_platform_network_process+0x41c>
 800533e:	69a3      	ldr	r3, [r4, #24]
 8005340:	2101      	movs	r1, #1
 8005342:	4630      	mov	r0, r6
 8005344:	685d      	ldr	r5, [r3, #4]
 8005346:	f7ff fca9 	bl	8004c9c <ai_buffer_get_size>
 800534a:	4285      	cmp	r5, r0
 800534c:	f0c0 8116 	bcc.w	800557c <ai_platform_network_process+0x2b4>
 8005350:	68e0      	ldr	r0, [r4, #12]
 8005352:	69b1      	ldr	r1, [r6, #24]
 8005354:	68c2      	ldr	r2, [r0, #12]
 8005356:	68cb      	ldr	r3, [r1, #12]
 8005358:	429a      	cmp	r2, r3
 800535a:	f040 810f 	bne.w	800557c <ai_platform_network_process+0x2b4>
 800535e:	6882      	ldr	r2, [r0, #8]
 8005360:	688b      	ldr	r3, [r1, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	f040 810a 	bne.w	800557c <ai_platform_network_process+0x2b4>
 8005368:	6842      	ldr	r2, [r0, #4]
 800536a:	684b      	ldr	r3, [r1, #4]
 800536c:	429a      	cmp	r2, r3
 800536e:	f040 8105 	bne.w	800557c <ai_platform_network_process+0x2b4>
 8005372:	69a3      	ldr	r3, [r4, #24]
 8005374:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005378:	f001 f94e 	bl	8006618 <ai_array_get_data_byte_size>
 800537c:	4605      	mov	r5, r0
 800537e:	4620      	mov	r0, r4
 8005380:	f001 f962 	bl	8006648 <get_tensor_byte_size>
 8005384:	4285      	cmp	r5, r0
 8005386:	f0c0 80f9 	bcc.w	800557c <ai_platform_network_process+0x2b4>
 800538a:	69a3      	ldr	r3, [r4, #24]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	f001 f8d3 	bl	8006538 <ai_array_to_buffer_fmt>
 8005392:	6833      	ldr	r3, [r6, #0]
 8005394:	4058      	eors	r0, r3
 8005396:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 800539a:	f040 81a5 	bne.w	80056e8 <ai_platform_network_process+0x420>
 800539e:	6873      	ldr	r3, [r6, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 819f 	beq.w	80056e4 <ai_platform_network_process+0x41c>
 80053a6:	69b3      	ldr	r3, [r6, #24]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	f000 81a5 	beq.w	80056fa <ai_platform_network_process+0x432>
 80053b0:	9a01      	ldr	r2, [sp, #4]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	bf38      	it	cc
 80053b6:	461a      	movcc	r2, r3
 80053b8:	4620      	mov	r0, r4
 80053ba:	9201      	str	r2, [sp, #4]
 80053bc:	f001 f944 	bl	8006648 <get_tensor_byte_size>
 80053c0:	f8c8 0008 	str.w	r0, [r8, #8]
 80053c4:	69b3      	ldr	r3, [r6, #24]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	fb00 f303 	mul.w	r3, r0, r3
 80053cc:	f8c8 300c 	str.w	r3, [r8, #12]
 80053d0:	6871      	ldr	r1, [r6, #4]
 80053d2:	f8c8 1004 	str.w	r1, [r8, #4]
 80053d6:	440b      	add	r3, r1
 80053d8:	f849 300b 	str.w	r3, [r9, fp]
 80053dc:	69a0      	ldr	r0, [r4, #24]
 80053de:	6803      	ldr	r3, [r0, #0]
 80053e0:	009a      	lsls	r2, r3, #2
 80053e2:	f107 0701 	add.w	r7, r7, #1
 80053e6:	f106 061c 	add.w	r6, r6, #28
 80053ea:	f100 80b1 	bmi.w	8005550 <ai_platform_network_process+0x288>
 80053ee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80053f2:	1a9b      	subs	r3, r3, r2
 80053f4:	4419      	add	r1, r3
 80053f6:	6081      	str	r1, [r0, #8]
 80053f8:	69a3      	ldr	r3, [r4, #24]
 80053fa:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	f8ba 3000 	ldrh.w	r3, [sl]
 8005404:	42bb      	cmp	r3, r7
 8005406:	d888      	bhi.n	800531a <ai_platform_network_process+0x52>
 8005408:	9d03      	ldr	r5, [sp, #12]
 800540a:	9b02      	ldr	r3, [sp, #8]
 800540c:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 817c 	beq.w	800570c <ai_platform_network_process+0x444>
 8005414:	2a01      	cmp	r2, #1
 8005416:	f240 80bd 	bls.w	8005594 <ai_platform_network_process+0x2cc>
 800541a:	f8d5 8034 	ldr.w	r8, [r5, #52]	; 0x34
 800541e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80b6 	beq.w	8005594 <ai_platform_network_process+0x2cc>
 8005428:	f8dd b008 	ldr.w	fp, [sp, #8]
 800542c:	2700      	movs	r7, #0
 800542e:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f000 80bd 	beq.w	80055b2 <ai_platform_network_process+0x2ea>
 8005438:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800543c:	2e00      	cmp	r6, #0
 800543e:	f000 80b8 	beq.w	80055b2 <ai_platform_network_process+0x2ea>
 8005442:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8005446:	681c      	ldr	r4, [r3, #0]
 8005448:	eb14 1907 	adds.w	r9, r4, r7, lsl #4
 800544c:	ea4f 1a07 	mov.w	sl, r7, lsl #4
 8005450:	f000 8160 	beq.w	8005714 <ai_platform_network_process+0x44c>
 8005454:	69b3      	ldr	r3, [r6, #24]
 8005456:	2101      	movs	r1, #1
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	9302      	str	r3, [sp, #8]
 800545c:	4658      	mov	r0, fp
 800545e:	f7ff fc1d 	bl	8004c9c <ai_buffer_get_size>
 8005462:	9b02      	ldr	r3, [sp, #8]
 8005464:	4283      	cmp	r3, r0
 8005466:	f0c0 8095 	bcc.w	8005594 <ai_platform_network_process+0x2cc>
 800546a:	68f0      	ldr	r0, [r6, #12]
 800546c:	f8db 1018 	ldr.w	r1, [fp, #24]
 8005470:	68c2      	ldr	r2, [r0, #12]
 8005472:	68cb      	ldr	r3, [r1, #12]
 8005474:	429a      	cmp	r2, r3
 8005476:	f040 808d 	bne.w	8005594 <ai_platform_network_process+0x2cc>
 800547a:	6882      	ldr	r2, [r0, #8]
 800547c:	688b      	ldr	r3, [r1, #8]
 800547e:	429a      	cmp	r2, r3
 8005480:	f040 8088 	bne.w	8005594 <ai_platform_network_process+0x2cc>
 8005484:	6842      	ldr	r2, [r0, #4]
 8005486:	684b      	ldr	r3, [r1, #4]
 8005488:	429a      	cmp	r2, r3
 800548a:	f040 8083 	bne.w	8005594 <ai_platform_network_process+0x2cc>
 800548e:	69b3      	ldr	r3, [r6, #24]
 8005490:	e9d3 0100 	ldrd	r0, r1, [r3]
 8005494:	f001 f8c0 	bl	8006618 <ai_array_get_data_byte_size>
 8005498:	9002      	str	r0, [sp, #8]
 800549a:	4630      	mov	r0, r6
 800549c:	f001 f8d4 	bl	8006648 <get_tensor_byte_size>
 80054a0:	9b02      	ldr	r3, [sp, #8]
 80054a2:	4283      	cmp	r3, r0
 80054a4:	d376      	bcc.n	8005594 <ai_platform_network_process+0x2cc>
 80054a6:	69b3      	ldr	r3, [r6, #24]
 80054a8:	6818      	ldr	r0, [r3, #0]
 80054aa:	f001 f845 	bl	8006538 <ai_array_to_buffer_fmt>
 80054ae:	f8db 3000 	ldr.w	r3, [fp]
 80054b2:	4058      	eors	r0, r3
 80054b4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80054b8:	f040 8134 	bne.w	8005724 <ai_platform_network_process+0x45c>
 80054bc:	f8db 3004 	ldr.w	r3, [fp, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	f000 8127 	beq.w	8005714 <ai_platform_network_process+0x44c>
 80054c6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	f000 8133 	beq.w	8005738 <ai_platform_network_process+0x470>
 80054d2:	9a01      	ldr	r2, [sp, #4]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	bf38      	it	cc
 80054d8:	461a      	movcc	r2, r3
 80054da:	4630      	mov	r0, r6
 80054dc:	9201      	str	r2, [sp, #4]
 80054de:	f001 f8b3 	bl	8006648 <get_tensor_byte_size>
 80054e2:	f8c9 0008 	str.w	r0, [r9, #8]
 80054e6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	fb00 f303 	mul.w	r3, r0, r3
 80054f0:	f8c9 300c 	str.w	r3, [r9, #12]
 80054f4:	f8db 1004 	ldr.w	r1, [fp, #4]
 80054f8:	f8c9 1004 	str.w	r1, [r9, #4]
 80054fc:	440b      	add	r3, r1
 80054fe:	f844 300a 	str.w	r3, [r4, sl]
 8005502:	69b0      	ldr	r0, [r6, #24]
 8005504:	6803      	ldr	r3, [r0, #0]
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	f107 0701 	add.w	r7, r7, #1
 800550c:	f10b 0b1c 	add.w	fp, fp, #28
 8005510:	d44a      	bmi.n	80055a8 <ai_platform_network_process+0x2e0>
 8005512:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8005516:	1a9b      	subs	r3, r3, r2
 8005518:	4419      	add	r1, r3
 800551a:	6081      	str	r1, [r0, #8]
 800551c:	69b3      	ldr	r3, [r6, #24]
 800551e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8005522:	60da      	str	r2, [r3, #12]
 8005524:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8005528:	42bb      	cmp	r3, r7
 800552a:	d880      	bhi.n	800542e <ai_platform_network_process+0x166>
 800552c:	e041      	b.n	80055b2 <ai_platform_network_process+0x2ea>
 800552e:	692a      	ldr	r2, [r5, #16]
 8005530:	61ab      	str	r3, [r5, #24]
 8005532:	f002 0203 	and.w	r2, r2, #3
 8005536:	2a03      	cmp	r2, #3
 8005538:	d115      	bne.n	8005566 <ai_platform_network_process+0x29e>
 800553a:	2217      	movs	r2, #23
 800553c:	2112      	movs	r1, #18
 800553e:	f105 000c 	add.w	r0, r5, #12
 8005542:	f000 f903 	bl	800574c <core_set_error>
 8005546:	2400      	movs	r4, #0
 8005548:	4620      	mov	r0, r4
 800554a:	b005      	add	sp, #20
 800554c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005550:	f8ba 3000 	ldrh.w	r3, [sl]
 8005554:	429f      	cmp	r7, r3
 8005556:	f4ff aee0 	bcc.w	800531a <ai_platform_network_process+0x52>
 800555a:	e755      	b.n	8005408 <ai_platform_network_process+0x140>
 800555c:	2400      	movs	r4, #0
 800555e:	4620      	mov	r0, r4
 8005560:	b005      	add	sp, #20
 8005562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005566:	2230      	movs	r2, #48	; 0x30
 8005568:	2111      	movs	r1, #17
 800556a:	f105 000c 	add.w	r0, r5, #12
 800556e:	f000 f8ed 	bl	800574c <core_set_error>
 8005572:	2400      	movs	r4, #0
 8005574:	4620      	mov	r0, r4
 8005576:	b005      	add	sp, #20
 8005578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557c:	9d03      	ldr	r5, [sp, #12]
 800557e:	2218      	movs	r2, #24
 8005580:	2112      	movs	r1, #18
 8005582:	f105 000c 	add.w	r0, r5, #12
 8005586:	f000 f8e1 	bl	800574c <core_set_error>
 800558a:	2400      	movs	r4, #0
 800558c:	4620      	mov	r0, r4
 800558e:	b005      	add	sp, #20
 8005590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005594:	2218      	movs	r2, #24
 8005596:	2113      	movs	r1, #19
 8005598:	f105 000c 	add.w	r0, r5, #12
 800559c:	f000 f8d6 	bl	800574c <core_set_error>
 80055a0:	2400      	movs	r4, #0
 80055a2:	e7d1      	b.n	8005548 <ai_platform_network_process+0x280>
 80055a4:	a1c00100 	.word	0xa1c00100
 80055a8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80055ac:	429f      	cmp	r7, r3
 80055ae:	f4ff af3e 	bcc.w	800542e <ai_platform_network_process+0x166>
 80055b2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80055b6:	8e2a      	ldrh	r2, [r5, #48]	; 0x30
 80055b8:	832b      	strh	r3, [r5, #24]
 80055ba:	2a00      	cmp	r2, #0
 80055bc:	f040 808c 	bne.w	80056d8 <ai_platform_network_process+0x410>
 80055c0:	4616      	mov	r6, r2
 80055c2:	4617      	mov	r7, r2
 80055c4:	8b6c      	ldrh	r4, [r5, #26]
 80055c6:	429c      	cmp	r4, r3
 80055c8:	bf38      	it	cc
 80055ca:	46ab      	movcc	fp, r5
 80055cc:	d2bc      	bcs.n	8005548 <ai_platform_network_process+0x280>
 80055ce:	2e00      	cmp	r6, #0
 80055d0:	d030      	beq.n	8005634 <ai_platform_network_process+0x36c>
 80055d2:	f04f 0800 	mov.w	r8, #0
 80055d6:	e014      	b.n	8005602 <ai_platform_network_process+0x33a>
 80055d8:	6882      	ldr	r2, [r0, #8]
 80055da:	68c5      	ldr	r5, [r0, #12]
 80055dc:	6863      	ldr	r3, [r4, #4]
 80055de:	1b52      	subs	r2, r2, r5
 80055e0:	4413      	add	r3, r2
 80055e2:	6083      	str	r3, [r0, #8]
 80055e4:	698b      	ldr	r3, [r1, #24]
 80055e6:	6862      	ldr	r2, [r4, #4]
 80055e8:	60da      	str	r2, [r3, #12]
 80055ea:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80055ee:	f859 200a 	ldr.w	r2, [r9, sl]
 80055f2:	440b      	add	r3, r1
 80055f4:	4293      	cmp	r3, r2
 80055f6:	bf24      	itt	cs
 80055f8:	68e3      	ldrcs	r3, [r4, #12]
 80055fa:	1ad3      	subcs	r3, r2, r3
 80055fc:	6063      	str	r3, [r4, #4]
 80055fe:	f108 0801 	add.w	r8, r8, #1
 8005602:	8833      	ldrh	r3, [r6, #0]
 8005604:	4543      	cmp	r3, r8
 8005606:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 800560a:	d913      	bls.n	8005634 <ai_platform_network_process+0x36c>
 800560c:	6873      	ldr	r3, [r6, #4]
 800560e:	b18b      	cbz	r3, 8005634 <ai_platform_network_process+0x36c>
 8005610:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8005614:	b171      	cbz	r1, 8005634 <ai_platform_network_process+0x36c>
 8005616:	6988      	ldr	r0, [r1, #24]
 8005618:	68b2      	ldr	r2, [r6, #8]
 800561a:	6803      	ldr	r3, [r0, #0]
 800561c:	f8d2 9000 	ldr.w	r9, [r2]
 8005620:	009d      	lsls	r5, r3, #2
 8005622:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8005626:	d5d7      	bpl.n	80055d8 <ai_platform_network_process+0x310>
 8005628:	6881      	ldr	r1, [r0, #8]
 800562a:	68a2      	ldr	r2, [r4, #8]
 800562c:	6860      	ldr	r0, [r4, #4]
 800562e:	f000 fefd 	bl	800642c <st_int8_copy>
 8005632:	e7da      	b.n	80055ea <ai_platform_network_process+0x322>
 8005634:	4658      	mov	r0, fp
 8005636:	f000 f8e1 	bl	80057fc <ai_layers_forward_all>
 800563a:	2f00      	cmp	r7, #0
 800563c:	d03d      	beq.n	80056ba <ai_platform_network_process+0x3f2>
 800563e:	2400      	movs	r4, #0
 8005640:	e016      	b.n	8005670 <ai_platform_network_process+0x3a8>
 8005642:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8005646:	f859 100a 	ldr.w	r1, [r9, sl]
 800564a:	4413      	add	r3, r2
 800564c:	428b      	cmp	r3, r1
 800564e:	bf24      	itt	cs
 8005650:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8005654:	1acb      	subcs	r3, r1, r3
 8005656:	f8c8 3004 	str.w	r3, [r8, #4]
 800565a:	6981      	ldr	r1, [r0, #24]
 800565c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8005660:	1b52      	subs	r2, r2, r5
 8005662:	4413      	add	r3, r2
 8005664:	608b      	str	r3, [r1, #8]
 8005666:	6983      	ldr	r3, [r0, #24]
 8005668:	f8d8 2004 	ldr.w	r2, [r8, #4]
 800566c:	60da      	str	r2, [r3, #12]
 800566e:	3401      	adds	r4, #1
 8005670:	883b      	ldrh	r3, [r7, #0]
 8005672:	42a3      	cmp	r3, r4
 8005674:	d921      	bls.n	80056ba <ai_platform_network_process+0x3f2>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	b1fb      	cbz	r3, 80056ba <ai_platform_network_process+0x3f2>
 800567a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800567e:	b1e0      	cbz	r0, 80056ba <ai_platform_network_process+0x3f2>
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	6983      	ldr	r3, [r0, #24]
 8005684:	f8d2 9000 	ldr.w	r9, [r2]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	0092      	lsls	r2, r2, #2
 800568c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8005690:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8005694:	d5d5      	bpl.n	8005642 <ai_platform_network_process+0x37a>
 8005696:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800569a:	6898      	ldr	r0, [r3, #8]
 800569c:	f000 fec6 	bl	800642c <st_int8_copy>
 80056a0:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 80056a4:	f859 200a 	ldr.w	r2, [r9, sl]
 80056a8:	440b      	add	r3, r1
 80056aa:	4293      	cmp	r3, r2
 80056ac:	bf24      	itt	cs
 80056ae:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 80056b2:	1ad3      	subcs	r3, r2, r3
 80056b4:	f8c8 3004 	str.w	r3, [r8, #4]
 80056b8:	e7d9      	b.n	800566e <ai_platform_network_process+0x3a6>
 80056ba:	f8bb 401a 	ldrh.w	r4, [fp, #26]
 80056be:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80056c2:	3401      	adds	r4, #1
 80056c4:	b2a4      	uxth	r4, r4
 80056c6:	42a3      	cmp	r3, r4
 80056c8:	f8ab 401a 	strh.w	r4, [fp, #26]
 80056cc:	f63f af7f 	bhi.w	80055ce <ai_platform_network_process+0x306>
 80056d0:	4620      	mov	r0, r4
 80056d2:	b005      	add	sp, #20
 80056d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056d8:	2a01      	cmp	r2, #1
 80056da:	6b6e      	ldr	r6, [r5, #52]	; 0x34
 80056dc:	d02a      	beq.n	8005734 <ai_platform_network_process+0x46c>
 80056de:	f106 070c 	add.w	r7, r6, #12
 80056e2:	e76f      	b.n	80055c4 <ai_platform_network_process+0x2fc>
 80056e4:	9d03      	ldr	r5, [sp, #12]
 80056e6:	e728      	b.n	800553a <ai_platform_network_process+0x272>
 80056e8:	9d03      	ldr	r5, [sp, #12]
 80056ea:	2219      	movs	r2, #25
 80056ec:	2112      	movs	r1, #18
 80056ee:	f105 000c 	add.w	r0, r5, #12
 80056f2:	f000 f82b 	bl	800574c <core_set_error>
 80056f6:	2400      	movs	r4, #0
 80056f8:	e726      	b.n	8005548 <ai_platform_network_process+0x280>
 80056fa:	9d03      	ldr	r5, [sp, #12]
 80056fc:	4604      	mov	r4, r0
 80056fe:	2221      	movs	r2, #33	; 0x21
 8005700:	2112      	movs	r1, #18
 8005702:	f105 000c 	add.w	r0, r5, #12
 8005706:	f000 f821 	bl	800574c <core_set_error>
 800570a:	e71d      	b.n	8005548 <ai_platform_network_process+0x280>
 800570c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005710:	832b      	strh	r3, [r5, #24]
 8005712:	e752      	b.n	80055ba <ai_platform_network_process+0x2f2>
 8005714:	2217      	movs	r2, #23
 8005716:	2113      	movs	r1, #19
 8005718:	f105 000c 	add.w	r0, r5, #12
 800571c:	f000 f816 	bl	800574c <core_set_error>
 8005720:	2400      	movs	r4, #0
 8005722:	e711      	b.n	8005548 <ai_platform_network_process+0x280>
 8005724:	2219      	movs	r2, #25
 8005726:	2113      	movs	r1, #19
 8005728:	f105 000c 	add.w	r0, r5, #12
 800572c:	f000 f80e 	bl	800574c <core_set_error>
 8005730:	2400      	movs	r4, #0
 8005732:	e709      	b.n	8005548 <ai_platform_network_process+0x280>
 8005734:	2700      	movs	r7, #0
 8005736:	e745      	b.n	80055c4 <ai_platform_network_process+0x2fc>
 8005738:	4604      	mov	r4, r0
 800573a:	2221      	movs	r2, #33	; 0x21
 800573c:	2113      	movs	r1, #19
 800573e:	f105 000c 	add.w	r0, r5, #12
 8005742:	f000 f803 	bl	800574c <core_set_error>
 8005746:	e6ff      	b.n	8005548 <ai_platform_network_process+0x280>

08005748 <core_init>:
 8005748:	2001      	movs	r0, #1
 800574a:	4770      	bx	lr

0800574c <core_set_error>:
 800574c:	4603      	mov	r3, r0
 800574e:	7800      	ldrb	r0, [r0, #0]
 8005750:	b108      	cbz	r0, 8005756 <core_set_error+0xa>
 8005752:	2000      	movs	r0, #0
 8005754:	4770      	bx	lr
 8005756:	7019      	strb	r1, [r3, #0]
 8005758:	6819      	ldr	r1, [r3, #0]
 800575a:	f362 211f 	bfi	r1, r2, #8, #24
 800575e:	2001      	movs	r0, #1
 8005760:	6019      	str	r1, [r3, #0]
 8005762:	4770      	bx	lr

08005764 <ai_check_custom_types>:
 8005764:	b082      	sub	sp, #8
 8005766:	4b13      	ldr	r3, [pc, #76]	; (80057b4 <ai_check_custom_types+0x50>)
 8005768:	9301      	str	r3, [sp, #4]
 800576a:	b118      	cbz	r0, 8005774 <ai_check_custom_types+0x10>
 800576c:	7803      	ldrb	r3, [r0, #0]
 800576e:	2b03      	cmp	r3, #3
 8005770:	d002      	beq.n	8005778 <ai_check_custom_types+0x14>
 8005772:	2000      	movs	r0, #0
 8005774:	b002      	add	sp, #8
 8005776:	4770      	bx	lr
 8005778:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800577c:	4293      	cmp	r3, r2
 800577e:	d004      	beq.n	800578a <ai_check_custom_types+0x26>
 8005780:	2001      	movs	r0, #1
 8005782:	f080 0001 	eor.w	r0, r0, #1
 8005786:	b002      	add	sp, #8
 8005788:	4770      	bx	lr
 800578a:	7842      	ldrb	r2, [r0, #1]
 800578c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8005790:	429a      	cmp	r2, r3
 8005792:	f100 0001 	add.w	r0, r0, #1
 8005796:	d1f3      	bne.n	8005780 <ai_check_custom_types+0x1c>
 8005798:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800579c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d1ed      	bne.n	8005780 <ai_check_custom_types+0x1c>
 80057a4:	7842      	ldrb	r2, [r0, #1]
 80057a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d1e8      	bne.n	8005780 <ai_check_custom_types+0x1c>
 80057ae:	2000      	movs	r0, #0
 80057b0:	e7e7      	b.n	8005782 <ai_check_custom_types+0x1e>
 80057b2:	bf00      	nop
 80057b4:	84048403 	.word	0x84048403

080057b8 <ai_layers_init_all>:
 80057b8:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80057ba:	2100      	movs	r1, #0
 80057bc:	b143      	cbz	r3, 80057d0 <ai_layers_init_all+0x18>
 80057be:	691a      	ldr	r2, [r3, #16]
 80057c0:	60d8      	str	r0, [r3, #12]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	f101 0101 	add.w	r1, r1, #1
 80057c8:	d002      	beq.n	80057d0 <ai_layers_init_all+0x18>
 80057ca:	b10a      	cbz	r2, 80057d0 <ai_layers_init_all+0x18>
 80057cc:	4613      	mov	r3, r2
 80057ce:	e7f5      	b.n	80057bc <ai_layers_init_all+0x4>
 80057d0:	4608      	mov	r0, r1
 80057d2:	4770      	bx	lr

080057d4 <ai_layers_post_init_all>:
 80057d4:	b538      	push	{r3, r4, r5, lr}
 80057d6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80057d8:	2500      	movs	r5, #0
 80057da:	b16c      	cbz	r4, 80057f8 <ai_layers_post_init_all+0x24>
 80057dc:	6863      	ldr	r3, [r4, #4]
 80057de:	07db      	lsls	r3, r3, #31
 80057e0:	d504      	bpl.n	80057ec <ai_layers_post_init_all+0x18>
 80057e2:	6a23      	ldr	r3, [r4, #32]
 80057e4:	4620      	mov	r0, r4
 80057e6:	b10b      	cbz	r3, 80057ec <ai_layers_post_init_all+0x18>
 80057e8:	4798      	blx	r3
 80057ea:	3501      	adds	r5, #1
 80057ec:	6923      	ldr	r3, [r4, #16]
 80057ee:	42a3      	cmp	r3, r4
 80057f0:	d002      	beq.n	80057f8 <ai_layers_post_init_all+0x24>
 80057f2:	b10b      	cbz	r3, 80057f8 <ai_layers_post_init_all+0x24>
 80057f4:	461c      	mov	r4, r3
 80057f6:	e7f0      	b.n	80057da <ai_layers_post_init_all+0x6>
 80057f8:	4628      	mov	r0, r5
 80057fa:	bd38      	pop	{r3, r4, r5, pc}

080057fc <ai_layers_forward_all>:
 80057fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005800:	f8d0 8040 	ldr.w	r8, [r0, #64]	; 0x40
 8005804:	4604      	mov	r4, r0
 8005806:	f1b8 0f00 	cmp.w	r8, #0
 800580a:	d02b      	beq.n	8005864 <ai_layers_forward_all+0x68>
 800580c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800580e:	63c1      	str	r1, [r0, #60]	; 0x3c
 8005810:	b321      	cbz	r1, 800585c <ai_layers_forward_all+0x60>
 8005812:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005814:	2001      	movs	r0, #1
 8005816:	47c0      	blx	r8
 8005818:	6be6      	ldr	r6, [r4, #60]	; 0x3c
 800581a:	b1fe      	cbz	r6, 800585c <ai_layers_forward_all+0x60>
 800581c:	2700      	movs	r7, #0
 800581e:	4631      	mov	r1, r6
 8005820:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005822:	2002      	movs	r0, #2
 8005824:	47c0      	blx	r8
 8005826:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8005828:	4628      	mov	r0, r5
 800582a:	696b      	ldr	r3, [r5, #20]
 800582c:	4798      	blx	r3
 800582e:	692e      	ldr	r6, [r5, #16]
 8005830:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005832:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005834:	42b5      	cmp	r5, r6
 8005836:	f04f 0003 	mov.w	r0, #3
 800583a:	d007      	beq.n	800584c <ai_layers_forward_all+0x50>
 800583c:	47c0      	blx	r8
 800583e:	3701      	adds	r7, #1
 8005840:	63e6      	str	r6, [r4, #60]	; 0x3c
 8005842:	2e00      	cmp	r6, #0
 8005844:	d1eb      	bne.n	800581e <ai_layers_forward_all+0x22>
 8005846:	4638      	mov	r0, r7
 8005848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800584c:	2003      	movs	r0, #3
 800584e:	47c0      	blx	r8
 8005850:	2300      	movs	r3, #0
 8005852:	3701      	adds	r7, #1
 8005854:	63e3      	str	r3, [r4, #60]	; 0x3c
 8005856:	4638      	mov	r0, r7
 8005858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800585c:	2700      	movs	r7, #0
 800585e:	4638      	mov	r0, r7
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005864:	6b85      	ldr	r5, [r0, #56]	; 0x38
 8005866:	63c5      	str	r5, [r0, #60]	; 0x3c
 8005868:	2d00      	cmp	r5, #0
 800586a:	d0f7      	beq.n	800585c <ai_layers_forward_all+0x60>
 800586c:	4647      	mov	r7, r8
 800586e:	696b      	ldr	r3, [r5, #20]
 8005870:	4628      	mov	r0, r5
 8005872:	4798      	blx	r3
 8005874:	462b      	mov	r3, r5
 8005876:	692d      	ldr	r5, [r5, #16]
 8005878:	429d      	cmp	r5, r3
 800587a:	d004      	beq.n	8005886 <ai_layers_forward_all+0x8a>
 800587c:	63e5      	str	r5, [r4, #60]	; 0x3c
 800587e:	3701      	adds	r7, #1
 8005880:	2d00      	cmp	r5, #0
 8005882:	d1f4      	bne.n	800586e <ai_layers_forward_all+0x72>
 8005884:	e7df      	b.n	8005846 <ai_layers_forward_all+0x4a>
 8005886:	2300      	movs	r3, #0
 8005888:	63e3      	str	r3, [r4, #60]	; 0x3c
 800588a:	3701      	adds	r7, #1
 800588c:	e7db      	b.n	8005846 <ai_layers_forward_all+0x4a>
 800588e:	bf00      	nop

08005890 <forward_dense>:
 8005890:	6982      	ldr	r2, [r0, #24]
 8005892:	8813      	ldrh	r3, [r2, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d043      	beq.n	8005920 <forward_dense+0x90>
 8005898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800589c:	6855      	ldr	r5, [r2, #4]
 800589e:	6869      	ldr	r1, [r5, #4]
 80058a0:	b08e      	sub	sp, #56	; 0x38
 80058a2:	b101      	cbz	r1, 80058a6 <forward_dense+0x16>
 80058a4:	6809      	ldr	r1, [r1, #0]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d069      	beq.n	800597e <forward_dense+0xee>
 80058aa:	692a      	ldr	r2, [r5, #16]
 80058ac:	b102      	cbz	r2, 80058b0 <forward_dense+0x20>
 80058ae:	6812      	ldr	r2, [r2, #0]
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d061      	beq.n	8005978 <forward_dense+0xe8>
 80058b4:	69ec      	ldr	r4, [r5, #28]
 80058b6:	2c00      	cmp	r4, #0
 80058b8:	d057      	beq.n	800596a <forward_dense+0xda>
 80058ba:	8b2e      	ldrh	r6, [r5, #24]
 80058bc:	6820      	ldr	r0, [r4, #0]
 80058be:	2e01      	cmp	r6, #1
 80058c0:	d955      	bls.n	800596e <forward_dense+0xde>
 80058c2:	6864      	ldr	r4, [r4, #4]
 80058c4:	f8d0 9018 	ldr.w	r9, [r0, #24]
 80058c8:	68cf      	ldr	r7, [r1, #12]
 80058ca:	68d0      	ldr	r0, [r2, #12]
 80058cc:	f8d7 a004 	ldr.w	sl, [r7, #4]
 80058d0:	f8d0 e004 	ldr.w	lr, [r0, #4]
 80058d4:	e9d0 7602 	ldrd	r7, r6, [r0, #8]
 80058d8:	f8d9 0000 	ldr.w	r0, [r9]
 80058dc:	2b03      	cmp	r3, #3
 80058de:	fb06 f807 	mul.w	r8, r6, r7
 80058e2:	f020 4c7e 	bic.w	ip, r0, #4261412864	; 0xfe000000
 80058e6:	d044      	beq.n	8005972 <forward_dense+0xe2>
 80058e8:	6aad      	ldr	r5, [r5, #40]	; 0x28
 80058ea:	b11d      	cbz	r5, 80058f4 <forward_dense+0x64>
 80058ec:	682d      	ldr	r5, [r5, #0]
 80058ee:	b10d      	cbz	r5, 80058f4 <forward_dense+0x64>
 80058f0:	69ab      	ldr	r3, [r5, #24]
 80058f2:	689d      	ldr	r5, [r3, #8]
 80058f4:	6992      	ldr	r2, [r2, #24]
 80058f6:	698b      	ldr	r3, [r1, #24]
 80058f8:	6890      	ldr	r0, [r2, #8]
 80058fa:	6899      	ldr	r1, [r3, #8]
 80058fc:	b10c      	cbz	r4, 8005902 <forward_dense+0x72>
 80058fe:	69a3      	ldr	r3, [r4, #24]
 8005900:	689c      	ldr	r4, [r3, #8]
 8005902:	4b20      	ldr	r3, [pc, #128]	; (8005984 <forward_dense+0xf4>)
 8005904:	459c      	cmp	ip, r3
 8005906:	e9d9 2902 	ldrd	r2, r9, [r9, #8]
 800590a:	d023      	beq.n	8005954 <forward_dense+0xc4>
 800590c:	4e1e      	ldr	r6, [pc, #120]	; (8005988 <forward_dense+0xf8>)
 800590e:	45b4      	cmp	ip, r6
 8005910:	d015      	beq.n	800593e <forward_dense+0xae>
 8005912:	f5a3 039c 	sub.w	r3, r3, #5111808	; 0x4e0000
 8005916:	459c      	cmp	ip, r3
 8005918:	d004      	beq.n	8005924 <forward_dense+0x94>
 800591a:	b00e      	add	sp, #56	; 0x38
 800591c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	deff      	udf	#255	; 0xff
 8005924:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8005928:	a807      	add	r0, sp, #28
 800592a:	e9cd 4a0a 	strd	r4, sl, [sp, #40]	; 0x28
 800592e:	e9cd e80c 	strd	lr, r8, [sp, #48]	; 0x30
 8005932:	9209      	str	r2, [sp, #36]	; 0x24
 8005934:	f000 f9ca 	bl	8005ccc <forward_lite_dense_if32of32wf32>
 8005938:	b00e      	add	sp, #56	; 0x38
 800593a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800593e:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005942:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 8005946:	9500      	str	r5, [sp, #0]
 8005948:	464b      	mov	r3, r9
 800594a:	f000 fb19 	bl	8005f80 <forward_lite_dense_if32of32wf32_lut4>
 800594e:	b00e      	add	sp, #56	; 0x38
 8005950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005954:	e9cd e803 	strd	lr, r8, [sp, #12]
 8005958:	e9cd 4a01 	strd	r4, sl, [sp, #4]
 800595c:	9500      	str	r5, [sp, #0]
 800595e:	464b      	mov	r3, r9
 8005960:	f000 fc36 	bl	80061d0 <forward_lite_dense_if32of32wf32_lut8>
 8005964:	b00e      	add	sp, #56	; 0x38
 8005966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800596a:	4620      	mov	r0, r4
 800596c:	e7aa      	b.n	80058c4 <forward_dense+0x34>
 800596e:	2400      	movs	r4, #0
 8005970:	e7a8      	b.n	80058c4 <forward_dense+0x34>
 8005972:	2300      	movs	r3, #0
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	deff      	udf	#255	; 0xff
 8005978:	2300      	movs	r3, #0
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	deff      	udf	#255	; 0xff
 800597e:	2300      	movs	r3, #0
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	deff      	udf	#255	; 0xff
 8005984:	01d01040 	.word	0x01d01040
 8005988:	01e81040 	.word	0x01e81040

0800598c <forward_relu>:
 800598c:	6982      	ldr	r2, [r0, #24]
 800598e:	8813      	ldrh	r3, [r2, #0]
 8005990:	b323      	cbz	r3, 80059dc <forward_relu+0x50>
 8005992:	6851      	ldr	r1, [r2, #4]
 8005994:	684a      	ldr	r2, [r1, #4]
 8005996:	b102      	cbz	r2, 800599a <forward_relu+0xe>
 8005998:	6812      	ldr	r2, [r2, #0]
 800599a:	2b01      	cmp	r3, #1
 800599c:	f000 808d 	beq.w	8005aba <forward_relu+0x12e>
 80059a0:	b470      	push	{r4, r5, r6}
 80059a2:	6909      	ldr	r1, [r1, #16]
 80059a4:	b101      	cbz	r1, 80059a8 <forward_relu+0x1c>
 80059a6:	6809      	ldr	r1, [r1, #0]
 80059a8:	69c6      	ldr	r6, [r0, #28]
 80059aa:	b1ce      	cbz	r6, 80059e0 <forward_relu+0x54>
 80059ac:	6873      	ldr	r3, [r6, #4]
 80059ae:	6988      	ldr	r0, [r1, #24]
 80059b0:	6991      	ldr	r1, [r2, #24]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	d044      	beq.n	8005a40 <forward_relu+0xb4>
 80059b6:	6893      	ldr	r3, [r2, #8]
 80059b8:	6880      	ldr	r0, [r0, #8]
 80059ba:	6889      	ldr	r1, [r1, #8]
 80059bc:	0a1b      	lsrs	r3, r3, #8
 80059be:	d073      	beq.n	8005aa8 <forward_relu+0x11c>
 80059c0:	68d5      	ldr	r5, [r2, #12]
 80059c2:	2201      	movs	r2, #1
 80059c4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80059c8:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80059cc:	429d      	cmp	r5, r3
 80059ce:	fb04 f202 	mul.w	r2, r4, r2
 80059d2:	d1f9      	bne.n	80059c8 <forward_relu+0x3c>
 80059d4:	68b3      	ldr	r3, [r6, #8]
 80059d6:	bc70      	pop	{r4, r5, r6}
 80059d8:	f000 b8fa 	b.w	8005bd0 <forward_lite_nl_relu_generic_if32of32_kernel>
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	deff      	udf	#255	; 0xff
 80059e0:	6893      	ldr	r3, [r2, #8]
 80059e2:	6989      	ldr	r1, [r1, #24]
 80059e4:	6990      	ldr	r0, [r2, #24]
 80059e6:	6889      	ldr	r1, [r1, #8]
 80059e8:	6884      	ldr	r4, [r0, #8]
 80059ea:	0a1b      	lsrs	r3, r3, #8
 80059ec:	d05e      	beq.n	8005aac <forward_relu+0x120>
 80059ee:	68d5      	ldr	r5, [r2, #12]
 80059f0:	2201      	movs	r2, #1
 80059f2:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80059f6:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80059fa:	429d      	cmp	r5, r3
 80059fc:	fb00 f202 	mul.w	r2, r0, r2
 8005a00:	d1f9      	bne.n	80059f6 <forward_relu+0x6a>
 8005a02:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8005a06:	3b01      	subs	r3, #1
 8005a08:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8005a0c:	4294      	cmp	r4, r2
 8005a0e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8005a12:	d813      	bhi.n	8005a3c <forward_relu+0xb0>
 8005a14:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8005ac0 <forward_relu+0x134>
 8005a18:	3204      	adds	r2, #4
 8005a1a:	3104      	adds	r1, #4
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	ed72 7a01 	vldmdb	r2!, {s15}
 8005a22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005a26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a2a:	f1a3 0308 	sub.w	r3, r3, #8
 8005a2e:	bfb8      	it	lt
 8005a30:	eef0 7a47 	vmovlt.f32	s15, s14
 8005a34:	429c      	cmp	r4, r3
 8005a36:	ed61 7a01 	vstmdb	r1!, {s15}
 8005a3a:	d9ef      	bls.n	8005a1c <forward_relu+0x90>
 8005a3c:	bc70      	pop	{r4, r5, r6}
 8005a3e:	4770      	bx	lr
 8005a40:	688c      	ldr	r4, [r1, #8]
 8005a42:	6891      	ldr	r1, [r2, #8]
 8005a44:	6880      	ldr	r0, [r0, #8]
 8005a46:	0a09      	lsrs	r1, r1, #8
 8005a48:	d032      	beq.n	8005ab0 <forward_relu+0x124>
 8005a4a:	68d5      	ldr	r5, [r2, #12]
 8005a4c:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8005a50:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005a54:	4295      	cmp	r5, r2
 8005a56:	fb01 f303 	mul.w	r3, r1, r3
 8005a5a:	d1f9      	bne.n	8005a50 <forward_relu+0xc4>
 8005a5c:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 8005a60:	3a01      	subs	r2, #1
 8005a62:	68b1      	ldr	r1, [r6, #8]
 8005a64:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005a68:	429c      	cmp	r4, r3
 8005a6a:	ed91 7a00 	vldr	s14, [r1]
 8005a6e:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8005a72:	d8e3      	bhi.n	8005a3c <forward_relu+0xb0>
 8005a74:	2500      	movs	r5, #0
 8005a76:	3304      	adds	r3, #4
 8005a78:	1d02      	adds	r2, r0, #4
 8005a7a:	ed53 7a01 	vldr	s15, [r3, #-4]
 8005a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a86:	f1a3 0104 	sub.w	r1, r3, #4
 8005a8a:	f1a3 0308 	sub.w	r3, r3, #8
 8005a8e:	d405      	bmi.n	8005a9c <forward_relu+0x110>
 8005a90:	429c      	cmp	r4, r3
 8005a92:	f842 5d04 	str.w	r5, [r2, #-4]!
 8005a96:	d8d1      	bhi.n	8005a3c <forward_relu+0xb0>
 8005a98:	460b      	mov	r3, r1
 8005a9a:	e7ee      	b.n	8005a7a <forward_relu+0xee>
 8005a9c:	429c      	cmp	r4, r3
 8005a9e:	ed62 7a01 	vstmdb	r2!, {s15}
 8005aa2:	d8cb      	bhi.n	8005a3c <forward_relu+0xb0>
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	e7e8      	b.n	8005a7a <forward_relu+0xee>
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	e793      	b.n	80059d4 <forward_relu+0x48>
 8005aac:	4622      	mov	r2, r4
 8005aae:	e7b1      	b.n	8005a14 <forward_relu+0x88>
 8005ab0:	68b2      	ldr	r2, [r6, #8]
 8005ab2:	4623      	mov	r3, r4
 8005ab4:	ed92 7a00 	vldr	s14, [r2]
 8005ab8:	e7dc      	b.n	8005a74 <forward_relu+0xe8>
 8005aba:	2300      	movs	r3, #0
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	deff      	udf	#255	; 0xff
 8005ac0:	00000000 	.word	0x00000000

08005ac4 <forward_sm>:
 8005ac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac8:	6982      	ldr	r2, [r0, #24]
 8005aca:	8813      	ldrh	r3, [r2, #0]
 8005acc:	b383      	cbz	r3, 8005b30 <forward_sm+0x6c>
 8005ace:	6852      	ldr	r2, [r2, #4]
 8005ad0:	6855      	ldr	r5, [r2, #4]
 8005ad2:	b105      	cbz	r5, 8005ad6 <forward_sm+0x12>
 8005ad4:	682d      	ldr	r5, [r5, #0]
 8005ad6:	2b01      	cmp	r3, #1
 8005ad8:	d029      	beq.n	8005b2e <forward_sm+0x6a>
 8005ada:	6913      	ldr	r3, [r2, #16]
 8005adc:	b363      	cbz	r3, 8005b38 <forward_sm+0x74>
 8005ade:	681e      	ldr	r6, [r3, #0]
 8005ae0:	68a9      	ldr	r1, [r5, #8]
 8005ae2:	68ec      	ldr	r4, [r5, #12]
 8005ae4:	68f3      	ldr	r3, [r6, #12]
 8005ae6:	6867      	ldr	r7, [r4, #4]
 8005ae8:	685a      	ldr	r2, [r3, #4]
 8005aea:	0a09      	lsrs	r1, r1, #8
 8005aec:	d022      	beq.n	8005b34 <forward_sm+0x70>
 8005aee:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8005af2:	2301      	movs	r3, #1
 8005af4:	f851 0d04 	ldr.w	r0, [r1, #-4]!
 8005af8:	428c      	cmp	r4, r1
 8005afa:	fb00 f303 	mul.w	r3, r0, r3
 8005afe:	d1f9      	bne.n	8005af4 <forward_sm+0x30>
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	69a8      	ldr	r0, [r5, #24]
 8005b04:	69b1      	ldr	r1, [r6, #24]
 8005b06:	6884      	ldr	r4, [r0, #8]
 8005b08:	688e      	ldr	r6, [r1, #8]
 8005b0a:	18e5      	adds	r5, r4, r3
 8005b0c:	42ac      	cmp	r4, r5
 8005b0e:	d20c      	bcs.n	8005b2a <forward_sm+0x66>
 8005b10:	ea4f 0882 	mov.w	r8, r2, lsl #2
 8005b14:	ea4f 0987 	mov.w	r9, r7, lsl #2
 8005b18:	4621      	mov	r1, r4
 8005b1a:	4630      	mov	r0, r6
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	444c      	add	r4, r9
 8005b20:	f000 f80c 	bl	8005b3c <forward_lite_nl_softmax_if32of32_kernel>
 8005b24:	42a5      	cmp	r5, r4
 8005b26:	4446      	add	r6, r8
 8005b28:	d8f6      	bhi.n	8005b18 <forward_sm+0x54>
 8005b2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b2e:	2300      	movs	r3, #0
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	deff      	udf	#255	; 0xff
 8005b34:	2304      	movs	r3, #4
 8005b36:	e7e4      	b.n	8005b02 <forward_sm+0x3e>
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	deff      	udf	#255	; 0xff

08005b3c <forward_lite_nl_softmax_if32of32_kernel>:
 8005b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b40:	2a01      	cmp	r2, #1
 8005b42:	ed2d 8b02 	vpush	{d8}
 8005b46:	4617      	mov	r7, r2
 8005b48:	ed91 8a00 	vldr	s16, [r1]
 8005b4c:	d937      	bls.n	8005bbe <forward_lite_nl_softmax_if32of32_kernel+0x82>
 8005b4e:	1d0b      	adds	r3, r1, #4
 8005b50:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005b54:	ecf3 7a01 	vldmia	r3!, {s15}
 8005b58:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b60:	bfb8      	it	lt
 8005b62:	eeb0 8a67 	vmovlt.f32	s16, s15
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d1f4      	bne.n	8005b54 <forward_lite_nl_softmax_if32of32_kernel+0x18>
 8005b6a:	eddf 8a18 	vldr	s17, [pc, #96]	; 8005bcc <forward_lite_nl_softmax_if32of32_kernel+0x90>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	460d      	mov	r5, r1
 8005b72:	4680      	mov	r8, r0
 8005b74:	2400      	movs	r4, #0
 8005b76:	ecb5 0a01 	vldmia	r5!, {s0}
 8005b7a:	ee30 0a48 	vsub.f32	s0, s0, s16
 8005b7e:	f003 fc03 	bl	8009388 <expf>
 8005b82:	3401      	adds	r4, #1
 8005b84:	42a7      	cmp	r7, r4
 8005b86:	ee78 8a80 	vadd.f32	s17, s17, s0
 8005b8a:	eca8 0a01 	vstmia	r8!, {s0}
 8005b8e:	d8f2      	bhi.n	8005b76 <forward_lite_nl_softmax_if32of32_kernel+0x3a>
 8005b90:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d00d      	beq.n	8005bb6 <forward_lite_nl_softmax_if32of32_kernel+0x7a>
 8005b9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005b9e:	ee87 7aa8 	vdiv.f32	s14, s15, s17
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	429f      	cmp	r7, r3
 8005ba8:	edd6 7a00 	vldr	s15, [r6]
 8005bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005bb0:	ece6 7a01 	vstmia	r6!, {s15}
 8005bb4:	d8f6      	bhi.n	8005ba4 <forward_lite_nl_softmax_if32of32_kernel+0x68>
 8005bb6:	ecbd 8b02 	vpop	{d8}
 8005bba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	d1d3      	bne.n	8005b6a <forward_lite_nl_softmax_if32of32_kernel+0x2e>
 8005bc2:	ecbd 8b02 	vpop	{d8}
 8005bc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bca:	bf00      	nop
 8005bcc:	00000000 	.word	0x00000000

08005bd0 <forward_lite_nl_relu_generic_if32of32_kernel>:
 8005bd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8005bd4:	ed93 7a00 	vldr	s14, [r3]
 8005bd8:	ed93 6a01 	vldr	s12, [r3, #4]
 8005bdc:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8005be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005be4:	d42a      	bmi.n	8005c3c <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8005be6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005bea:	3a01      	subs	r2, #1
 8005bec:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005bf0:	4561      	cmp	r1, ip
 8005bf2:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005bf6:	d85d      	bhi.n	8005cb4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005bf8:	1d11      	adds	r1, r2, #4
 8005bfa:	f10c 0304 	add.w	r3, ip, #4
 8005bfe:	4408      	add	r0, r1
 8005c00:	ebac 0202 	sub.w	r2, ip, r2
 8005c04:	e00c      	b.n	8005c20 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0e:	ee77 5ac7 	vsub.f32	s11, s15, s14
 8005c12:	db01      	blt.n	8005c18 <forward_lite_nl_relu_generic_if32of32_kernel+0x48>
 8005c14:	ee65 7a86 	vmul.f32	s15, s11, s12
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	ed60 7a01 	vstmdb	r0!, {s15}
 8005c1e:	d00c      	beq.n	8005c3a <forward_lite_nl_relu_generic_if32of32_kernel+0x6a>
 8005c20:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c24:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c2c:	daeb      	bge.n	8005c06 <forward_lite_nl_relu_generic_if32of32_kernel+0x36>
 8005c2e:	eef0 7a66 	vmov.f32	s15, s13
 8005c32:	4293      	cmp	r3, r2
 8005c34:	ed60 7a01 	vstmdb	r0!, {s15}
 8005c38:	d1f2      	bne.n	8005c20 <forward_lite_nl_relu_generic_if32of32_kernel+0x50>
 8005c3a:	4770      	bx	lr
 8005c3c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8005c40:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8005c44:	3a01      	subs	r2, #1
 8005c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c4a:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005c4e:	ea4f 0282 	mov.w	r2, r2, lsl #2
 8005c52:	d017      	beq.n	8005c84 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 8005c54:	4561      	cmp	r1, ip
 8005c56:	d82d      	bhi.n	8005cb4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005c58:	1d11      	adds	r1, r2, #4
 8005c5a:	f10c 0304 	add.w	r3, ip, #4
 8005c5e:	4401      	add	r1, r0
 8005c60:	ebac 0202 	sub.w	r2, ip, r2
 8005c64:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c68:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c74:	ee66 6a86 	vmul.f32	s13, s13, s12
 8005c78:	d81d      	bhi.n	8005cb6 <forward_lite_nl_relu_generic_if32of32_kernel+0xe6>
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	ed61 6a01 	vstmdb	r1!, {s13}
 8005c80:	d1f0      	bne.n	8005c64 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8005c82:	4770      	bx	lr
 8005c84:	4561      	cmp	r1, ip
 8005c86:	d815      	bhi.n	8005cb4 <forward_lite_nl_relu_generic_if32of32_kernel+0xe4>
 8005c88:	1d11      	adds	r1, r2, #4
 8005c8a:	b500      	push	{lr}
 8005c8c:	f10c 0304 	add.w	r3, ip, #4
 8005c90:	f04f 0e00 	mov.w	lr, #0
 8005c94:	4401      	add	r1, r0
 8005c96:	ebac 0202 	sub.w	r2, ip, r2
 8005c9a:	ed73 7a01 	vldmdb	r3!, {s15}
 8005c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca6:	d40b      	bmi.n	8005cc0 <forward_lite_nl_relu_generic_if32of32_kernel+0xf0>
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	f841 ed04 	str.w	lr, [r1, #-4]!
 8005cae:	d1f4      	bne.n	8005c9a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8005cb0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005cb4:	4770      	bx	lr
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	ed61 7a01 	vstmdb	r1!, {s15}
 8005cbc:	d1d2      	bne.n	8005c64 <forward_lite_nl_relu_generic_if32of32_kernel+0x94>
 8005cbe:	4770      	bx	lr
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	ed61 7a01 	vstmdb	r1!, {s15}
 8005cc6:	d1e8      	bne.n	8005c9a <forward_lite_nl_relu_generic_if32of32_kernel+0xca>
 8005cc8:	e7f2      	b.n	8005cb0 <forward_lite_nl_relu_generic_if32of32_kernel+0xe0>
 8005cca:	bf00      	nop

08005ccc <forward_lite_dense_if32of32wf32>:
 8005ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd0:	e9d0 2305 	ldrd	r2, r3, [r0, #20]
 8005cd4:	6801      	ldr	r1, [r0, #0]
 8005cd6:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8005cda:	fb02 f303 	mul.w	r3, r2, r3
 8005cde:	b083      	sub	sp, #12
 8005ce0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005ce4:	4299      	cmp	r1, r3
 8005ce6:	9100      	str	r1, [sp, #0]
 8005ce8:	9301      	str	r3, [sp, #4]
 8005cea:	f080 811e 	bcs.w	8005f2a <forward_lite_dense_if32of32wf32+0x25e>
 8005cee:	6904      	ldr	r4, [r0, #16]
 8005cf0:	4607      	mov	r7, r0
 8005cf2:	0096      	lsls	r6, r2, #2
 8005cf4:	9b00      	ldr	r3, [sp, #0]
 8005cf6:	68bd      	ldr	r5, [r7, #8]
 8005cf8:	eb03 0e06 	add.w	lr, r3, r6
 8005cfc:	459e      	cmp	lr, r3
 8005cfe:	461e      	mov	r6, r3
 8005d00:	f240 8104 	bls.w	8005f0c <forward_lite_dense_if32of32wf32+0x240>
 8005d04:	f1a4 0c10 	sub.w	ip, r4, #16
 8005d08:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
 8005d0c:	f10c 0c01 	add.w	ip, ip, #1
 8005d10:	ea4f 1b8c 	mov.w	fp, ip, lsl #6
 8005d14:	ea4f 0984 	mov.w	r9, r4, lsl #2
 8005d18:	eb08 1c8c 	add.w	ip, r8, ip, lsl #6
 8005d1c:	2c0f      	cmp	r4, #15
 8005d1e:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8005f7c <forward_lite_dense_if32of32wf32+0x2b0>
 8005d22:	f240 8105 	bls.w	8005f30 <forward_lite_dense_if32of32wf32+0x264>
 8005d26:	f108 0240 	add.w	r2, r8, #64	; 0x40
 8005d2a:	f105 0340 	add.w	r3, r5, #64	; 0x40
 8005d2e:	4621      	mov	r1, r4
 8005d30:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8005d34:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8005d38:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8005d3c:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8005d40:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8005d44:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8005d48:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8005d4c:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8005d50:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8005d54:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8005d58:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8005d5c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8005d60:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8005d64:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8005d68:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8005d6c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005d70:	3910      	subs	r1, #16
 8005d72:	290f      	cmp	r1, #15
 8005d74:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8005d78:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8005d7c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005d80:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8005d84:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8005d88:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8005d8c:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8005d90:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8005d94:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8005d98:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8005d9c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005da0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8005da4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8005da8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005dac:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8005db0:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8005db4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005db8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8005dbc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8005dc0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005dc4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8005dc8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8005dcc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005dd0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8005dd4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8005dd8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ddc:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8005de0:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8005de4:	eee1 7a21 	vfma.f32	s15, s2, s3
 8005de8:	eee2 7a22 	vfma.f32	s15, s4, s5
 8005dec:	eee3 7a23 	vfma.f32	s15, s6, s7
 8005df0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8005df4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005df8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005dfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e00:	d896      	bhi.n	8005d30 <forward_lite_dense_if32of32wf32+0x64>
 8005e02:	eb05 020b 	add.w	r2, r5, fp
 8005e06:	f004 010f 	and.w	r1, r4, #15
 8005e0a:	4663      	mov	r3, ip
 8005e0c:	2903      	cmp	r1, #3
 8005e0e:	d95f      	bls.n	8005ed0 <forward_lite_dense_if32of32wf32+0x204>
 8005e10:	edd2 6a01 	vldr	s13, [r2, #4]
 8005e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8005e18:	ed93 6a00 	vldr	s12, [r3]
 8005e1c:	ed93 5a02 	vldr	s10, [r3, #8]
 8005e20:	edd2 5a02 	vldr	s11, [r2, #8]
 8005e24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e28:	edd2 6a00 	vldr	s13, [r2]
 8005e2c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e30:	1f08      	subs	r0, r1, #4
 8005e32:	2803      	cmp	r0, #3
 8005e34:	ed93 6a03 	vldr	s12, [r3, #12]
 8005e38:	edd2 6a03 	vldr	s13, [r2, #12]
 8005e3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e40:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e44:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e48:	eeb0 7a67 	vmov.f32	s14, s15
 8005e4c:	d938      	bls.n	8005ec0 <forward_lite_dense_if32of32wf32+0x1f4>
 8005e4e:	edd2 6a05 	vldr	s13, [r2, #20]
 8005e52:	edd3 7a05 	vldr	s15, [r3, #20]
 8005e56:	ed93 6a04 	vldr	s12, [r3, #16]
 8005e5a:	ed93 5a06 	vldr	s10, [r3, #24]
 8005e5e:	edd2 5a06 	vldr	s11, [r2, #24]
 8005e62:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005e66:	edd2 6a04 	vldr	s13, [r2, #16]
 8005e6a:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e6e:	f1a1 0a08 	sub.w	sl, r1, #8
 8005e72:	f1ba 0f03 	cmp.w	sl, #3
 8005e76:	ed93 6a07 	vldr	s12, [r3, #28]
 8005e7a:	edd2 6a07 	vldr	s13, [r2, #28]
 8005e7e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005e82:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005e86:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005e8a:	d919      	bls.n	8005ec0 <forward_lite_dense_if32of32wf32+0x1f4>
 8005e8c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8005e90:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8005e94:	ed92 6a08 	vldr	s12, [r2, #32]
 8005e98:	ed92 5a0a 	vldr	s10, [r2, #40]	; 0x28
 8005e9c:	edd3 5a0a 	vldr	s11, [r3, #40]	; 0x28
 8005ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005ea4:	edd3 6a08 	vldr	s13, [r3, #32]
 8005ea8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005eac:	ed92 6a0b 	vldr	s12, [r2, #44]	; 0x2c
 8005eb0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8005eb4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8005eb8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8005ebc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ec0:	0880      	lsrs	r0, r0, #2
 8005ec2:	3001      	adds	r0, #1
 8005ec4:	eb02 1200 	add.w	r2, r2, r0, lsl #4
 8005ec8:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8005ecc:	f001 0103 	and.w	r1, r1, #3
 8005ed0:	b1a9      	cbz	r1, 8005efe <forward_lite_dense_if32of32wf32+0x232>
 8005ed2:	edd3 6a00 	vldr	s13, [r3]
 8005ed6:	edd2 7a00 	vldr	s15, [r2]
 8005eda:	3901      	subs	r1, #1
 8005edc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ee0:	d00d      	beq.n	8005efe <forward_lite_dense_if32of32wf32+0x232>
 8005ee2:	edd3 6a01 	vldr	s13, [r3, #4]
 8005ee6:	edd2 7a01 	vldr	s15, [r2, #4]
 8005eea:	2901      	cmp	r1, #1
 8005eec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ef0:	d005      	beq.n	8005efe <forward_lite_dense_if32of32wf32+0x232>
 8005ef2:	edd2 6a02 	vldr	s13, [r2, #8]
 8005ef6:	edd3 7a02 	vldr	s15, [r3, #8]
 8005efa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005efe:	444d      	add	r5, r9
 8005f00:	eca6 7a01 	vstmia	r6!, {s14}
 8005f04:	45b6      	cmp	lr, r6
 8005f06:	f63f af09 	bhi.w	8005d1c <forward_lite_dense_if32of32wf32+0x50>
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	b99b      	cbnz	r3, 8005f38 <forward_lite_dense_if32of32wf32+0x26c>
 8005f10:	9b00      	ldr	r3, [sp, #0]
 8005f12:	9901      	ldr	r1, [sp, #4]
 8005f14:	693c      	ldr	r4, [r7, #16]
 8005f16:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005f1a:	4299      	cmp	r1, r3
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8005f22:	ea4f 0682 	mov.w	r6, r2, lsl #2
 8005f26:	f63f aee5 	bhi.w	8005cf4 <forward_lite_dense_if32of32wf32+0x28>
 8005f2a:	b003      	add	sp, #12
 8005f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f30:	4621      	mov	r1, r4
 8005f32:	462a      	mov	r2, r5
 8005f34:	4643      	mov	r3, r8
 8005f36:	e769      	b.n	8005e0c <forward_lite_dense_if32of32wf32+0x140>
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	d0e9      	beq.n	8005f10 <forward_lite_dense_if32of32wf32+0x244>
 8005f3c:	9a00      	ldr	r2, [sp, #0]
 8005f3e:	ed93 7a00 	vldr	s14, [r3]
 8005f42:	edd2 7a00 	vldr	s15, [r2]
 8005f46:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f4a:	4613      	mov	r3, r2
 8005f4c:	edc2 7a00 	vstr	s15, [r2]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	2a01      	cmp	r2, #1
 8005f54:	d9dc      	bls.n	8005f10 <forward_lite_dense_if32of32wf32+0x244>
 8005f56:	1d19      	adds	r1, r3, #4
 8005f58:	2301      	movs	r3, #1
 8005f5a:	68fa      	ldr	r2, [r7, #12]
 8005f5c:	ed91 7a00 	vldr	s14, [r1]
 8005f60:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005f64:	edd2 7a00 	vldr	s15, [r2]
 8005f68:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	ece1 7a01 	vstmia	r1!, {s15}
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	429a      	cmp	r2, r3
 8005f76:	d8f0      	bhi.n	8005f5a <forward_lite_dense_if32of32wf32+0x28e>
 8005f78:	e7ca      	b.n	8005f10 <forward_lite_dense_if32of32wf32+0x244>
 8005f7a:	bf00      	nop
 8005f7c:	00000000 	.word	0x00000000

08005f80 <forward_lite_dense_if32of32wf32_lut4>:
 8005f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f84:	b08d      	sub	sp, #52	; 0x34
 8005f86:	4605      	mov	r5, r0
 8005f88:	9005      	str	r0, [sp, #20]
 8005f8a:	920a      	str	r2, [sp, #40]	; 0x28
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	; 0x64
 8005f92:	9e16      	ldr	r6, [sp, #88]	; 0x58
 8005f94:	fb02 f303 	mul.w	r3, r2, r3
 8005f98:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8005f9c:	460c      	mov	r4, r1
 8005f9e:	9d18      	ldr	r5, [sp, #96]	; 0x60
 8005fa0:	9308      	str	r3, [sp, #32]
 8005fa2:	b126      	cbz	r6, 8005fae <forward_lite_dense_if32of32wf32_lut4+0x2e>
 8005fa4:	2240      	movs	r2, #64	; 0x40
 8005fa6:	4631      	mov	r1, r6
 8005fa8:	f000 fa40 	bl	800642c <st_int8_copy>
 8005fac:	4630      	mov	r0, r6
 8005fae:	9b05      	ldr	r3, [sp, #20]
 8005fb0:	9a08      	ldr	r2, [sp, #32]
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f080 80f5 	bcs.w	80061a2 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8005fb8:	08eb      	lsrs	r3, r5, #3
 8005fba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	f005 0101 	and.w	r1, r5, #1
 8005fc2:	eb04 1a43 	add.w	sl, r4, r3, lsl #5
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	0092      	lsls	r2, r2, #2
 8005fca:	f025 0801 	bic.w	r8, r5, #1
 8005fce:	9102      	str	r1, [sp, #8]
 8005fd0:	9304      	str	r3, [sp, #16]
 8005fd2:	00a9      	lsls	r1, r5, #2
 8005fd4:	9b05      	ldr	r3, [sp, #20]
 8005fd6:	9207      	str	r2, [sp, #28]
 8005fd8:	eb04 0888 	add.w	r8, r4, r8, lsl #2
 8005fdc:	9109      	str	r1, [sp, #36]	; 0x24
 8005fde:	f104 0b20 	add.w	fp, r4, #32
 8005fe2:	920b      	str	r2, [sp, #44]	; 0x2c
 8005fe4:	9a07      	ldr	r2, [sp, #28]
 8005fe6:	eb03 0902 	add.w	r9, r3, r2
 8005fea:	4599      	cmp	r9, r3
 8005fec:	f1ab 0220 	sub.w	r2, fp, #32
 8005ff0:	9206      	str	r2, [sp, #24]
 8005ff2:	f240 80d9 	bls.w	80061a8 <forward_lite_dense_if32of32wf32_lut4+0x228>
 8005ff6:	469e      	mov	lr, r3
 8005ff8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005ffa:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
 8005ffe:	9303      	str	r3, [sp, #12]
 8006000:	9b01      	ldr	r3, [sp, #4]
 8006002:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80061cc <forward_lite_dense_if32of32wf32_lut4+0x24c>
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 80b2 	beq.w	8006170 <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 800600c:	9b04      	ldr	r3, [sp, #16]
 800600e:	18d5      	adds	r5, r2, r3
 8006010:	465b      	mov	r3, fp
 8006012:	7814      	ldrb	r4, [r2, #0]
 8006014:	ed53 2a07 	vldr	s5, [r3, #-28]	; 0xffffffe4
 8006018:	7851      	ldrb	r1, [r2, #1]
 800601a:	ed53 3a08 	vldr	s7, [r3, #-32]	; 0xffffffe0
 800601e:	ed13 4a06 	vldr	s8, [r3, #-24]	; 0xffffffe8
 8006022:	ed53 4a05 	vldr	s9, [r3, #-20]	; 0xffffffec
 8006026:	ed13 5a04 	vldr	s10, [r3, #-16]
 800602a:	ed53 5a03 	vldr	s11, [r3, #-12]
 800602e:	ed13 6a02 	vldr	s12, [r3, #-8]
 8006032:	ed53 6a01 	vldr	s13, [r3, #-4]
 8006036:	f004 060f 	and.w	r6, r4, #15
 800603a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800603e:	edd6 7a00 	vldr	s15, [r6]
 8006042:	0924      	lsrs	r4, r4, #4
 8006044:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8006048:	ed94 3a00 	vldr	s6, [r4]
 800604c:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8006050:	090c      	lsrs	r4, r1, #4
 8006052:	eee3 7a23 	vfma.f32	s15, s6, s7
 8006056:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800605a:	f001 010f 	and.w	r1, r1, #15
 800605e:	edd4 3a00 	vldr	s7, [r4]
 8006062:	7894      	ldrb	r4, [r2, #2]
 8006064:	eee3 7a84 	vfma.f32	s15, s7, s8
 8006068:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800606c:	0926      	lsrs	r6, r4, #4
 800606e:	ed91 4a00 	vldr	s8, [r1]
 8006072:	78d1      	ldrb	r1, [r2, #3]
 8006074:	eee4 7a24 	vfma.f32	s15, s8, s9
 8006078:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800607c:	f004 040f 	and.w	r4, r4, #15
 8006080:	edd6 4a00 	vldr	s9, [r6]
 8006084:	eee4 7a85 	vfma.f32	s15, s9, s10
 8006088:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800608c:	3204      	adds	r2, #4
 800608e:	ed94 5a00 	vldr	s10, [r4]
 8006092:	090c      	lsrs	r4, r1, #4
 8006094:	eee5 7a25 	vfma.f32	s15, s10, s11
 8006098:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 800609c:	f001 010f 	and.w	r1, r1, #15
 80060a0:	edd4 5a00 	vldr	s11, [r4]
 80060a4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80060a8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060ac:	42aa      	cmp	r2, r5
 80060ae:	ed91 6a00 	vldr	s12, [r1]
 80060b2:	eee6 7a26 	vfma.f32	s15, s12, s13
 80060b6:	f103 0320 	add.w	r3, r3, #32
 80060ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80060be:	d1a8      	bne.n	8006012 <forward_lite_dense_if32of32wf32_lut4+0x92>
 80060c0:	4656      	mov	r6, sl
 80060c2:	4546      	cmp	r6, r8
 80060c4:	d258      	bcs.n	8006178 <forward_lite_dense_if32of32wf32_lut4+0x1f8>
 80060c6:	9b03      	ldr	r3, [sp, #12]
 80060c8:	1b9c      	subs	r4, r3, r6
 80060ca:	08e7      	lsrs	r7, r4, #3
 80060cc:	f106 0208 	add.w	r2, r6, #8
 80060d0:	1e69      	subs	r1, r5, #1
 80060d2:	eb05 04d4 	add.w	r4, r5, r4, lsr #3
 80060d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80060da:	ed52 5a01 	vldr	s11, [r2, #-4]
 80060de:	ed52 6a02 	vldr	s13, [r2, #-8]
 80060e2:	f003 0c0f 	and.w	ip, r3, #15
 80060e6:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 80060ea:	eddc 7a00 	vldr	s15, [ip]
 80060ee:	091b      	lsrs	r3, r3, #4
 80060f0:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 80060f4:	ed93 6a00 	vldr	s12, [r3]
 80060f8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80060fc:	42a1      	cmp	r1, r4
 80060fe:	eee6 7a26 	vfma.f32	s15, s12, s13
 8006102:	f102 0208 	add.w	r2, r2, #8
 8006106:	ee37 7a27 	vadd.f32	s14, s14, s15
 800610a:	d1e4      	bne.n	80060d6 <forward_lite_dense_if32of32wf32_lut4+0x156>
 800610c:	3701      	adds	r7, #1
 800610e:	19ea      	adds	r2, r5, r7
 8006110:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
 8006114:	9b02      	ldr	r3, [sp, #8]
 8006116:	b30b      	cbz	r3, 800615c <forward_lite_dense_if32of32wf32_lut4+0x1dc>
 8006118:	f812 3b01 	ldrb.w	r3, [r2], #1
 800611c:	edd6 7a00 	vldr	s15, [r6]
 8006120:	091b      	lsrs	r3, r3, #4
 8006122:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8006126:	edd3 6a00 	vldr	s13, [r3]
 800612a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800612e:	ecae 7a01 	vstmia	lr!, {s14}
 8006132:	45f1      	cmp	r9, lr
 8006134:	f63f af64 	bhi.w	8006000 <forward_lite_dense_if32of32wf32_lut4+0x80>
 8006138:	9b05      	ldr	r3, [sp, #20]
 800613a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800613c:	1899      	adds	r1, r3, r2
 800613e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006140:	b9e3      	cbnz	r3, 800617c <forward_lite_dense_if32of32wf32_lut4+0x1fc>
 8006142:	9b08      	ldr	r3, [sp, #32]
 8006144:	428b      	cmp	r3, r1
 8006146:	d92c      	bls.n	80061a2 <forward_lite_dense_if32of32wf32_lut4+0x222>
 8006148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800614a:	4498      	add	r8, r3
 800614c:	449a      	add	sl, r3
 800614e:	449b      	add	fp, r3
 8006150:	9b05      	ldr	r3, [sp, #20]
 8006152:	4599      	cmp	r9, r3
 8006154:	d92a      	bls.n	80061ac <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8006156:	9105      	str	r1, [sp, #20]
 8006158:	460b      	mov	r3, r1
 800615a:	e743      	b.n	8005fe4 <forward_lite_dense_if32of32wf32_lut4+0x64>
 800615c:	ecae 7a01 	vstmia	lr!, {s14}
 8006160:	45f1      	cmp	r9, lr
 8006162:	d9e9      	bls.n	8006138 <forward_lite_dense_if32of32wf32_lut4+0x1b8>
 8006164:	9b01      	ldr	r3, [sp, #4]
 8006166:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80061cc <forward_lite_dense_if32of32wf32_lut4+0x24c>
 800616a:	2b00      	cmp	r3, #0
 800616c:	f47f af4e 	bne.w	800600c <forward_lite_dense_if32of32wf32_lut4+0x8c>
 8006170:	9e06      	ldr	r6, [sp, #24]
 8006172:	4546      	cmp	r6, r8
 8006174:	4615      	mov	r5, r2
 8006176:	d3a6      	bcc.n	80060c6 <forward_lite_dense_if32of32wf32_lut4+0x146>
 8006178:	462a      	mov	r2, r5
 800617a:	e7cb      	b.n	8006114 <forward_lite_dense_if32of32wf32_lut4+0x194>
 800617c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800617e:	2b00      	cmp	r3, #0
 8006180:	d0df      	beq.n	8006142 <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8006182:	9b07      	ldr	r3, [sp, #28]
 8006184:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8006186:	1acb      	subs	r3, r1, r3
 8006188:	edd3 7a00 	vldr	s15, [r3]
 800618c:	ecb2 7a01 	vldmia	r2!, {s14}
 8006190:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006194:	ece3 7a01 	vstmia	r3!, {s15}
 8006198:	428b      	cmp	r3, r1
 800619a:	d1f5      	bne.n	8006188 <forward_lite_dense_if32of32wf32_lut4+0x208>
 800619c:	9b08      	ldr	r3, [sp, #32]
 800619e:	428b      	cmp	r3, r1
 80061a0:	d8d2      	bhi.n	8006148 <forward_lite_dense_if32of32wf32_lut4+0x1c8>
 80061a2:	b00d      	add	sp, #52	; 0x34
 80061a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061a8:	4619      	mov	r1, r3
 80061aa:	e7c8      	b.n	800613e <forward_lite_dense_if32of32wf32_lut4+0x1be>
 80061ac:	9b07      	ldr	r3, [sp, #28]
 80061ae:	1acb      	subs	r3, r1, r3
 80061b0:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80061b2:	461a      	mov	r2, r3
 80061b4:	ed92 7a00 	vldr	s14, [r2]
 80061b8:	ecf0 7a01 	vldmia	r0!, {s15}
 80061bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061c0:	ece2 7a01 	vstmia	r2!, {s15}
 80061c4:	428a      	cmp	r2, r1
 80061c6:	d1f5      	bne.n	80061b4 <forward_lite_dense_if32of32wf32_lut4+0x234>
 80061c8:	e7f2      	b.n	80061b0 <forward_lite_dense_if32of32wf32_lut4+0x230>
 80061ca:	bf00      	nop
 80061cc:	00000000 	.word	0x00000000

080061d0 <forward_lite_dense_if32of32wf32_lut8>:
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	b087      	sub	sp, #28
 80061d6:	460f      	mov	r7, r1
 80061d8:	9204      	str	r2, [sp, #16]
 80061da:	e9dd 1213 	ldrd	r1, r2, [sp, #76]	; 0x4c
 80061de:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80061e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80061e2:	fb01 f202 	mul.w	r2, r1, r2
 80061e6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80061ea:	4605      	mov	r5, r0
 80061ec:	9202      	str	r2, [sp, #8]
 80061ee:	b136      	cbz	r6, 80061fe <forward_lite_dense_if32of32wf32_lut8+0x2e>
 80061f0:	4618      	mov	r0, r3
 80061f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061f6:	4631      	mov	r1, r6
 80061f8:	f000 f918 	bl	800642c <st_int8_copy>
 80061fc:	4633      	mov	r3, r6
 80061fe:	9a02      	ldr	r2, [sp, #8]
 8006200:	4295      	cmp	r5, r2
 8006202:	f080 80f9 	bcs.w	80063f8 <forward_lite_dense_if32of32wf32_lut8+0x228>
 8006206:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006208:	0092      	lsls	r2, r2, #2
 800620a:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 800620e:	9201      	str	r2, [sp, #4]
 8006210:	9205      	str	r2, [sp, #20]
 8006212:	462a      	mov	r2, r5
 8006214:	eb07 1849 	add.w	r8, r7, r9, lsl #5
 8006218:	ea4f 0ac9 	mov.w	sl, r9, lsl #3
 800621c:	464d      	mov	r5, r9
 800621e:	4691      	mov	r9, r2
 8006220:	9a01      	ldr	r2, [sp, #4]
 8006222:	eb09 0e02 	add.w	lr, r9, r2
 8006226:	00a1      	lsls	r1, r4, #2
 8006228:	3720      	adds	r7, #32
 800622a:	45ce      	cmp	lr, r9
 800622c:	f004 0007 	and.w	r0, r4, #7
 8006230:	9103      	str	r1, [sp, #12]
 8006232:	f1a7 0b20 	sub.w	fp, r7, #32
 8006236:	f240 80c8 	bls.w	80063ca <forward_lite_dense_if32of32wf32_lut8+0x1fa>
 800623a:	9a04      	ldr	r2, [sp, #16]
 800623c:	46cc      	mov	ip, r9
 800623e:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 8006428 <forward_lite_dense_if32of32wf32_lut8+0x258>
 8006242:	2d00      	cmp	r5, #0
 8006244:	f000 80dd 	beq.w	8006402 <forward_lite_dense_if32of32wf32_lut8+0x232>
 8006248:	eb02 060a 	add.w	r6, r2, sl
 800624c:	4639      	mov	r1, r7
 800624e:	7854      	ldrb	r4, [r2, #1]
 8006250:	ed11 3a07 	vldr	s6, [r1, #-28]	; 0xffffffe4
 8006254:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8006258:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 800625c:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8006260:	ed11 5a04 	vldr	s10, [r1, #-16]
 8006264:	ed51 5a03 	vldr	s11, [r1, #-12]
 8006268:	ed11 6a02 	vldr	s12, [r1, #-8]
 800626c:	ed51 6a01 	vldr	s13, [r1, #-4]
 8006270:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006274:	edd4 7a00 	vldr	s15, [r4]
 8006278:	7814      	ldrb	r4, [r2, #0]
 800627a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800627e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8006282:	ed94 3a00 	vldr	s6, [r4]
 8006286:	7894      	ldrb	r4, [r2, #2]
 8006288:	eee3 7a23 	vfma.f32	s15, s6, s7
 800628c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006290:	3208      	adds	r2, #8
 8006292:	edd4 3a00 	vldr	s7, [r4]
 8006296:	f812 4c05 	ldrb.w	r4, [r2, #-5]
 800629a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800629e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062a2:	3120      	adds	r1, #32
 80062a4:	ed94 4a00 	vldr	s8, [r4]
 80062a8:	f812 4c04 	ldrb.w	r4, [r2, #-4]
 80062ac:	eee4 7a24 	vfma.f32	s15, s8, s9
 80062b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062b4:	edd4 4a00 	vldr	s9, [r4]
 80062b8:	f812 4c03 	ldrb.w	r4, [r2, #-3]
 80062bc:	eee4 7a85 	vfma.f32	s15, s9, s10
 80062c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062c4:	ed94 5a00 	vldr	s10, [r4]
 80062c8:	f812 4c02 	ldrb.w	r4, [r2, #-2]
 80062cc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80062d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062d4:	edd4 5a00 	vldr	s11, [r4]
 80062d8:	f812 4c01 	ldrb.w	r4, [r2, #-1]
 80062dc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80062e0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80062e4:	42b2      	cmp	r2, r6
 80062e6:	ed94 6a00 	vldr	s12, [r4]
 80062ea:	eee6 7a26 	vfma.f32	s15, s12, s13
 80062ee:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062f2:	d1ac      	bne.n	800624e <forward_lite_dense_if32of32wf32_lut8+0x7e>
 80062f4:	4642      	mov	r2, r8
 80062f6:	2800      	cmp	r0, #0
 80062f8:	f000 8081 	beq.w	80063fe <forward_lite_dense_if32of32wf32_lut8+0x22e>
 80062fc:	7831      	ldrb	r1, [r6, #0]
 80062fe:	edd2 7a00 	vldr	s15, [r2]
 8006302:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006306:	edd1 6a00 	vldr	s13, [r1]
 800630a:	2801      	cmp	r0, #1
 800630c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006310:	d03f      	beq.n	8006392 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006312:	7871      	ldrb	r1, [r6, #1]
 8006314:	edd2 7a01 	vldr	s15, [r2, #4]
 8006318:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800631c:	edd1 6a00 	vldr	s13, [r1]
 8006320:	2802      	cmp	r0, #2
 8006322:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006326:	d034      	beq.n	8006392 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006328:	78b1      	ldrb	r1, [r6, #2]
 800632a:	edd2 7a02 	vldr	s15, [r2, #8]
 800632e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006332:	edd1 6a00 	vldr	s13, [r1]
 8006336:	2803      	cmp	r0, #3
 8006338:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800633c:	d029      	beq.n	8006392 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800633e:	78f1      	ldrb	r1, [r6, #3]
 8006340:	edd2 6a03 	vldr	s13, [r2, #12]
 8006344:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006348:	edd1 7a00 	vldr	s15, [r1]
 800634c:	2804      	cmp	r0, #4
 800634e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006352:	d01e      	beq.n	8006392 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006354:	7931      	ldrb	r1, [r6, #4]
 8006356:	edd2 6a04 	vldr	s13, [r2, #16]
 800635a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800635e:	edd1 7a00 	vldr	s15, [r1]
 8006362:	2805      	cmp	r0, #5
 8006364:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006368:	d013      	beq.n	8006392 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 800636a:	7971      	ldrb	r1, [r6, #5]
 800636c:	edd2 6a05 	vldr	s13, [r2, #20]
 8006370:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8006374:	edd1 7a00 	vldr	s15, [r1]
 8006378:	2806      	cmp	r0, #6
 800637a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800637e:	d008      	beq.n	8006392 <forward_lite_dense_if32of32wf32_lut8+0x1c2>
 8006380:	edd2 7a06 	vldr	s15, [r2, #24]
 8006384:	79b2      	ldrb	r2, [r6, #6]
 8006386:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800638a:	edd2 6a00 	vldr	s13, [r2]
 800638e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006392:	1832      	adds	r2, r6, r0
 8006394:	ecac 7a01 	vstmia	ip!, {s14}
 8006398:	45e6      	cmp	lr, ip
 800639a:	f63f af50 	bhi.w	800623e <forward_lite_dense_if32of32wf32_lut8+0x6e>
 800639e:	9a05      	ldr	r2, [sp, #20]
 80063a0:	eb09 0402 	add.w	r4, r9, r2
 80063a4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063a6:	b9a2      	cbnz	r2, 80063d2 <forward_lite_dense_if32of32wf32_lut8+0x202>
 80063a8:	9a02      	ldr	r2, [sp, #8]
 80063aa:	42a2      	cmp	r2, r4
 80063ac:	d924      	bls.n	80063f8 <forward_lite_dense_if32of32wf32_lut8+0x228>
 80063ae:	9a03      	ldr	r2, [sp, #12]
 80063b0:	45ce      	cmp	lr, r9
 80063b2:	4490      	add	r8, r2
 80063b4:	4417      	add	r7, r2
 80063b6:	d927      	bls.n	8006408 <forward_lite_dense_if32of32wf32_lut8+0x238>
 80063b8:	9a01      	ldr	r2, [sp, #4]
 80063ba:	46a1      	mov	r9, r4
 80063bc:	eb09 0e02 	add.w	lr, r9, r2
 80063c0:	45ce      	cmp	lr, r9
 80063c2:	f1a7 0b20 	sub.w	fp, r7, #32
 80063c6:	f63f af38 	bhi.w	800623a <forward_lite_dense_if32of32wf32_lut8+0x6a>
 80063ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80063cc:	464c      	mov	r4, r9
 80063ce:	2a00      	cmp	r2, #0
 80063d0:	d0ea      	beq.n	80063a8 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 80063d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80063d4:	2a00      	cmp	r2, #0
 80063d6:	d0e7      	beq.n	80063a8 <forward_lite_dense_if32of32wf32_lut8+0x1d8>
 80063d8:	9a01      	ldr	r2, [sp, #4]
 80063da:	9911      	ldr	r1, [sp, #68]	; 0x44
 80063dc:	1aa2      	subs	r2, r4, r2
 80063de:	edd2 7a00 	vldr	s15, [r2]
 80063e2:	ecb1 7a01 	vldmia	r1!, {s14}
 80063e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80063ea:	ece2 7a01 	vstmia	r2!, {s15}
 80063ee:	4294      	cmp	r4, r2
 80063f0:	d1f5      	bne.n	80063de <forward_lite_dense_if32of32wf32_lut8+0x20e>
 80063f2:	9a02      	ldr	r2, [sp, #8]
 80063f4:	42a2      	cmp	r2, r4
 80063f6:	d8da      	bhi.n	80063ae <forward_lite_dense_if32of32wf32_lut8+0x1de>
 80063f8:	b007      	add	sp, #28
 80063fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fe:	4632      	mov	r2, r6
 8006400:	e7c8      	b.n	8006394 <forward_lite_dense_if32of32wf32_lut8+0x1c4>
 8006402:	4616      	mov	r6, r2
 8006404:	465a      	mov	r2, fp
 8006406:	e776      	b.n	80062f6 <forward_lite_dense_if32of32wf32_lut8+0x126>
 8006408:	9b01      	ldr	r3, [sp, #4]
 800640a:	1ae3      	subs	r3, r4, r3
 800640c:	9911      	ldr	r1, [sp, #68]	; 0x44
 800640e:	461a      	mov	r2, r3
 8006410:	ed92 7a00 	vldr	s14, [r2]
 8006414:	ecf1 7a01 	vldmia	r1!, {s15}
 8006418:	ee77 7a87 	vadd.f32	s15, s15, s14
 800641c:	ece2 7a01 	vstmia	r2!, {s15}
 8006420:	42a2      	cmp	r2, r4
 8006422:	d1f5      	bne.n	8006410 <forward_lite_dense_if32of32wf32_lut8+0x240>
 8006424:	e7f2      	b.n	800640c <forward_lite_dense_if32of32wf32_lut8+0x23c>
 8006426:	bf00      	nop
 8006428:	00000000 	.word	0x00000000

0800642c <st_int8_copy>:
 800642c:	4288      	cmp	r0, r1
 800642e:	d056      	beq.n	80064de <st_int8_copy+0xb2>
 8006430:	2a00      	cmp	r2, #0
 8006432:	d054      	beq.n	80064de <st_int8_copy+0xb2>
 8006434:	4288      	cmp	r0, r1
 8006436:	d353      	bcc.n	80064e0 <st_int8_copy+0xb4>
 8006438:	078b      	lsls	r3, r1, #30
 800643a:	d102      	bne.n	8006442 <st_int8_copy+0x16>
 800643c:	e009      	b.n	8006452 <st_int8_copy+0x26>
 800643e:	2a00      	cmp	r2, #0
 8006440:	d05b      	beq.n	80064fa <st_int8_copy+0xce>
 8006442:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8006446:	f801 3b01 	strb.w	r3, [r1], #1
 800644a:	078b      	lsls	r3, r1, #30
 800644c:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8006450:	d1f5      	bne.n	800643e <st_int8_copy+0x12>
 8006452:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006456:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800645a:	d068      	beq.n	800652e <st_int8_copy+0x102>
 800645c:	ea40 0301 	orr.w	r3, r0, r1
 8006460:	075b      	lsls	r3, r3, #29
 8006462:	d14b      	bne.n	80064fc <st_int8_copy+0xd0>
 8006464:	f1be 0f01 	cmp.w	lr, #1
 8006468:	d048      	beq.n	80064fc <st_int8_copy+0xd0>
 800646a:	f100 0310 	add.w	r3, r0, #16
 800646e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006472:	f101 0c10 	add.w	ip, r1, #16
 8006476:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800647a:	ed13 6b04 	vldr	d6, [r3, #-16]
 800647e:	ed13 7b02 	vldr	d7, [r3, #-8]
 8006482:	3310      	adds	r3, #16
 8006484:	4573      	cmp	r3, lr
 8006486:	ed0c 6b04 	vstr	d6, [ip, #-16]
 800648a:	ed0c 7b02 	vstr	d7, [ip, #-8]
 800648e:	f10c 0c10 	add.w	ip, ip, #16
 8006492:	d1f2      	bne.n	800647a <st_int8_copy+0x4e>
 8006494:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8006498:	4421      	add	r1, r4
 800649a:	4420      	add	r0, r4
 800649c:	f002 0203 	and.w	r2, r2, #3
 80064a0:	b16b      	cbz	r3, 80064be <st_int8_copy+0x92>
 80064a2:	6804      	ldr	r4, [r0, #0]
 80064a4:	600c      	str	r4, [r1, #0]
 80064a6:	1e5c      	subs	r4, r3, #1
 80064a8:	d005      	beq.n	80064b6 <st_int8_copy+0x8a>
 80064aa:	6845      	ldr	r5, [r0, #4]
 80064ac:	604d      	str	r5, [r1, #4]
 80064ae:	2c01      	cmp	r4, #1
 80064b0:	bf1c      	itt	ne
 80064b2:	6884      	ldrne	r4, [r0, #8]
 80064b4:	608c      	strne	r4, [r1, #8]
 80064b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80064ba:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80064be:	b162      	cbz	r2, 80064da <st_int8_copy+0xae>
 80064c0:	f990 3000 	ldrsb.w	r3, [r0]
 80064c4:	700b      	strb	r3, [r1, #0]
 80064c6:	3a01      	subs	r2, #1
 80064c8:	d007      	beq.n	80064da <st_int8_copy+0xae>
 80064ca:	f990 3001 	ldrsb.w	r3, [r0, #1]
 80064ce:	704b      	strb	r3, [r1, #1]
 80064d0:	2a01      	cmp	r2, #1
 80064d2:	bf1c      	itt	ne
 80064d4:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 80064d8:	708b      	strbne	r3, [r1, #2]
 80064da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064de:	4770      	bx	lr
 80064e0:	1883      	adds	r3, r0, r2
 80064e2:	428b      	cmp	r3, r1
 80064e4:	d9a8      	bls.n	8006438 <st_int8_copy+0xc>
 80064e6:	4283      	cmp	r3, r0
 80064e8:	440a      	add	r2, r1
 80064ea:	d9f8      	bls.n	80064de <st_int8_copy+0xb2>
 80064ec:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80064f0:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80064f4:	4283      	cmp	r3, r0
 80064f6:	d1f9      	bne.n	80064ec <st_int8_copy+0xc0>
 80064f8:	4770      	bx	lr
 80064fa:	4770      	bx	lr
 80064fc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8006500:	460b      	mov	r3, r1
 8006502:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8006506:	4684      	mov	ip, r0
 8006508:	f8dc 7000 	ldr.w	r7, [ip]
 800650c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8006510:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8006514:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8006518:	f8c3 800c 	str.w	r8, [r3, #12]
 800651c:	601f      	str	r7, [r3, #0]
 800651e:	605e      	str	r6, [r3, #4]
 8006520:	609d      	str	r5, [r3, #8]
 8006522:	3310      	adds	r3, #16
 8006524:	459e      	cmp	lr, r3
 8006526:	f10c 0c10 	add.w	ip, ip, #16
 800652a:	d1ed      	bne.n	8006508 <st_int8_copy+0xdc>
 800652c:	e7b2      	b.n	8006494 <st_int8_copy+0x68>
 800652e:	0893      	lsrs	r3, r2, #2
 8006530:	f002 0203 	and.w	r2, r2, #3
 8006534:	e7b4      	b.n	80064a0 <st_int8_copy+0x74>
 8006536:	bf00      	nop

08006538 <ai_array_to_buffer_fmt>:
 8006538:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800653c:	2b02      	cmp	r3, #2
 800653e:	d053      	beq.n	80065e8 <ai_array_to_buffer_fmt+0xb0>
 8006540:	4a2c      	ldr	r2, [pc, #176]	; (80065f4 <ai_array_to_buffer_fmt+0xbc>)
 8006542:	f020 437e 	bic.w	r3, r0, #4261412864	; 0xfe000000
 8006546:	4293      	cmp	r3, r2
 8006548:	d010      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 800654a:	dc21      	bgt.n	8006590 <ai_array_to_buffer_fmt+0x58>
 800654c:	4a2a      	ldr	r2, [pc, #168]	; (80065f8 <ai_array_to_buffer_fmt+0xc0>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00c      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 8006552:	dd0f      	ble.n	8006574 <ai_array_to_buffer_fmt+0x3c>
 8006554:	4a29      	ldr	r2, [pc, #164]	; (80065fc <ai_array_to_buffer_fmt+0xc4>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d008      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 800655a:	f502 32fa 	add.w	r2, r2, #128000	; 0x1f400
 800655e:	4293      	cmp	r3, r2
 8006560:	d004      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 8006562:	4a27      	ldr	r2, [pc, #156]	; (8006600 <ai_array_to_buffer_fmt+0xc8>)
 8006564:	4293      	cmp	r3, r2
 8006566:	bf0c      	ite	eq
 8006568:	4613      	moveq	r3, r2
 800656a:	2340      	movne	r3, #64	; 0x40
 800656c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006570:	4318      	orrs	r0, r3
 8006572:	4770      	bx	lr
 8006574:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006578:	4293      	cmp	r3, r2
 800657a:	d0f7      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 800657c:	dd2a      	ble.n	80065d4 <ai_array_to_buffer_fmt+0x9c>
 800657e:	4a21      	ldr	r2, [pc, #132]	; (8006604 <ai_array_to_buffer_fmt+0xcc>)
 8006580:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8006584:	4293      	cmp	r3, r2
 8006586:	bf0c      	ite	eq
 8006588:	4613      	moveq	r3, r2
 800658a:	2340      	movne	r3, #64	; 0x40
 800658c:	4318      	orrs	r0, r3
 800658e:	4770      	bx	lr
 8006590:	4a1d      	ldr	r2, [pc, #116]	; (8006608 <ai_array_to_buffer_fmt+0xd0>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d0ea      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 8006596:	dd0f      	ble.n	80065b8 <ai_array_to_buffer_fmt+0x80>
 8006598:	4a1c      	ldr	r2, [pc, #112]	; (800660c <ai_array_to_buffer_fmt+0xd4>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d0e6      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 800659e:	f502 027e 	add.w	r2, r2, #16646144	; 0xfe0000
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d0e2      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 80065a6:	4a1a      	ldr	r2, [pc, #104]	; (8006610 <ai_array_to_buffer_fmt+0xd8>)
 80065a8:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80065ac:	4293      	cmp	r3, r2
 80065ae:	bf0c      	ite	eq
 80065b0:	4613      	moveq	r3, r2
 80065b2:	2340      	movne	r3, #64	; 0x40
 80065b4:	4318      	orrs	r0, r3
 80065b6:	4770      	bx	lr
 80065b8:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80065bc:	4293      	cmp	r3, r2
 80065be:	d0d5      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 80065c0:	3207      	adds	r2, #7
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d0d2      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 80065c6:	f2a2 3287 	subw	r2, r2, #903	; 0x387
 80065ca:	4293      	cmp	r3, r2
 80065cc:	bf0c      	ite	eq
 80065ce:	4613      	moveq	r3, r2
 80065d0:	2340      	movne	r3, #64	; 0x40
 80065d2:	e7cb      	b.n	800656c <ai_array_to_buffer_fmt+0x34>
 80065d4:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80065d8:	4293      	cmp	r3, r2
 80065da:	d0c7      	beq.n	800656c <ai_array_to_buffer_fmt+0x34>
 80065dc:	3280      	adds	r2, #128	; 0x80
 80065de:	4293      	cmp	r3, r2
 80065e0:	bf0c      	ite	eq
 80065e2:	4613      	moveq	r3, r2
 80065e4:	2340      	movne	r3, #64	; 0x40
 80065e6:	e7c1      	b.n	800656c <ai_array_to_buffer_fmt+0x34>
 80065e8:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <ai_array_to_buffer_fmt+0xdc>)
 80065ea:	4003      	ands	r3, r0
 80065ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065f0:	e7bc      	b.n	800656c <ai_array_to_buffer_fmt+0x34>
 80065f2:	bf00      	nop
 80065f4:	00840040 	.word	0x00840040
 80065f8:	00040840 	.word	0x00040840
 80065fc:	00041040 	.word	0x00041040
 8006600:	0004084f 	.word	0x0004084f
 8006604:	00040447 	.word	0x00040447
 8006608:	00840840 	.word	0x00840840
 800660c:	00841040 	.word	0x00841040
 8006610:	0084084f 	.word	0x0084084f
 8006614:	00803fff 	.word	0x00803fff

08006618 <ai_array_get_data_byte_size>:
 8006618:	b169      	cbz	r1, 8006636 <ai_array_get_data_byte_size+0x1e>
 800661a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800661e:	fb03 f101 	mul.w	r1, r3, r1
 8006622:	1dcb      	adds	r3, r1, #7
 8006624:	f023 0307 	bic.w	r3, r3, #7
 8006628:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800662c:	fa23 f000 	lsr.w	r0, r3, r0
 8006630:	3007      	adds	r0, #7
 8006632:	08c0      	lsrs	r0, r0, #3
 8006634:	4770      	bx	lr
 8006636:	4608      	mov	r0, r1
 8006638:	4770      	bx	lr
 800663a:	bf00      	nop

0800663c <ai_version_get>:
 800663c:	0212      	lsls	r2, r2, #8
 800663e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006642:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8006646:	4770      	bx	lr

08006648 <get_tensor_byte_size>:
 8006648:	b410      	push	{r4}
 800664a:	6983      	ldr	r3, [r0, #24]
 800664c:	68c4      	ldr	r4, [r0, #12]
 800664e:	6941      	ldr	r1, [r0, #20]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	68e0      	ldr	r0, [r4, #12]
 8006654:	4a07      	ldr	r2, [pc, #28]	; (8006674 <get_tensor_byte_size+0x2c>)
 8006656:	68c9      	ldr	r1, [r1, #12]
 8006658:	f85d 4b04 	ldr.w	r4, [sp], #4
 800665c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8006660:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006664:	fb01 f000 	mul.w	r0, r1, r0
 8006668:	4293      	cmp	r3, r2
 800666a:	bf04      	itt	eq
 800666c:	3007      	addeq	r0, #7
 800666e:	08c0      	lsreq	r0, r0, #3
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	000400c0 	.word	0x000400c0

08006678 <malloc>:
 8006678:	4b02      	ldr	r3, [pc, #8]	; (8006684 <malloc+0xc>)
 800667a:	4601      	mov	r1, r0
 800667c:	6818      	ldr	r0, [r3, #0]
 800667e:	f000 b823 	b.w	80066c8 <_malloc_r>
 8006682:	bf00      	nop
 8006684:	200007ac 	.word	0x200007ac

08006688 <sbrk_aligned>:
 8006688:	b570      	push	{r4, r5, r6, lr}
 800668a:	4e0e      	ldr	r6, [pc, #56]	; (80066c4 <sbrk_aligned+0x3c>)
 800668c:	460c      	mov	r4, r1
 800668e:	6831      	ldr	r1, [r6, #0]
 8006690:	4605      	mov	r5, r0
 8006692:	b911      	cbnz	r1, 800669a <sbrk_aligned+0x12>
 8006694:	f000 fea0 	bl	80073d8 <_sbrk_r>
 8006698:	6030      	str	r0, [r6, #0]
 800669a:	4621      	mov	r1, r4
 800669c:	4628      	mov	r0, r5
 800669e:	f000 fe9b 	bl	80073d8 <_sbrk_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	d00a      	beq.n	80066bc <sbrk_aligned+0x34>
 80066a6:	1cc4      	adds	r4, r0, #3
 80066a8:	f024 0403 	bic.w	r4, r4, #3
 80066ac:	42a0      	cmp	r0, r4
 80066ae:	d007      	beq.n	80066c0 <sbrk_aligned+0x38>
 80066b0:	1a21      	subs	r1, r4, r0
 80066b2:	4628      	mov	r0, r5
 80066b4:	f000 fe90 	bl	80073d8 <_sbrk_r>
 80066b8:	3001      	adds	r0, #1
 80066ba:	d101      	bne.n	80066c0 <sbrk_aligned+0x38>
 80066bc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80066c0:	4620      	mov	r0, r4
 80066c2:	bd70      	pop	{r4, r5, r6, pc}
 80066c4:	20000b24 	.word	0x20000b24

080066c8 <_malloc_r>:
 80066c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066cc:	1ccd      	adds	r5, r1, #3
 80066ce:	f025 0503 	bic.w	r5, r5, #3
 80066d2:	3508      	adds	r5, #8
 80066d4:	2d0c      	cmp	r5, #12
 80066d6:	bf38      	it	cc
 80066d8:	250c      	movcc	r5, #12
 80066da:	2d00      	cmp	r5, #0
 80066dc:	4607      	mov	r7, r0
 80066de:	db01      	blt.n	80066e4 <_malloc_r+0x1c>
 80066e0:	42a9      	cmp	r1, r5
 80066e2:	d905      	bls.n	80066f0 <_malloc_r+0x28>
 80066e4:	230c      	movs	r3, #12
 80066e6:	603b      	str	r3, [r7, #0]
 80066e8:	2600      	movs	r6, #0
 80066ea:	4630      	mov	r0, r6
 80066ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066f0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067c4 <_malloc_r+0xfc>
 80066f4:	f000 f868 	bl	80067c8 <__malloc_lock>
 80066f8:	f8d8 3000 	ldr.w	r3, [r8]
 80066fc:	461c      	mov	r4, r3
 80066fe:	bb5c      	cbnz	r4, 8006758 <_malloc_r+0x90>
 8006700:	4629      	mov	r1, r5
 8006702:	4638      	mov	r0, r7
 8006704:	f7ff ffc0 	bl	8006688 <sbrk_aligned>
 8006708:	1c43      	adds	r3, r0, #1
 800670a:	4604      	mov	r4, r0
 800670c:	d155      	bne.n	80067ba <_malloc_r+0xf2>
 800670e:	f8d8 4000 	ldr.w	r4, [r8]
 8006712:	4626      	mov	r6, r4
 8006714:	2e00      	cmp	r6, #0
 8006716:	d145      	bne.n	80067a4 <_malloc_r+0xdc>
 8006718:	2c00      	cmp	r4, #0
 800671a:	d048      	beq.n	80067ae <_malloc_r+0xe6>
 800671c:	6823      	ldr	r3, [r4, #0]
 800671e:	4631      	mov	r1, r6
 8006720:	4638      	mov	r0, r7
 8006722:	eb04 0903 	add.w	r9, r4, r3
 8006726:	f000 fe57 	bl	80073d8 <_sbrk_r>
 800672a:	4581      	cmp	r9, r0
 800672c:	d13f      	bne.n	80067ae <_malloc_r+0xe6>
 800672e:	6821      	ldr	r1, [r4, #0]
 8006730:	1a6d      	subs	r5, r5, r1
 8006732:	4629      	mov	r1, r5
 8006734:	4638      	mov	r0, r7
 8006736:	f7ff ffa7 	bl	8006688 <sbrk_aligned>
 800673a:	3001      	adds	r0, #1
 800673c:	d037      	beq.n	80067ae <_malloc_r+0xe6>
 800673e:	6823      	ldr	r3, [r4, #0]
 8006740:	442b      	add	r3, r5
 8006742:	6023      	str	r3, [r4, #0]
 8006744:	f8d8 3000 	ldr.w	r3, [r8]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d038      	beq.n	80067be <_malloc_r+0xf6>
 800674c:	685a      	ldr	r2, [r3, #4]
 800674e:	42a2      	cmp	r2, r4
 8006750:	d12b      	bne.n	80067aa <_malloc_r+0xe2>
 8006752:	2200      	movs	r2, #0
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	e00f      	b.n	8006778 <_malloc_r+0xb0>
 8006758:	6822      	ldr	r2, [r4, #0]
 800675a:	1b52      	subs	r2, r2, r5
 800675c:	d41f      	bmi.n	800679e <_malloc_r+0xd6>
 800675e:	2a0b      	cmp	r2, #11
 8006760:	d917      	bls.n	8006792 <_malloc_r+0xca>
 8006762:	1961      	adds	r1, r4, r5
 8006764:	42a3      	cmp	r3, r4
 8006766:	6025      	str	r5, [r4, #0]
 8006768:	bf18      	it	ne
 800676a:	6059      	strne	r1, [r3, #4]
 800676c:	6863      	ldr	r3, [r4, #4]
 800676e:	bf08      	it	eq
 8006770:	f8c8 1000 	streq.w	r1, [r8]
 8006774:	5162      	str	r2, [r4, r5]
 8006776:	604b      	str	r3, [r1, #4]
 8006778:	4638      	mov	r0, r7
 800677a:	f104 060b 	add.w	r6, r4, #11
 800677e:	f000 f829 	bl	80067d4 <__malloc_unlock>
 8006782:	f026 0607 	bic.w	r6, r6, #7
 8006786:	1d23      	adds	r3, r4, #4
 8006788:	1af2      	subs	r2, r6, r3
 800678a:	d0ae      	beq.n	80066ea <_malloc_r+0x22>
 800678c:	1b9b      	subs	r3, r3, r6
 800678e:	50a3      	str	r3, [r4, r2]
 8006790:	e7ab      	b.n	80066ea <_malloc_r+0x22>
 8006792:	42a3      	cmp	r3, r4
 8006794:	6862      	ldr	r2, [r4, #4]
 8006796:	d1dd      	bne.n	8006754 <_malloc_r+0x8c>
 8006798:	f8c8 2000 	str.w	r2, [r8]
 800679c:	e7ec      	b.n	8006778 <_malloc_r+0xb0>
 800679e:	4623      	mov	r3, r4
 80067a0:	6864      	ldr	r4, [r4, #4]
 80067a2:	e7ac      	b.n	80066fe <_malloc_r+0x36>
 80067a4:	4634      	mov	r4, r6
 80067a6:	6876      	ldr	r6, [r6, #4]
 80067a8:	e7b4      	b.n	8006714 <_malloc_r+0x4c>
 80067aa:	4613      	mov	r3, r2
 80067ac:	e7cc      	b.n	8006748 <_malloc_r+0x80>
 80067ae:	230c      	movs	r3, #12
 80067b0:	603b      	str	r3, [r7, #0]
 80067b2:	4638      	mov	r0, r7
 80067b4:	f000 f80e 	bl	80067d4 <__malloc_unlock>
 80067b8:	e797      	b.n	80066ea <_malloc_r+0x22>
 80067ba:	6025      	str	r5, [r4, #0]
 80067bc:	e7dc      	b.n	8006778 <_malloc_r+0xb0>
 80067be:	605b      	str	r3, [r3, #4]
 80067c0:	deff      	udf	#255	; 0xff
 80067c2:	bf00      	nop
 80067c4:	20000b20 	.word	0x20000b20

080067c8 <__malloc_lock>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__malloc_lock+0x8>)
 80067ca:	f000 be52 	b.w	8007472 <__retarget_lock_acquire_recursive>
 80067ce:	bf00      	nop
 80067d0:	20000c68 	.word	0x20000c68

080067d4 <__malloc_unlock>:
 80067d4:	4801      	ldr	r0, [pc, #4]	; (80067dc <__malloc_unlock+0x8>)
 80067d6:	f000 be4d 	b.w	8007474 <__retarget_lock_release_recursive>
 80067da:	bf00      	nop
 80067dc:	20000c68 	.word	0x20000c68

080067e0 <_realloc_r>:
 80067e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067e4:	4680      	mov	r8, r0
 80067e6:	4614      	mov	r4, r2
 80067e8:	460e      	mov	r6, r1
 80067ea:	b921      	cbnz	r1, 80067f6 <_realloc_r+0x16>
 80067ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067f0:	4611      	mov	r1, r2
 80067f2:	f7ff bf69 	b.w	80066c8 <_malloc_r>
 80067f6:	b92a      	cbnz	r2, 8006804 <_realloc_r+0x24>
 80067f8:	f001 fcc8 	bl	800818c <_free_r>
 80067fc:	4625      	mov	r5, r4
 80067fe:	4628      	mov	r0, r5
 8006800:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006804:	f002 f88a 	bl	800891c <_malloc_usable_size_r>
 8006808:	4284      	cmp	r4, r0
 800680a:	4607      	mov	r7, r0
 800680c:	d802      	bhi.n	8006814 <_realloc_r+0x34>
 800680e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006812:	d812      	bhi.n	800683a <_realloc_r+0x5a>
 8006814:	4621      	mov	r1, r4
 8006816:	4640      	mov	r0, r8
 8006818:	f7ff ff56 	bl	80066c8 <_malloc_r>
 800681c:	4605      	mov	r5, r0
 800681e:	2800      	cmp	r0, #0
 8006820:	d0ed      	beq.n	80067fe <_realloc_r+0x1e>
 8006822:	42bc      	cmp	r4, r7
 8006824:	4622      	mov	r2, r4
 8006826:	4631      	mov	r1, r6
 8006828:	bf28      	it	cs
 800682a:	463a      	movcs	r2, r7
 800682c:	f000 fe23 	bl	8007476 <memcpy>
 8006830:	4631      	mov	r1, r6
 8006832:	4640      	mov	r0, r8
 8006834:	f001 fcaa 	bl	800818c <_free_r>
 8006838:	e7e1      	b.n	80067fe <_realloc_r+0x1e>
 800683a:	4635      	mov	r5, r6
 800683c:	e7df      	b.n	80067fe <_realloc_r+0x1e>

0800683e <__cvt>:
 800683e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006842:	ec55 4b10 	vmov	r4, r5, d0
 8006846:	2d00      	cmp	r5, #0
 8006848:	460e      	mov	r6, r1
 800684a:	4619      	mov	r1, r3
 800684c:	462b      	mov	r3, r5
 800684e:	bfbb      	ittet	lt
 8006850:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006854:	461d      	movlt	r5, r3
 8006856:	2300      	movge	r3, #0
 8006858:	232d      	movlt	r3, #45	; 0x2d
 800685a:	700b      	strb	r3, [r1, #0]
 800685c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800685e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006862:	4691      	mov	r9, r2
 8006864:	f023 0820 	bic.w	r8, r3, #32
 8006868:	bfbc      	itt	lt
 800686a:	4622      	movlt	r2, r4
 800686c:	4614      	movlt	r4, r2
 800686e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006872:	d005      	beq.n	8006880 <__cvt+0x42>
 8006874:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006878:	d100      	bne.n	800687c <__cvt+0x3e>
 800687a:	3601      	adds	r6, #1
 800687c:	2102      	movs	r1, #2
 800687e:	e000      	b.n	8006882 <__cvt+0x44>
 8006880:	2103      	movs	r1, #3
 8006882:	ab03      	add	r3, sp, #12
 8006884:	9301      	str	r3, [sp, #4]
 8006886:	ab02      	add	r3, sp, #8
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	ec45 4b10 	vmov	d0, r4, r5
 800688e:	4653      	mov	r3, sl
 8006890:	4632      	mov	r2, r6
 8006892:	f000 fe89 	bl	80075a8 <_dtoa_r>
 8006896:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800689a:	4607      	mov	r7, r0
 800689c:	d102      	bne.n	80068a4 <__cvt+0x66>
 800689e:	f019 0f01 	tst.w	r9, #1
 80068a2:	d022      	beq.n	80068ea <__cvt+0xac>
 80068a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80068a8:	eb07 0906 	add.w	r9, r7, r6
 80068ac:	d110      	bne.n	80068d0 <__cvt+0x92>
 80068ae:	783b      	ldrb	r3, [r7, #0]
 80068b0:	2b30      	cmp	r3, #48	; 0x30
 80068b2:	d10a      	bne.n	80068ca <__cvt+0x8c>
 80068b4:	2200      	movs	r2, #0
 80068b6:	2300      	movs	r3, #0
 80068b8:	4620      	mov	r0, r4
 80068ba:	4629      	mov	r1, r5
 80068bc:	f7fa f904 	bl	8000ac8 <__aeabi_dcmpeq>
 80068c0:	b918      	cbnz	r0, 80068ca <__cvt+0x8c>
 80068c2:	f1c6 0601 	rsb	r6, r6, #1
 80068c6:	f8ca 6000 	str.w	r6, [sl]
 80068ca:	f8da 3000 	ldr.w	r3, [sl]
 80068ce:	4499      	add	r9, r3
 80068d0:	2200      	movs	r2, #0
 80068d2:	2300      	movs	r3, #0
 80068d4:	4620      	mov	r0, r4
 80068d6:	4629      	mov	r1, r5
 80068d8:	f7fa f8f6 	bl	8000ac8 <__aeabi_dcmpeq>
 80068dc:	b108      	cbz	r0, 80068e2 <__cvt+0xa4>
 80068de:	f8cd 900c 	str.w	r9, [sp, #12]
 80068e2:	2230      	movs	r2, #48	; 0x30
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	454b      	cmp	r3, r9
 80068e8:	d307      	bcc.n	80068fa <__cvt+0xbc>
 80068ea:	9b03      	ldr	r3, [sp, #12]
 80068ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80068ee:	1bdb      	subs	r3, r3, r7
 80068f0:	4638      	mov	r0, r7
 80068f2:	6013      	str	r3, [r2, #0]
 80068f4:	b004      	add	sp, #16
 80068f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068fa:	1c59      	adds	r1, r3, #1
 80068fc:	9103      	str	r1, [sp, #12]
 80068fe:	701a      	strb	r2, [r3, #0]
 8006900:	e7f0      	b.n	80068e4 <__cvt+0xa6>

08006902 <__exponent>:
 8006902:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006904:	4603      	mov	r3, r0
 8006906:	2900      	cmp	r1, #0
 8006908:	bfb8      	it	lt
 800690a:	4249      	neglt	r1, r1
 800690c:	f803 2b02 	strb.w	r2, [r3], #2
 8006910:	bfb4      	ite	lt
 8006912:	222d      	movlt	r2, #45	; 0x2d
 8006914:	222b      	movge	r2, #43	; 0x2b
 8006916:	2909      	cmp	r1, #9
 8006918:	7042      	strb	r2, [r0, #1]
 800691a:	dd2a      	ble.n	8006972 <__exponent+0x70>
 800691c:	f10d 0207 	add.w	r2, sp, #7
 8006920:	4617      	mov	r7, r2
 8006922:	260a      	movs	r6, #10
 8006924:	4694      	mov	ip, r2
 8006926:	fb91 f5f6 	sdiv	r5, r1, r6
 800692a:	fb06 1415 	mls	r4, r6, r5, r1
 800692e:	3430      	adds	r4, #48	; 0x30
 8006930:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8006934:	460c      	mov	r4, r1
 8006936:	2c63      	cmp	r4, #99	; 0x63
 8006938:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800693c:	4629      	mov	r1, r5
 800693e:	dcf1      	bgt.n	8006924 <__exponent+0x22>
 8006940:	3130      	adds	r1, #48	; 0x30
 8006942:	f1ac 0402 	sub.w	r4, ip, #2
 8006946:	f802 1c01 	strb.w	r1, [r2, #-1]
 800694a:	1c41      	adds	r1, r0, #1
 800694c:	4622      	mov	r2, r4
 800694e:	42ba      	cmp	r2, r7
 8006950:	d30a      	bcc.n	8006968 <__exponent+0x66>
 8006952:	f10d 0209 	add.w	r2, sp, #9
 8006956:	eba2 020c 	sub.w	r2, r2, ip
 800695a:	42bc      	cmp	r4, r7
 800695c:	bf88      	it	hi
 800695e:	2200      	movhi	r2, #0
 8006960:	4413      	add	r3, r2
 8006962:	1a18      	subs	r0, r3, r0
 8006964:	b003      	add	sp, #12
 8006966:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006968:	f812 5b01 	ldrb.w	r5, [r2], #1
 800696c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8006970:	e7ed      	b.n	800694e <__exponent+0x4c>
 8006972:	2330      	movs	r3, #48	; 0x30
 8006974:	3130      	adds	r1, #48	; 0x30
 8006976:	7083      	strb	r3, [r0, #2]
 8006978:	70c1      	strb	r1, [r0, #3]
 800697a:	1d03      	adds	r3, r0, #4
 800697c:	e7f1      	b.n	8006962 <__exponent+0x60>
	...

08006980 <_printf_float>:
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006984:	ed2d 8b02 	vpush	{d8}
 8006988:	b08d      	sub	sp, #52	; 0x34
 800698a:	460c      	mov	r4, r1
 800698c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006990:	4616      	mov	r6, r2
 8006992:	461f      	mov	r7, r3
 8006994:	4605      	mov	r5, r0
 8006996:	f000 fce7 	bl	8007368 <_localeconv_r>
 800699a:	f8d0 a000 	ldr.w	sl, [r0]
 800699e:	4650      	mov	r0, sl
 80069a0:	f7f9 fc66 	bl	8000270 <strlen>
 80069a4:	2300      	movs	r3, #0
 80069a6:	930a      	str	r3, [sp, #40]	; 0x28
 80069a8:	6823      	ldr	r3, [r4, #0]
 80069aa:	9305      	str	r3, [sp, #20]
 80069ac:	f8d8 3000 	ldr.w	r3, [r8]
 80069b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80069b4:	3307      	adds	r3, #7
 80069b6:	f023 0307 	bic.w	r3, r3, #7
 80069ba:	f103 0208 	add.w	r2, r3, #8
 80069be:	f8c8 2000 	str.w	r2, [r8]
 80069c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80069c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80069ca:	9307      	str	r3, [sp, #28]
 80069cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80069d0:	ee08 0a10 	vmov	s16, r0
 80069d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80069d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069dc:	4b9e      	ldr	r3, [pc, #632]	; (8006c58 <_printf_float+0x2d8>)
 80069de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069e2:	f7fa f8a3 	bl	8000b2c <__aeabi_dcmpun>
 80069e6:	bb88      	cbnz	r0, 8006a4c <_printf_float+0xcc>
 80069e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ec:	4b9a      	ldr	r3, [pc, #616]	; (8006c58 <_printf_float+0x2d8>)
 80069ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069f2:	f7fa f87d 	bl	8000af0 <__aeabi_dcmple>
 80069f6:	bb48      	cbnz	r0, 8006a4c <_printf_float+0xcc>
 80069f8:	2200      	movs	r2, #0
 80069fa:	2300      	movs	r3, #0
 80069fc:	4640      	mov	r0, r8
 80069fe:	4649      	mov	r1, r9
 8006a00:	f7fa f86c 	bl	8000adc <__aeabi_dcmplt>
 8006a04:	b110      	cbz	r0, 8006a0c <_printf_float+0x8c>
 8006a06:	232d      	movs	r3, #45	; 0x2d
 8006a08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006a0c:	4a93      	ldr	r2, [pc, #588]	; (8006c5c <_printf_float+0x2dc>)
 8006a0e:	4b94      	ldr	r3, [pc, #592]	; (8006c60 <_printf_float+0x2e0>)
 8006a10:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8006a14:	bf94      	ite	ls
 8006a16:	4690      	movls	r8, r2
 8006a18:	4698      	movhi	r8, r3
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	6123      	str	r3, [r4, #16]
 8006a1e:	9b05      	ldr	r3, [sp, #20]
 8006a20:	f023 0304 	bic.w	r3, r3, #4
 8006a24:	6023      	str	r3, [r4, #0]
 8006a26:	f04f 0900 	mov.w	r9, #0
 8006a2a:	9700      	str	r7, [sp, #0]
 8006a2c:	4633      	mov	r3, r6
 8006a2e:	aa0b      	add	r2, sp, #44	; 0x2c
 8006a30:	4621      	mov	r1, r4
 8006a32:	4628      	mov	r0, r5
 8006a34:	f000 f9da 	bl	8006dec <_printf_common>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f040 8090 	bne.w	8006b5e <_printf_float+0x1de>
 8006a3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a42:	b00d      	add	sp, #52	; 0x34
 8006a44:	ecbd 8b02 	vpop	{d8}
 8006a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4c:	4642      	mov	r2, r8
 8006a4e:	464b      	mov	r3, r9
 8006a50:	4640      	mov	r0, r8
 8006a52:	4649      	mov	r1, r9
 8006a54:	f7fa f86a 	bl	8000b2c <__aeabi_dcmpun>
 8006a58:	b140      	cbz	r0, 8006a6c <_printf_float+0xec>
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	bfbc      	itt	lt
 8006a60:	232d      	movlt	r3, #45	; 0x2d
 8006a62:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006a66:	4a7f      	ldr	r2, [pc, #508]	; (8006c64 <_printf_float+0x2e4>)
 8006a68:	4b7f      	ldr	r3, [pc, #508]	; (8006c68 <_printf_float+0x2e8>)
 8006a6a:	e7d1      	b.n	8006a10 <_printf_float+0x90>
 8006a6c:	6863      	ldr	r3, [r4, #4]
 8006a6e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006a72:	9206      	str	r2, [sp, #24]
 8006a74:	1c5a      	adds	r2, r3, #1
 8006a76:	d13f      	bne.n	8006af8 <_printf_float+0x178>
 8006a78:	2306      	movs	r3, #6
 8006a7a:	6063      	str	r3, [r4, #4]
 8006a7c:	9b05      	ldr	r3, [sp, #20]
 8006a7e:	6861      	ldr	r1, [r4, #4]
 8006a80:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006a84:	2300      	movs	r3, #0
 8006a86:	9303      	str	r3, [sp, #12]
 8006a88:	ab0a      	add	r3, sp, #40	; 0x28
 8006a8a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8006a8e:	ab09      	add	r3, sp, #36	; 0x24
 8006a90:	ec49 8b10 	vmov	d0, r8, r9
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	6022      	str	r2, [r4, #0]
 8006a98:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f7ff fece 	bl	800683e <__cvt>
 8006aa2:	9b06      	ldr	r3, [sp, #24]
 8006aa4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa6:	2b47      	cmp	r3, #71	; 0x47
 8006aa8:	4680      	mov	r8, r0
 8006aaa:	d108      	bne.n	8006abe <_printf_float+0x13e>
 8006aac:	1cc8      	adds	r0, r1, #3
 8006aae:	db02      	blt.n	8006ab6 <_printf_float+0x136>
 8006ab0:	6863      	ldr	r3, [r4, #4]
 8006ab2:	4299      	cmp	r1, r3
 8006ab4:	dd41      	ble.n	8006b3a <_printf_float+0x1ba>
 8006ab6:	f1ab 0302 	sub.w	r3, fp, #2
 8006aba:	fa5f fb83 	uxtb.w	fp, r3
 8006abe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006ac2:	d820      	bhi.n	8006b06 <_printf_float+0x186>
 8006ac4:	3901      	subs	r1, #1
 8006ac6:	465a      	mov	r2, fp
 8006ac8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006acc:	9109      	str	r1, [sp, #36]	; 0x24
 8006ace:	f7ff ff18 	bl	8006902 <__exponent>
 8006ad2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ad4:	1813      	adds	r3, r2, r0
 8006ad6:	2a01      	cmp	r2, #1
 8006ad8:	4681      	mov	r9, r0
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	dc02      	bgt.n	8006ae4 <_printf_float+0x164>
 8006ade:	6822      	ldr	r2, [r4, #0]
 8006ae0:	07d2      	lsls	r2, r2, #31
 8006ae2:	d501      	bpl.n	8006ae8 <_printf_float+0x168>
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	6123      	str	r3, [r4, #16]
 8006ae8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d09c      	beq.n	8006a2a <_printf_float+0xaa>
 8006af0:	232d      	movs	r3, #45	; 0x2d
 8006af2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006af6:	e798      	b.n	8006a2a <_printf_float+0xaa>
 8006af8:	9a06      	ldr	r2, [sp, #24]
 8006afa:	2a47      	cmp	r2, #71	; 0x47
 8006afc:	d1be      	bne.n	8006a7c <_printf_float+0xfc>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d1bc      	bne.n	8006a7c <_printf_float+0xfc>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e7b9      	b.n	8006a7a <_printf_float+0xfa>
 8006b06:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8006b0a:	d118      	bne.n	8006b3e <_printf_float+0x1be>
 8006b0c:	2900      	cmp	r1, #0
 8006b0e:	6863      	ldr	r3, [r4, #4]
 8006b10:	dd0b      	ble.n	8006b2a <_printf_float+0x1aa>
 8006b12:	6121      	str	r1, [r4, #16]
 8006b14:	b913      	cbnz	r3, 8006b1c <_printf_float+0x19c>
 8006b16:	6822      	ldr	r2, [r4, #0]
 8006b18:	07d0      	lsls	r0, r2, #31
 8006b1a:	d502      	bpl.n	8006b22 <_printf_float+0x1a2>
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	440b      	add	r3, r1
 8006b20:	6123      	str	r3, [r4, #16]
 8006b22:	65a1      	str	r1, [r4, #88]	; 0x58
 8006b24:	f04f 0900 	mov.w	r9, #0
 8006b28:	e7de      	b.n	8006ae8 <_printf_float+0x168>
 8006b2a:	b913      	cbnz	r3, 8006b32 <_printf_float+0x1b2>
 8006b2c:	6822      	ldr	r2, [r4, #0]
 8006b2e:	07d2      	lsls	r2, r2, #31
 8006b30:	d501      	bpl.n	8006b36 <_printf_float+0x1b6>
 8006b32:	3302      	adds	r3, #2
 8006b34:	e7f4      	b.n	8006b20 <_printf_float+0x1a0>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e7f2      	b.n	8006b20 <_printf_float+0x1a0>
 8006b3a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8006b3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b40:	4299      	cmp	r1, r3
 8006b42:	db05      	blt.n	8006b50 <_printf_float+0x1d0>
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	6121      	str	r1, [r4, #16]
 8006b48:	07d8      	lsls	r0, r3, #31
 8006b4a:	d5ea      	bpl.n	8006b22 <_printf_float+0x1a2>
 8006b4c:	1c4b      	adds	r3, r1, #1
 8006b4e:	e7e7      	b.n	8006b20 <_printf_float+0x1a0>
 8006b50:	2900      	cmp	r1, #0
 8006b52:	bfd4      	ite	le
 8006b54:	f1c1 0202 	rsble	r2, r1, #2
 8006b58:	2201      	movgt	r2, #1
 8006b5a:	4413      	add	r3, r2
 8006b5c:	e7e0      	b.n	8006b20 <_printf_float+0x1a0>
 8006b5e:	6823      	ldr	r3, [r4, #0]
 8006b60:	055a      	lsls	r2, r3, #21
 8006b62:	d407      	bmi.n	8006b74 <_printf_float+0x1f4>
 8006b64:	6923      	ldr	r3, [r4, #16]
 8006b66:	4642      	mov	r2, r8
 8006b68:	4631      	mov	r1, r6
 8006b6a:	4628      	mov	r0, r5
 8006b6c:	47b8      	blx	r7
 8006b6e:	3001      	adds	r0, #1
 8006b70:	d12c      	bne.n	8006bcc <_printf_float+0x24c>
 8006b72:	e764      	b.n	8006a3e <_printf_float+0xbe>
 8006b74:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006b78:	f240 80e0 	bls.w	8006d3c <_printf_float+0x3bc>
 8006b7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006b80:	2200      	movs	r2, #0
 8006b82:	2300      	movs	r3, #0
 8006b84:	f7f9 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b88:	2800      	cmp	r0, #0
 8006b8a:	d034      	beq.n	8006bf6 <_printf_float+0x276>
 8006b8c:	4a37      	ldr	r2, [pc, #220]	; (8006c6c <_printf_float+0x2ec>)
 8006b8e:	2301      	movs	r3, #1
 8006b90:	4631      	mov	r1, r6
 8006b92:	4628      	mov	r0, r5
 8006b94:	47b8      	blx	r7
 8006b96:	3001      	adds	r0, #1
 8006b98:	f43f af51 	beq.w	8006a3e <_printf_float+0xbe>
 8006b9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	db02      	blt.n	8006baa <_printf_float+0x22a>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	07d8      	lsls	r0, r3, #31
 8006ba8:	d510      	bpl.n	8006bcc <_printf_float+0x24c>
 8006baa:	ee18 3a10 	vmov	r3, s16
 8006bae:	4652      	mov	r2, sl
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	47b8      	blx	r7
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	f43f af41 	beq.w	8006a3e <_printf_float+0xbe>
 8006bbc:	f04f 0800 	mov.w	r8, #0
 8006bc0:	f104 091a 	add.w	r9, r4, #26
 8006bc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	4543      	cmp	r3, r8
 8006bca:	dc09      	bgt.n	8006be0 <_printf_float+0x260>
 8006bcc:	6823      	ldr	r3, [r4, #0]
 8006bce:	079b      	lsls	r3, r3, #30
 8006bd0:	f100 8107 	bmi.w	8006de2 <_printf_float+0x462>
 8006bd4:	68e0      	ldr	r0, [r4, #12]
 8006bd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006bd8:	4298      	cmp	r0, r3
 8006bda:	bfb8      	it	lt
 8006bdc:	4618      	movlt	r0, r3
 8006bde:	e730      	b.n	8006a42 <_printf_float+0xc2>
 8006be0:	2301      	movs	r3, #1
 8006be2:	464a      	mov	r2, r9
 8006be4:	4631      	mov	r1, r6
 8006be6:	4628      	mov	r0, r5
 8006be8:	47b8      	blx	r7
 8006bea:	3001      	adds	r0, #1
 8006bec:	f43f af27 	beq.w	8006a3e <_printf_float+0xbe>
 8006bf0:	f108 0801 	add.w	r8, r8, #1
 8006bf4:	e7e6      	b.n	8006bc4 <_printf_float+0x244>
 8006bf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	dc39      	bgt.n	8006c70 <_printf_float+0x2f0>
 8006bfc:	4a1b      	ldr	r2, [pc, #108]	; (8006c6c <_printf_float+0x2ec>)
 8006bfe:	2301      	movs	r3, #1
 8006c00:	4631      	mov	r1, r6
 8006c02:	4628      	mov	r0, r5
 8006c04:	47b8      	blx	r7
 8006c06:	3001      	adds	r0, #1
 8006c08:	f43f af19 	beq.w	8006a3e <_printf_float+0xbe>
 8006c0c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006c10:	4313      	orrs	r3, r2
 8006c12:	d102      	bne.n	8006c1a <_printf_float+0x29a>
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	07d9      	lsls	r1, r3, #31
 8006c18:	d5d8      	bpl.n	8006bcc <_printf_float+0x24c>
 8006c1a:	ee18 3a10 	vmov	r3, s16
 8006c1e:	4652      	mov	r2, sl
 8006c20:	4631      	mov	r1, r6
 8006c22:	4628      	mov	r0, r5
 8006c24:	47b8      	blx	r7
 8006c26:	3001      	adds	r0, #1
 8006c28:	f43f af09 	beq.w	8006a3e <_printf_float+0xbe>
 8006c2c:	f04f 0900 	mov.w	r9, #0
 8006c30:	f104 0a1a 	add.w	sl, r4, #26
 8006c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c36:	425b      	negs	r3, r3
 8006c38:	454b      	cmp	r3, r9
 8006c3a:	dc01      	bgt.n	8006c40 <_printf_float+0x2c0>
 8006c3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c3e:	e792      	b.n	8006b66 <_printf_float+0x1e6>
 8006c40:	2301      	movs	r3, #1
 8006c42:	4652      	mov	r2, sl
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	47b8      	blx	r7
 8006c4a:	3001      	adds	r0, #1
 8006c4c:	f43f aef7 	beq.w	8006a3e <_printf_float+0xbe>
 8006c50:	f109 0901 	add.w	r9, r9, #1
 8006c54:	e7ee      	b.n	8006c34 <_printf_float+0x2b4>
 8006c56:	bf00      	nop
 8006c58:	7fefffff 	.word	0x7fefffff
 8006c5c:	08012598 	.word	0x08012598
 8006c60:	0801259c 	.word	0x0801259c
 8006c64:	080125a0 	.word	0x080125a0
 8006c68:	080125a4 	.word	0x080125a4
 8006c6c:	080125a8 	.word	0x080125a8
 8006c70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006c72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c74:	429a      	cmp	r2, r3
 8006c76:	bfa8      	it	ge
 8006c78:	461a      	movge	r2, r3
 8006c7a:	2a00      	cmp	r2, #0
 8006c7c:	4691      	mov	r9, r2
 8006c7e:	dc37      	bgt.n	8006cf0 <_printf_float+0x370>
 8006c80:	f04f 0b00 	mov.w	fp, #0
 8006c84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006c88:	f104 021a 	add.w	r2, r4, #26
 8006c8c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006c8e:	9305      	str	r3, [sp, #20]
 8006c90:	eba3 0309 	sub.w	r3, r3, r9
 8006c94:	455b      	cmp	r3, fp
 8006c96:	dc33      	bgt.n	8006d00 <_printf_float+0x380>
 8006c98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	db3b      	blt.n	8006d18 <_printf_float+0x398>
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	07da      	lsls	r2, r3, #31
 8006ca4:	d438      	bmi.n	8006d18 <_printf_float+0x398>
 8006ca6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006caa:	eba2 0903 	sub.w	r9, r2, r3
 8006cae:	9b05      	ldr	r3, [sp, #20]
 8006cb0:	1ad2      	subs	r2, r2, r3
 8006cb2:	4591      	cmp	r9, r2
 8006cb4:	bfa8      	it	ge
 8006cb6:	4691      	movge	r9, r2
 8006cb8:	f1b9 0f00 	cmp.w	r9, #0
 8006cbc:	dc35      	bgt.n	8006d2a <_printf_float+0x3aa>
 8006cbe:	f04f 0800 	mov.w	r8, #0
 8006cc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cc6:	f104 0a1a 	add.w	sl, r4, #26
 8006cca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	eba3 0309 	sub.w	r3, r3, r9
 8006cd4:	4543      	cmp	r3, r8
 8006cd6:	f77f af79 	ble.w	8006bcc <_printf_float+0x24c>
 8006cda:	2301      	movs	r3, #1
 8006cdc:	4652      	mov	r2, sl
 8006cde:	4631      	mov	r1, r6
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	47b8      	blx	r7
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	f43f aeaa 	beq.w	8006a3e <_printf_float+0xbe>
 8006cea:	f108 0801 	add.w	r8, r8, #1
 8006cee:	e7ec      	b.n	8006cca <_printf_float+0x34a>
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	4631      	mov	r1, r6
 8006cf4:	4642      	mov	r2, r8
 8006cf6:	4628      	mov	r0, r5
 8006cf8:	47b8      	blx	r7
 8006cfa:	3001      	adds	r0, #1
 8006cfc:	d1c0      	bne.n	8006c80 <_printf_float+0x300>
 8006cfe:	e69e      	b.n	8006a3e <_printf_float+0xbe>
 8006d00:	2301      	movs	r3, #1
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	9205      	str	r2, [sp, #20]
 8006d08:	47b8      	blx	r7
 8006d0a:	3001      	adds	r0, #1
 8006d0c:	f43f ae97 	beq.w	8006a3e <_printf_float+0xbe>
 8006d10:	9a05      	ldr	r2, [sp, #20]
 8006d12:	f10b 0b01 	add.w	fp, fp, #1
 8006d16:	e7b9      	b.n	8006c8c <_printf_float+0x30c>
 8006d18:	ee18 3a10 	vmov	r3, s16
 8006d1c:	4652      	mov	r2, sl
 8006d1e:	4631      	mov	r1, r6
 8006d20:	4628      	mov	r0, r5
 8006d22:	47b8      	blx	r7
 8006d24:	3001      	adds	r0, #1
 8006d26:	d1be      	bne.n	8006ca6 <_printf_float+0x326>
 8006d28:	e689      	b.n	8006a3e <_printf_float+0xbe>
 8006d2a:	9a05      	ldr	r2, [sp, #20]
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	4442      	add	r2, r8
 8006d30:	4631      	mov	r1, r6
 8006d32:	4628      	mov	r0, r5
 8006d34:	47b8      	blx	r7
 8006d36:	3001      	adds	r0, #1
 8006d38:	d1c1      	bne.n	8006cbe <_printf_float+0x33e>
 8006d3a:	e680      	b.n	8006a3e <_printf_float+0xbe>
 8006d3c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006d3e:	2a01      	cmp	r2, #1
 8006d40:	dc01      	bgt.n	8006d46 <_printf_float+0x3c6>
 8006d42:	07db      	lsls	r3, r3, #31
 8006d44:	d53a      	bpl.n	8006dbc <_printf_float+0x43c>
 8006d46:	2301      	movs	r3, #1
 8006d48:	4642      	mov	r2, r8
 8006d4a:	4631      	mov	r1, r6
 8006d4c:	4628      	mov	r0, r5
 8006d4e:	47b8      	blx	r7
 8006d50:	3001      	adds	r0, #1
 8006d52:	f43f ae74 	beq.w	8006a3e <_printf_float+0xbe>
 8006d56:	ee18 3a10 	vmov	r3, s16
 8006d5a:	4652      	mov	r2, sl
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	47b8      	blx	r7
 8006d62:	3001      	adds	r0, #1
 8006d64:	f43f ae6b 	beq.w	8006a3e <_printf_float+0xbe>
 8006d68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006d74:	f7f9 fea8 	bl	8000ac8 <__aeabi_dcmpeq>
 8006d78:	b9d8      	cbnz	r0, 8006db2 <_printf_float+0x432>
 8006d7a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8006d7e:	f108 0201 	add.w	r2, r8, #1
 8006d82:	4631      	mov	r1, r6
 8006d84:	4628      	mov	r0, r5
 8006d86:	47b8      	blx	r7
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d10e      	bne.n	8006daa <_printf_float+0x42a>
 8006d8c:	e657      	b.n	8006a3e <_printf_float+0xbe>
 8006d8e:	2301      	movs	r3, #1
 8006d90:	4652      	mov	r2, sl
 8006d92:	4631      	mov	r1, r6
 8006d94:	4628      	mov	r0, r5
 8006d96:	47b8      	blx	r7
 8006d98:	3001      	adds	r0, #1
 8006d9a:	f43f ae50 	beq.w	8006a3e <_printf_float+0xbe>
 8006d9e:	f108 0801 	add.w	r8, r8, #1
 8006da2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006da4:	3b01      	subs	r3, #1
 8006da6:	4543      	cmp	r3, r8
 8006da8:	dcf1      	bgt.n	8006d8e <_printf_float+0x40e>
 8006daa:	464b      	mov	r3, r9
 8006dac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006db0:	e6da      	b.n	8006b68 <_printf_float+0x1e8>
 8006db2:	f04f 0800 	mov.w	r8, #0
 8006db6:	f104 0a1a 	add.w	sl, r4, #26
 8006dba:	e7f2      	b.n	8006da2 <_printf_float+0x422>
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	4642      	mov	r2, r8
 8006dc0:	e7df      	b.n	8006d82 <_printf_float+0x402>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	464a      	mov	r2, r9
 8006dc6:	4631      	mov	r1, r6
 8006dc8:	4628      	mov	r0, r5
 8006dca:	47b8      	blx	r7
 8006dcc:	3001      	adds	r0, #1
 8006dce:	f43f ae36 	beq.w	8006a3e <_printf_float+0xbe>
 8006dd2:	f108 0801 	add.w	r8, r8, #1
 8006dd6:	68e3      	ldr	r3, [r4, #12]
 8006dd8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dda:	1a5b      	subs	r3, r3, r1
 8006ddc:	4543      	cmp	r3, r8
 8006dde:	dcf0      	bgt.n	8006dc2 <_printf_float+0x442>
 8006de0:	e6f8      	b.n	8006bd4 <_printf_float+0x254>
 8006de2:	f04f 0800 	mov.w	r8, #0
 8006de6:	f104 0919 	add.w	r9, r4, #25
 8006dea:	e7f4      	b.n	8006dd6 <_printf_float+0x456>

08006dec <_printf_common>:
 8006dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006df0:	4616      	mov	r6, r2
 8006df2:	4699      	mov	r9, r3
 8006df4:	688a      	ldr	r2, [r1, #8]
 8006df6:	690b      	ldr	r3, [r1, #16]
 8006df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	bfb8      	it	lt
 8006e00:	4613      	movlt	r3, r2
 8006e02:	6033      	str	r3, [r6, #0]
 8006e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e08:	4607      	mov	r7, r0
 8006e0a:	460c      	mov	r4, r1
 8006e0c:	b10a      	cbz	r2, 8006e12 <_printf_common+0x26>
 8006e0e:	3301      	adds	r3, #1
 8006e10:	6033      	str	r3, [r6, #0]
 8006e12:	6823      	ldr	r3, [r4, #0]
 8006e14:	0699      	lsls	r1, r3, #26
 8006e16:	bf42      	ittt	mi
 8006e18:	6833      	ldrmi	r3, [r6, #0]
 8006e1a:	3302      	addmi	r3, #2
 8006e1c:	6033      	strmi	r3, [r6, #0]
 8006e1e:	6825      	ldr	r5, [r4, #0]
 8006e20:	f015 0506 	ands.w	r5, r5, #6
 8006e24:	d106      	bne.n	8006e34 <_printf_common+0x48>
 8006e26:	f104 0a19 	add.w	sl, r4, #25
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	6832      	ldr	r2, [r6, #0]
 8006e2e:	1a9b      	subs	r3, r3, r2
 8006e30:	42ab      	cmp	r3, r5
 8006e32:	dc26      	bgt.n	8006e82 <_printf_common+0x96>
 8006e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e38:	1e13      	subs	r3, r2, #0
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	bf18      	it	ne
 8006e3e:	2301      	movne	r3, #1
 8006e40:	0692      	lsls	r2, r2, #26
 8006e42:	d42b      	bmi.n	8006e9c <_printf_common+0xb0>
 8006e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e48:	4649      	mov	r1, r9
 8006e4a:	4638      	mov	r0, r7
 8006e4c:	47c0      	blx	r8
 8006e4e:	3001      	adds	r0, #1
 8006e50:	d01e      	beq.n	8006e90 <_printf_common+0xa4>
 8006e52:	6823      	ldr	r3, [r4, #0]
 8006e54:	6922      	ldr	r2, [r4, #16]
 8006e56:	f003 0306 	and.w	r3, r3, #6
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	bf02      	ittt	eq
 8006e5e:	68e5      	ldreq	r5, [r4, #12]
 8006e60:	6833      	ldreq	r3, [r6, #0]
 8006e62:	1aed      	subeq	r5, r5, r3
 8006e64:	68a3      	ldr	r3, [r4, #8]
 8006e66:	bf0c      	ite	eq
 8006e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e6c:	2500      	movne	r5, #0
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	bfc4      	itt	gt
 8006e72:	1a9b      	subgt	r3, r3, r2
 8006e74:	18ed      	addgt	r5, r5, r3
 8006e76:	2600      	movs	r6, #0
 8006e78:	341a      	adds	r4, #26
 8006e7a:	42b5      	cmp	r5, r6
 8006e7c:	d11a      	bne.n	8006eb4 <_printf_common+0xc8>
 8006e7e:	2000      	movs	r0, #0
 8006e80:	e008      	b.n	8006e94 <_printf_common+0xa8>
 8006e82:	2301      	movs	r3, #1
 8006e84:	4652      	mov	r2, sl
 8006e86:	4649      	mov	r1, r9
 8006e88:	4638      	mov	r0, r7
 8006e8a:	47c0      	blx	r8
 8006e8c:	3001      	adds	r0, #1
 8006e8e:	d103      	bne.n	8006e98 <_printf_common+0xac>
 8006e90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e98:	3501      	adds	r5, #1
 8006e9a:	e7c6      	b.n	8006e2a <_printf_common+0x3e>
 8006e9c:	18e1      	adds	r1, r4, r3
 8006e9e:	1c5a      	adds	r2, r3, #1
 8006ea0:	2030      	movs	r0, #48	; 0x30
 8006ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ea6:	4422      	add	r2, r4
 8006ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eb0:	3302      	adds	r3, #2
 8006eb2:	e7c7      	b.n	8006e44 <_printf_common+0x58>
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	4622      	mov	r2, r4
 8006eb8:	4649      	mov	r1, r9
 8006eba:	4638      	mov	r0, r7
 8006ebc:	47c0      	blx	r8
 8006ebe:	3001      	adds	r0, #1
 8006ec0:	d0e6      	beq.n	8006e90 <_printf_common+0xa4>
 8006ec2:	3601      	adds	r6, #1
 8006ec4:	e7d9      	b.n	8006e7a <_printf_common+0x8e>
	...

08006ec8 <_printf_i>:
 8006ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ecc:	7e0f      	ldrb	r7, [r1, #24]
 8006ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006ed0:	2f78      	cmp	r7, #120	; 0x78
 8006ed2:	4691      	mov	r9, r2
 8006ed4:	4680      	mov	r8, r0
 8006ed6:	460c      	mov	r4, r1
 8006ed8:	469a      	mov	sl, r3
 8006eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ede:	d807      	bhi.n	8006ef0 <_printf_i+0x28>
 8006ee0:	2f62      	cmp	r7, #98	; 0x62
 8006ee2:	d80a      	bhi.n	8006efa <_printf_i+0x32>
 8006ee4:	2f00      	cmp	r7, #0
 8006ee6:	f000 80d4 	beq.w	8007092 <_printf_i+0x1ca>
 8006eea:	2f58      	cmp	r7, #88	; 0x58
 8006eec:	f000 80c0 	beq.w	8007070 <_printf_i+0x1a8>
 8006ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ef8:	e03a      	b.n	8006f70 <_printf_i+0xa8>
 8006efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006efe:	2b15      	cmp	r3, #21
 8006f00:	d8f6      	bhi.n	8006ef0 <_printf_i+0x28>
 8006f02:	a101      	add	r1, pc, #4	; (adr r1, 8006f08 <_printf_i+0x40>)
 8006f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f08:	08006f61 	.word	0x08006f61
 8006f0c:	08006f75 	.word	0x08006f75
 8006f10:	08006ef1 	.word	0x08006ef1
 8006f14:	08006ef1 	.word	0x08006ef1
 8006f18:	08006ef1 	.word	0x08006ef1
 8006f1c:	08006ef1 	.word	0x08006ef1
 8006f20:	08006f75 	.word	0x08006f75
 8006f24:	08006ef1 	.word	0x08006ef1
 8006f28:	08006ef1 	.word	0x08006ef1
 8006f2c:	08006ef1 	.word	0x08006ef1
 8006f30:	08006ef1 	.word	0x08006ef1
 8006f34:	08007079 	.word	0x08007079
 8006f38:	08006fa1 	.word	0x08006fa1
 8006f3c:	08007033 	.word	0x08007033
 8006f40:	08006ef1 	.word	0x08006ef1
 8006f44:	08006ef1 	.word	0x08006ef1
 8006f48:	0800709b 	.word	0x0800709b
 8006f4c:	08006ef1 	.word	0x08006ef1
 8006f50:	08006fa1 	.word	0x08006fa1
 8006f54:	08006ef1 	.word	0x08006ef1
 8006f58:	08006ef1 	.word	0x08006ef1
 8006f5c:	0800703b 	.word	0x0800703b
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	1d1a      	adds	r2, r3, #4
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	602a      	str	r2, [r5, #0]
 8006f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f70:	2301      	movs	r3, #1
 8006f72:	e09f      	b.n	80070b4 <_printf_i+0x1ec>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	682b      	ldr	r3, [r5, #0]
 8006f78:	0607      	lsls	r7, r0, #24
 8006f7a:	f103 0104 	add.w	r1, r3, #4
 8006f7e:	6029      	str	r1, [r5, #0]
 8006f80:	d501      	bpl.n	8006f86 <_printf_i+0xbe>
 8006f82:	681e      	ldr	r6, [r3, #0]
 8006f84:	e003      	b.n	8006f8e <_printf_i+0xc6>
 8006f86:	0646      	lsls	r6, r0, #25
 8006f88:	d5fb      	bpl.n	8006f82 <_printf_i+0xba>
 8006f8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	da03      	bge.n	8006f9a <_printf_i+0xd2>
 8006f92:	232d      	movs	r3, #45	; 0x2d
 8006f94:	4276      	negs	r6, r6
 8006f96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f9a:	485a      	ldr	r0, [pc, #360]	; (8007104 <_printf_i+0x23c>)
 8006f9c:	230a      	movs	r3, #10
 8006f9e:	e012      	b.n	8006fc6 <_printf_i+0xfe>
 8006fa0:	682b      	ldr	r3, [r5, #0]
 8006fa2:	6820      	ldr	r0, [r4, #0]
 8006fa4:	1d19      	adds	r1, r3, #4
 8006fa6:	6029      	str	r1, [r5, #0]
 8006fa8:	0605      	lsls	r5, r0, #24
 8006faa:	d501      	bpl.n	8006fb0 <_printf_i+0xe8>
 8006fac:	681e      	ldr	r6, [r3, #0]
 8006fae:	e002      	b.n	8006fb6 <_printf_i+0xee>
 8006fb0:	0641      	lsls	r1, r0, #25
 8006fb2:	d5fb      	bpl.n	8006fac <_printf_i+0xe4>
 8006fb4:	881e      	ldrh	r6, [r3, #0]
 8006fb6:	4853      	ldr	r0, [pc, #332]	; (8007104 <_printf_i+0x23c>)
 8006fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8006fba:	bf0c      	ite	eq
 8006fbc:	2308      	moveq	r3, #8
 8006fbe:	230a      	movne	r3, #10
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fc6:	6865      	ldr	r5, [r4, #4]
 8006fc8:	60a5      	str	r5, [r4, #8]
 8006fca:	2d00      	cmp	r5, #0
 8006fcc:	bfa2      	ittt	ge
 8006fce:	6821      	ldrge	r1, [r4, #0]
 8006fd0:	f021 0104 	bicge.w	r1, r1, #4
 8006fd4:	6021      	strge	r1, [r4, #0]
 8006fd6:	b90e      	cbnz	r6, 8006fdc <_printf_i+0x114>
 8006fd8:	2d00      	cmp	r5, #0
 8006fda:	d04b      	beq.n	8007074 <_printf_i+0x1ac>
 8006fdc:	4615      	mov	r5, r2
 8006fde:	fbb6 f1f3 	udiv	r1, r6, r3
 8006fe2:	fb03 6711 	mls	r7, r3, r1, r6
 8006fe6:	5dc7      	ldrb	r7, [r0, r7]
 8006fe8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006fec:	4637      	mov	r7, r6
 8006fee:	42bb      	cmp	r3, r7
 8006ff0:	460e      	mov	r6, r1
 8006ff2:	d9f4      	bls.n	8006fde <_printf_i+0x116>
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d10b      	bne.n	8007010 <_printf_i+0x148>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	07de      	lsls	r6, r3, #31
 8006ffc:	d508      	bpl.n	8007010 <_printf_i+0x148>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	6861      	ldr	r1, [r4, #4]
 8007002:	4299      	cmp	r1, r3
 8007004:	bfde      	ittt	le
 8007006:	2330      	movle	r3, #48	; 0x30
 8007008:	f805 3c01 	strble.w	r3, [r5, #-1]
 800700c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007010:	1b52      	subs	r2, r2, r5
 8007012:	6122      	str	r2, [r4, #16]
 8007014:	f8cd a000 	str.w	sl, [sp]
 8007018:	464b      	mov	r3, r9
 800701a:	aa03      	add	r2, sp, #12
 800701c:	4621      	mov	r1, r4
 800701e:	4640      	mov	r0, r8
 8007020:	f7ff fee4 	bl	8006dec <_printf_common>
 8007024:	3001      	adds	r0, #1
 8007026:	d14a      	bne.n	80070be <_printf_i+0x1f6>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800702c:	b004      	add	sp, #16
 800702e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	f043 0320 	orr.w	r3, r3, #32
 8007038:	6023      	str	r3, [r4, #0]
 800703a:	4833      	ldr	r0, [pc, #204]	; (8007108 <_printf_i+0x240>)
 800703c:	2778      	movs	r7, #120	; 0x78
 800703e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007042:	6823      	ldr	r3, [r4, #0]
 8007044:	6829      	ldr	r1, [r5, #0]
 8007046:	061f      	lsls	r7, r3, #24
 8007048:	f851 6b04 	ldr.w	r6, [r1], #4
 800704c:	d402      	bmi.n	8007054 <_printf_i+0x18c>
 800704e:	065f      	lsls	r7, r3, #25
 8007050:	bf48      	it	mi
 8007052:	b2b6      	uxthmi	r6, r6
 8007054:	07df      	lsls	r7, r3, #31
 8007056:	bf48      	it	mi
 8007058:	f043 0320 	orrmi.w	r3, r3, #32
 800705c:	6029      	str	r1, [r5, #0]
 800705e:	bf48      	it	mi
 8007060:	6023      	strmi	r3, [r4, #0]
 8007062:	b91e      	cbnz	r6, 800706c <_printf_i+0x1a4>
 8007064:	6823      	ldr	r3, [r4, #0]
 8007066:	f023 0320 	bic.w	r3, r3, #32
 800706a:	6023      	str	r3, [r4, #0]
 800706c:	2310      	movs	r3, #16
 800706e:	e7a7      	b.n	8006fc0 <_printf_i+0xf8>
 8007070:	4824      	ldr	r0, [pc, #144]	; (8007104 <_printf_i+0x23c>)
 8007072:	e7e4      	b.n	800703e <_printf_i+0x176>
 8007074:	4615      	mov	r5, r2
 8007076:	e7bd      	b.n	8006ff4 <_printf_i+0x12c>
 8007078:	682b      	ldr	r3, [r5, #0]
 800707a:	6826      	ldr	r6, [r4, #0]
 800707c:	6961      	ldr	r1, [r4, #20]
 800707e:	1d18      	adds	r0, r3, #4
 8007080:	6028      	str	r0, [r5, #0]
 8007082:	0635      	lsls	r5, r6, #24
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	d501      	bpl.n	800708c <_printf_i+0x1c4>
 8007088:	6019      	str	r1, [r3, #0]
 800708a:	e002      	b.n	8007092 <_printf_i+0x1ca>
 800708c:	0670      	lsls	r0, r6, #25
 800708e:	d5fb      	bpl.n	8007088 <_printf_i+0x1c0>
 8007090:	8019      	strh	r1, [r3, #0]
 8007092:	2300      	movs	r3, #0
 8007094:	6123      	str	r3, [r4, #16]
 8007096:	4615      	mov	r5, r2
 8007098:	e7bc      	b.n	8007014 <_printf_i+0x14c>
 800709a:	682b      	ldr	r3, [r5, #0]
 800709c:	1d1a      	adds	r2, r3, #4
 800709e:	602a      	str	r2, [r5, #0]
 80070a0:	681d      	ldr	r5, [r3, #0]
 80070a2:	6862      	ldr	r2, [r4, #4]
 80070a4:	2100      	movs	r1, #0
 80070a6:	4628      	mov	r0, r5
 80070a8:	f7f9 f892 	bl	80001d0 <memchr>
 80070ac:	b108      	cbz	r0, 80070b2 <_printf_i+0x1ea>
 80070ae:	1b40      	subs	r0, r0, r5
 80070b0:	6060      	str	r0, [r4, #4]
 80070b2:	6863      	ldr	r3, [r4, #4]
 80070b4:	6123      	str	r3, [r4, #16]
 80070b6:	2300      	movs	r3, #0
 80070b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070bc:	e7aa      	b.n	8007014 <_printf_i+0x14c>
 80070be:	6923      	ldr	r3, [r4, #16]
 80070c0:	462a      	mov	r2, r5
 80070c2:	4649      	mov	r1, r9
 80070c4:	4640      	mov	r0, r8
 80070c6:	47d0      	blx	sl
 80070c8:	3001      	adds	r0, #1
 80070ca:	d0ad      	beq.n	8007028 <_printf_i+0x160>
 80070cc:	6823      	ldr	r3, [r4, #0]
 80070ce:	079b      	lsls	r3, r3, #30
 80070d0:	d413      	bmi.n	80070fa <_printf_i+0x232>
 80070d2:	68e0      	ldr	r0, [r4, #12]
 80070d4:	9b03      	ldr	r3, [sp, #12]
 80070d6:	4298      	cmp	r0, r3
 80070d8:	bfb8      	it	lt
 80070da:	4618      	movlt	r0, r3
 80070dc:	e7a6      	b.n	800702c <_printf_i+0x164>
 80070de:	2301      	movs	r3, #1
 80070e0:	4632      	mov	r2, r6
 80070e2:	4649      	mov	r1, r9
 80070e4:	4640      	mov	r0, r8
 80070e6:	47d0      	blx	sl
 80070e8:	3001      	adds	r0, #1
 80070ea:	d09d      	beq.n	8007028 <_printf_i+0x160>
 80070ec:	3501      	adds	r5, #1
 80070ee:	68e3      	ldr	r3, [r4, #12]
 80070f0:	9903      	ldr	r1, [sp, #12]
 80070f2:	1a5b      	subs	r3, r3, r1
 80070f4:	42ab      	cmp	r3, r5
 80070f6:	dcf2      	bgt.n	80070de <_printf_i+0x216>
 80070f8:	e7eb      	b.n	80070d2 <_printf_i+0x20a>
 80070fa:	2500      	movs	r5, #0
 80070fc:	f104 0619 	add.w	r6, r4, #25
 8007100:	e7f5      	b.n	80070ee <_printf_i+0x226>
 8007102:	bf00      	nop
 8007104:	080125aa 	.word	0x080125aa
 8007108:	080125bb 	.word	0x080125bb

0800710c <std>:
 800710c:	2300      	movs	r3, #0
 800710e:	b510      	push	{r4, lr}
 8007110:	4604      	mov	r4, r0
 8007112:	e9c0 3300 	strd	r3, r3, [r0]
 8007116:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800711a:	6083      	str	r3, [r0, #8]
 800711c:	8181      	strh	r1, [r0, #12]
 800711e:	6643      	str	r3, [r0, #100]	; 0x64
 8007120:	81c2      	strh	r2, [r0, #14]
 8007122:	6183      	str	r3, [r0, #24]
 8007124:	4619      	mov	r1, r3
 8007126:	2208      	movs	r2, #8
 8007128:	305c      	adds	r0, #92	; 0x5c
 800712a:	f000 f914 	bl	8007356 <memset>
 800712e:	4b0d      	ldr	r3, [pc, #52]	; (8007164 <std+0x58>)
 8007130:	6263      	str	r3, [r4, #36]	; 0x24
 8007132:	4b0d      	ldr	r3, [pc, #52]	; (8007168 <std+0x5c>)
 8007134:	62a3      	str	r3, [r4, #40]	; 0x28
 8007136:	4b0d      	ldr	r3, [pc, #52]	; (800716c <std+0x60>)
 8007138:	62e3      	str	r3, [r4, #44]	; 0x2c
 800713a:	4b0d      	ldr	r3, [pc, #52]	; (8007170 <std+0x64>)
 800713c:	6323      	str	r3, [r4, #48]	; 0x30
 800713e:	4b0d      	ldr	r3, [pc, #52]	; (8007174 <std+0x68>)
 8007140:	6224      	str	r4, [r4, #32]
 8007142:	429c      	cmp	r4, r3
 8007144:	d006      	beq.n	8007154 <std+0x48>
 8007146:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800714a:	4294      	cmp	r4, r2
 800714c:	d002      	beq.n	8007154 <std+0x48>
 800714e:	33d0      	adds	r3, #208	; 0xd0
 8007150:	429c      	cmp	r4, r3
 8007152:	d105      	bne.n	8007160 <std+0x54>
 8007154:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007158:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800715c:	f000 b988 	b.w	8007470 <__retarget_lock_init_recursive>
 8007160:	bd10      	pop	{r4, pc}
 8007162:	bf00      	nop
 8007164:	080072d1 	.word	0x080072d1
 8007168:	080072f3 	.word	0x080072f3
 800716c:	0800732b 	.word	0x0800732b
 8007170:	0800734f 	.word	0x0800734f
 8007174:	20000b28 	.word	0x20000b28

08007178 <stdio_exit_handler>:
 8007178:	4a02      	ldr	r2, [pc, #8]	; (8007184 <stdio_exit_handler+0xc>)
 800717a:	4903      	ldr	r1, [pc, #12]	; (8007188 <stdio_exit_handler+0x10>)
 800717c:	4803      	ldr	r0, [pc, #12]	; (800718c <stdio_exit_handler+0x14>)
 800717e:	f000 b869 	b.w	8007254 <_fwalk_sglue>
 8007182:	bf00      	nop
 8007184:	20000754 	.word	0x20000754
 8007188:	08008ce9 	.word	0x08008ce9
 800718c:	20000760 	.word	0x20000760

08007190 <cleanup_stdio>:
 8007190:	6841      	ldr	r1, [r0, #4]
 8007192:	4b0c      	ldr	r3, [pc, #48]	; (80071c4 <cleanup_stdio+0x34>)
 8007194:	4299      	cmp	r1, r3
 8007196:	b510      	push	{r4, lr}
 8007198:	4604      	mov	r4, r0
 800719a:	d001      	beq.n	80071a0 <cleanup_stdio+0x10>
 800719c:	f001 fda4 	bl	8008ce8 <_fflush_r>
 80071a0:	68a1      	ldr	r1, [r4, #8]
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <cleanup_stdio+0x38>)
 80071a4:	4299      	cmp	r1, r3
 80071a6:	d002      	beq.n	80071ae <cleanup_stdio+0x1e>
 80071a8:	4620      	mov	r0, r4
 80071aa:	f001 fd9d 	bl	8008ce8 <_fflush_r>
 80071ae:	68e1      	ldr	r1, [r4, #12]
 80071b0:	4b06      	ldr	r3, [pc, #24]	; (80071cc <cleanup_stdio+0x3c>)
 80071b2:	4299      	cmp	r1, r3
 80071b4:	d004      	beq.n	80071c0 <cleanup_stdio+0x30>
 80071b6:	4620      	mov	r0, r4
 80071b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071bc:	f001 bd94 	b.w	8008ce8 <_fflush_r>
 80071c0:	bd10      	pop	{r4, pc}
 80071c2:	bf00      	nop
 80071c4:	20000b28 	.word	0x20000b28
 80071c8:	20000b90 	.word	0x20000b90
 80071cc:	20000bf8 	.word	0x20000bf8

080071d0 <global_stdio_init.part.0>:
 80071d0:	b510      	push	{r4, lr}
 80071d2:	4b0b      	ldr	r3, [pc, #44]	; (8007200 <global_stdio_init.part.0+0x30>)
 80071d4:	4c0b      	ldr	r4, [pc, #44]	; (8007204 <global_stdio_init.part.0+0x34>)
 80071d6:	4a0c      	ldr	r2, [pc, #48]	; (8007208 <global_stdio_init.part.0+0x38>)
 80071d8:	601a      	str	r2, [r3, #0]
 80071da:	4620      	mov	r0, r4
 80071dc:	2200      	movs	r2, #0
 80071de:	2104      	movs	r1, #4
 80071e0:	f7ff ff94 	bl	800710c <std>
 80071e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80071e8:	2201      	movs	r2, #1
 80071ea:	2109      	movs	r1, #9
 80071ec:	f7ff ff8e 	bl	800710c <std>
 80071f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80071f4:	2202      	movs	r2, #2
 80071f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071fa:	2112      	movs	r1, #18
 80071fc:	f7ff bf86 	b.w	800710c <std>
 8007200:	20000c60 	.word	0x20000c60
 8007204:	20000b28 	.word	0x20000b28
 8007208:	08007179 	.word	0x08007179

0800720c <__sfp_lock_acquire>:
 800720c:	4801      	ldr	r0, [pc, #4]	; (8007214 <__sfp_lock_acquire+0x8>)
 800720e:	f000 b930 	b.w	8007472 <__retarget_lock_acquire_recursive>
 8007212:	bf00      	nop
 8007214:	20000c69 	.word	0x20000c69

08007218 <__sfp_lock_release>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__sfp_lock_release+0x8>)
 800721a:	f000 b92b 	b.w	8007474 <__retarget_lock_release_recursive>
 800721e:	bf00      	nop
 8007220:	20000c69 	.word	0x20000c69

08007224 <__sinit>:
 8007224:	b510      	push	{r4, lr}
 8007226:	4604      	mov	r4, r0
 8007228:	f7ff fff0 	bl	800720c <__sfp_lock_acquire>
 800722c:	6a23      	ldr	r3, [r4, #32]
 800722e:	b11b      	cbz	r3, 8007238 <__sinit+0x14>
 8007230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007234:	f7ff bff0 	b.w	8007218 <__sfp_lock_release>
 8007238:	4b04      	ldr	r3, [pc, #16]	; (800724c <__sinit+0x28>)
 800723a:	6223      	str	r3, [r4, #32]
 800723c:	4b04      	ldr	r3, [pc, #16]	; (8007250 <__sinit+0x2c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1f5      	bne.n	8007230 <__sinit+0xc>
 8007244:	f7ff ffc4 	bl	80071d0 <global_stdio_init.part.0>
 8007248:	e7f2      	b.n	8007230 <__sinit+0xc>
 800724a:	bf00      	nop
 800724c:	08007191 	.word	0x08007191
 8007250:	20000c60 	.word	0x20000c60

08007254 <_fwalk_sglue>:
 8007254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007258:	4607      	mov	r7, r0
 800725a:	4688      	mov	r8, r1
 800725c:	4614      	mov	r4, r2
 800725e:	2600      	movs	r6, #0
 8007260:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007264:	f1b9 0901 	subs.w	r9, r9, #1
 8007268:	d505      	bpl.n	8007276 <_fwalk_sglue+0x22>
 800726a:	6824      	ldr	r4, [r4, #0]
 800726c:	2c00      	cmp	r4, #0
 800726e:	d1f7      	bne.n	8007260 <_fwalk_sglue+0xc>
 8007270:	4630      	mov	r0, r6
 8007272:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007276:	89ab      	ldrh	r3, [r5, #12]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d907      	bls.n	800728c <_fwalk_sglue+0x38>
 800727c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007280:	3301      	adds	r3, #1
 8007282:	d003      	beq.n	800728c <_fwalk_sglue+0x38>
 8007284:	4629      	mov	r1, r5
 8007286:	4638      	mov	r0, r7
 8007288:	47c0      	blx	r8
 800728a:	4306      	orrs	r6, r0
 800728c:	3568      	adds	r5, #104	; 0x68
 800728e:	e7e9      	b.n	8007264 <_fwalk_sglue+0x10>

08007290 <siprintf>:
 8007290:	b40e      	push	{r1, r2, r3}
 8007292:	b500      	push	{lr}
 8007294:	b09c      	sub	sp, #112	; 0x70
 8007296:	ab1d      	add	r3, sp, #116	; 0x74
 8007298:	9002      	str	r0, [sp, #8]
 800729a:	9006      	str	r0, [sp, #24]
 800729c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80072a0:	4809      	ldr	r0, [pc, #36]	; (80072c8 <siprintf+0x38>)
 80072a2:	9107      	str	r1, [sp, #28]
 80072a4:	9104      	str	r1, [sp, #16]
 80072a6:	4909      	ldr	r1, [pc, #36]	; (80072cc <siprintf+0x3c>)
 80072a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80072ac:	9105      	str	r1, [sp, #20]
 80072ae:	6800      	ldr	r0, [r0, #0]
 80072b0:	9301      	str	r3, [sp, #4]
 80072b2:	a902      	add	r1, sp, #8
 80072b4:	f001 fb94 	bl	80089e0 <_svfiprintf_r>
 80072b8:	9b02      	ldr	r3, [sp, #8]
 80072ba:	2200      	movs	r2, #0
 80072bc:	701a      	strb	r2, [r3, #0]
 80072be:	b01c      	add	sp, #112	; 0x70
 80072c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80072c4:	b003      	add	sp, #12
 80072c6:	4770      	bx	lr
 80072c8:	200007ac 	.word	0x200007ac
 80072cc:	ffff0208 	.word	0xffff0208

080072d0 <__sread>:
 80072d0:	b510      	push	{r4, lr}
 80072d2:	460c      	mov	r4, r1
 80072d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072d8:	f000 f86c 	bl	80073b4 <_read_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	bfab      	itete	ge
 80072e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80072e2:	89a3      	ldrhlt	r3, [r4, #12]
 80072e4:	181b      	addge	r3, r3, r0
 80072e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80072ea:	bfac      	ite	ge
 80072ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80072ee:	81a3      	strhlt	r3, [r4, #12]
 80072f0:	bd10      	pop	{r4, pc}

080072f2 <__swrite>:
 80072f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072f6:	461f      	mov	r7, r3
 80072f8:	898b      	ldrh	r3, [r1, #12]
 80072fa:	05db      	lsls	r3, r3, #23
 80072fc:	4605      	mov	r5, r0
 80072fe:	460c      	mov	r4, r1
 8007300:	4616      	mov	r6, r2
 8007302:	d505      	bpl.n	8007310 <__swrite+0x1e>
 8007304:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007308:	2302      	movs	r3, #2
 800730a:	2200      	movs	r2, #0
 800730c:	f000 f840 	bl	8007390 <_lseek_r>
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007316:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800731a:	81a3      	strh	r3, [r4, #12]
 800731c:	4632      	mov	r2, r6
 800731e:	463b      	mov	r3, r7
 8007320:	4628      	mov	r0, r5
 8007322:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007326:	f000 b867 	b.w	80073f8 <_write_r>

0800732a <__sseek>:
 800732a:	b510      	push	{r4, lr}
 800732c:	460c      	mov	r4, r1
 800732e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007332:	f000 f82d 	bl	8007390 <_lseek_r>
 8007336:	1c43      	adds	r3, r0, #1
 8007338:	89a3      	ldrh	r3, [r4, #12]
 800733a:	bf15      	itete	ne
 800733c:	6560      	strne	r0, [r4, #84]	; 0x54
 800733e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007342:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007346:	81a3      	strheq	r3, [r4, #12]
 8007348:	bf18      	it	ne
 800734a:	81a3      	strhne	r3, [r4, #12]
 800734c:	bd10      	pop	{r4, pc}

0800734e <__sclose>:
 800734e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007352:	f000 b80d 	b.w	8007370 <_close_r>

08007356 <memset>:
 8007356:	4402      	add	r2, r0
 8007358:	4603      	mov	r3, r0
 800735a:	4293      	cmp	r3, r2
 800735c:	d100      	bne.n	8007360 <memset+0xa>
 800735e:	4770      	bx	lr
 8007360:	f803 1b01 	strb.w	r1, [r3], #1
 8007364:	e7f9      	b.n	800735a <memset+0x4>
	...

08007368 <_localeconv_r>:
 8007368:	4800      	ldr	r0, [pc, #0]	; (800736c <_localeconv_r+0x4>)
 800736a:	4770      	bx	lr
 800736c:	200008a0 	.word	0x200008a0

08007370 <_close_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d06      	ldr	r5, [pc, #24]	; (800738c <_close_r+0x1c>)
 8007374:	2300      	movs	r3, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	602b      	str	r3, [r5, #0]
 800737c:	f7fa fd9d 	bl	8001eba <_close>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d102      	bne.n	800738a <_close_r+0x1a>
 8007384:	682b      	ldr	r3, [r5, #0]
 8007386:	b103      	cbz	r3, 800738a <_close_r+0x1a>
 8007388:	6023      	str	r3, [r4, #0]
 800738a:	bd38      	pop	{r3, r4, r5, pc}
 800738c:	20000c64 	.word	0x20000c64

08007390 <_lseek_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	4d07      	ldr	r5, [pc, #28]	; (80073b0 <_lseek_r+0x20>)
 8007394:	4604      	mov	r4, r0
 8007396:	4608      	mov	r0, r1
 8007398:	4611      	mov	r1, r2
 800739a:	2200      	movs	r2, #0
 800739c:	602a      	str	r2, [r5, #0]
 800739e:	461a      	mov	r2, r3
 80073a0:	f7fa fdb2 	bl	8001f08 <_lseek>
 80073a4:	1c43      	adds	r3, r0, #1
 80073a6:	d102      	bne.n	80073ae <_lseek_r+0x1e>
 80073a8:	682b      	ldr	r3, [r5, #0]
 80073aa:	b103      	cbz	r3, 80073ae <_lseek_r+0x1e>
 80073ac:	6023      	str	r3, [r4, #0]
 80073ae:	bd38      	pop	{r3, r4, r5, pc}
 80073b0:	20000c64 	.word	0x20000c64

080073b4 <_read_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d07      	ldr	r5, [pc, #28]	; (80073d4 <_read_r+0x20>)
 80073b8:	4604      	mov	r4, r0
 80073ba:	4608      	mov	r0, r1
 80073bc:	4611      	mov	r1, r2
 80073be:	2200      	movs	r2, #0
 80073c0:	602a      	str	r2, [r5, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	f7fa fd40 	bl	8001e48 <_read>
 80073c8:	1c43      	adds	r3, r0, #1
 80073ca:	d102      	bne.n	80073d2 <_read_r+0x1e>
 80073cc:	682b      	ldr	r3, [r5, #0]
 80073ce:	b103      	cbz	r3, 80073d2 <_read_r+0x1e>
 80073d0:	6023      	str	r3, [r4, #0]
 80073d2:	bd38      	pop	{r3, r4, r5, pc}
 80073d4:	20000c64 	.word	0x20000c64

080073d8 <_sbrk_r>:
 80073d8:	b538      	push	{r3, r4, r5, lr}
 80073da:	4d06      	ldr	r5, [pc, #24]	; (80073f4 <_sbrk_r+0x1c>)
 80073dc:	2300      	movs	r3, #0
 80073de:	4604      	mov	r4, r0
 80073e0:	4608      	mov	r0, r1
 80073e2:	602b      	str	r3, [r5, #0]
 80073e4:	f7fa fd9e 	bl	8001f24 <_sbrk>
 80073e8:	1c43      	adds	r3, r0, #1
 80073ea:	d102      	bne.n	80073f2 <_sbrk_r+0x1a>
 80073ec:	682b      	ldr	r3, [r5, #0]
 80073ee:	b103      	cbz	r3, 80073f2 <_sbrk_r+0x1a>
 80073f0:	6023      	str	r3, [r4, #0]
 80073f2:	bd38      	pop	{r3, r4, r5, pc}
 80073f4:	20000c64 	.word	0x20000c64

080073f8 <_write_r>:
 80073f8:	b538      	push	{r3, r4, r5, lr}
 80073fa:	4d07      	ldr	r5, [pc, #28]	; (8007418 <_write_r+0x20>)
 80073fc:	4604      	mov	r4, r0
 80073fe:	4608      	mov	r0, r1
 8007400:	4611      	mov	r1, r2
 8007402:	2200      	movs	r2, #0
 8007404:	602a      	str	r2, [r5, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	f7fa fd3b 	bl	8001e82 <_write>
 800740c:	1c43      	adds	r3, r0, #1
 800740e:	d102      	bne.n	8007416 <_write_r+0x1e>
 8007410:	682b      	ldr	r3, [r5, #0]
 8007412:	b103      	cbz	r3, 8007416 <_write_r+0x1e>
 8007414:	6023      	str	r3, [r4, #0]
 8007416:	bd38      	pop	{r3, r4, r5, pc}
 8007418:	20000c64 	.word	0x20000c64

0800741c <__errno>:
 800741c:	4b01      	ldr	r3, [pc, #4]	; (8007424 <__errno+0x8>)
 800741e:	6818      	ldr	r0, [r3, #0]
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop
 8007424:	200007ac 	.word	0x200007ac

08007428 <__libc_init_array>:
 8007428:	b570      	push	{r4, r5, r6, lr}
 800742a:	4d0d      	ldr	r5, [pc, #52]	; (8007460 <__libc_init_array+0x38>)
 800742c:	4c0d      	ldr	r4, [pc, #52]	; (8007464 <__libc_init_array+0x3c>)
 800742e:	1b64      	subs	r4, r4, r5
 8007430:	10a4      	asrs	r4, r4, #2
 8007432:	2600      	movs	r6, #0
 8007434:	42a6      	cmp	r6, r4
 8007436:	d109      	bne.n	800744c <__libc_init_array+0x24>
 8007438:	4d0b      	ldr	r5, [pc, #44]	; (8007468 <__libc_init_array+0x40>)
 800743a:	4c0c      	ldr	r4, [pc, #48]	; (800746c <__libc_init_array+0x44>)
 800743c:	f002 f8d8 	bl	80095f0 <_init>
 8007440:	1b64      	subs	r4, r4, r5
 8007442:	10a4      	asrs	r4, r4, #2
 8007444:	2600      	movs	r6, #0
 8007446:	42a6      	cmp	r6, r4
 8007448:	d105      	bne.n	8007456 <__libc_init_array+0x2e>
 800744a:	bd70      	pop	{r4, r5, r6, pc}
 800744c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007450:	4798      	blx	r3
 8007452:	3601      	adds	r6, #1
 8007454:	e7ee      	b.n	8007434 <__libc_init_array+0xc>
 8007456:	f855 3b04 	ldr.w	r3, [r5], #4
 800745a:	4798      	blx	r3
 800745c:	3601      	adds	r6, #1
 800745e:	e7f2      	b.n	8007446 <__libc_init_array+0x1e>
 8007460:	0801292c 	.word	0x0801292c
 8007464:	0801292c 	.word	0x0801292c
 8007468:	0801292c 	.word	0x0801292c
 800746c:	08012930 	.word	0x08012930

08007470 <__retarget_lock_init_recursive>:
 8007470:	4770      	bx	lr

08007472 <__retarget_lock_acquire_recursive>:
 8007472:	4770      	bx	lr

08007474 <__retarget_lock_release_recursive>:
 8007474:	4770      	bx	lr

08007476 <memcpy>:
 8007476:	440a      	add	r2, r1
 8007478:	4291      	cmp	r1, r2
 800747a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800747e:	d100      	bne.n	8007482 <memcpy+0xc>
 8007480:	4770      	bx	lr
 8007482:	b510      	push	{r4, lr}
 8007484:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800748c:	4291      	cmp	r1, r2
 800748e:	d1f9      	bne.n	8007484 <memcpy+0xe>
 8007490:	bd10      	pop	{r4, pc}

08007492 <quorem>:
 8007492:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007496:	6903      	ldr	r3, [r0, #16]
 8007498:	690c      	ldr	r4, [r1, #16]
 800749a:	42a3      	cmp	r3, r4
 800749c:	4607      	mov	r7, r0
 800749e:	db7e      	blt.n	800759e <quorem+0x10c>
 80074a0:	3c01      	subs	r4, #1
 80074a2:	f101 0814 	add.w	r8, r1, #20
 80074a6:	f100 0514 	add.w	r5, r0, #20
 80074aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80074ae:	9301      	str	r3, [sp, #4]
 80074b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80074b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80074b8:	3301      	adds	r3, #1
 80074ba:	429a      	cmp	r2, r3
 80074bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80074c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80074c4:	fbb2 f6f3 	udiv	r6, r2, r3
 80074c8:	d331      	bcc.n	800752e <quorem+0x9c>
 80074ca:	f04f 0e00 	mov.w	lr, #0
 80074ce:	4640      	mov	r0, r8
 80074d0:	46ac      	mov	ip, r5
 80074d2:	46f2      	mov	sl, lr
 80074d4:	f850 2b04 	ldr.w	r2, [r0], #4
 80074d8:	b293      	uxth	r3, r2
 80074da:	fb06 e303 	mla	r3, r6, r3, lr
 80074de:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074e2:	0c1a      	lsrs	r2, r3, #16
 80074e4:	b29b      	uxth	r3, r3
 80074e6:	ebaa 0303 	sub.w	r3, sl, r3
 80074ea:	f8dc a000 	ldr.w	sl, [ip]
 80074ee:	fa13 f38a 	uxtah	r3, r3, sl
 80074f2:	fb06 220e 	mla	r2, r6, lr, r2
 80074f6:	9300      	str	r3, [sp, #0]
 80074f8:	9b00      	ldr	r3, [sp, #0]
 80074fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80074fe:	b292      	uxth	r2, r2
 8007500:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007504:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007508:	f8bd 3000 	ldrh.w	r3, [sp]
 800750c:	4581      	cmp	r9, r0
 800750e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007512:	f84c 3b04 	str.w	r3, [ip], #4
 8007516:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800751a:	d2db      	bcs.n	80074d4 <quorem+0x42>
 800751c:	f855 300b 	ldr.w	r3, [r5, fp]
 8007520:	b92b      	cbnz	r3, 800752e <quorem+0x9c>
 8007522:	9b01      	ldr	r3, [sp, #4]
 8007524:	3b04      	subs	r3, #4
 8007526:	429d      	cmp	r5, r3
 8007528:	461a      	mov	r2, r3
 800752a:	d32c      	bcc.n	8007586 <quorem+0xf4>
 800752c:	613c      	str	r4, [r7, #16]
 800752e:	4638      	mov	r0, r7
 8007530:	f001 f8f4 	bl	800871c <__mcmp>
 8007534:	2800      	cmp	r0, #0
 8007536:	db22      	blt.n	800757e <quorem+0xec>
 8007538:	3601      	adds	r6, #1
 800753a:	4629      	mov	r1, r5
 800753c:	2000      	movs	r0, #0
 800753e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007542:	f8d1 c000 	ldr.w	ip, [r1]
 8007546:	b293      	uxth	r3, r2
 8007548:	1ac3      	subs	r3, r0, r3
 800754a:	0c12      	lsrs	r2, r2, #16
 800754c:	fa13 f38c 	uxtah	r3, r3, ip
 8007550:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8007554:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007558:	b29b      	uxth	r3, r3
 800755a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800755e:	45c1      	cmp	r9, r8
 8007560:	f841 3b04 	str.w	r3, [r1], #4
 8007564:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007568:	d2e9      	bcs.n	800753e <quorem+0xac>
 800756a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800756e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007572:	b922      	cbnz	r2, 800757e <quorem+0xec>
 8007574:	3b04      	subs	r3, #4
 8007576:	429d      	cmp	r5, r3
 8007578:	461a      	mov	r2, r3
 800757a:	d30a      	bcc.n	8007592 <quorem+0x100>
 800757c:	613c      	str	r4, [r7, #16]
 800757e:	4630      	mov	r0, r6
 8007580:	b003      	add	sp, #12
 8007582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007586:	6812      	ldr	r2, [r2, #0]
 8007588:	3b04      	subs	r3, #4
 800758a:	2a00      	cmp	r2, #0
 800758c:	d1ce      	bne.n	800752c <quorem+0x9a>
 800758e:	3c01      	subs	r4, #1
 8007590:	e7c9      	b.n	8007526 <quorem+0x94>
 8007592:	6812      	ldr	r2, [r2, #0]
 8007594:	3b04      	subs	r3, #4
 8007596:	2a00      	cmp	r2, #0
 8007598:	d1f0      	bne.n	800757c <quorem+0xea>
 800759a:	3c01      	subs	r4, #1
 800759c:	e7eb      	b.n	8007576 <quorem+0xe4>
 800759e:	2000      	movs	r0, #0
 80075a0:	e7ee      	b.n	8007580 <quorem+0xee>
 80075a2:	0000      	movs	r0, r0
 80075a4:	0000      	movs	r0, r0
	...

080075a8 <_dtoa_r>:
 80075a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ac:	ed2d 8b04 	vpush	{d8-d9}
 80075b0:	69c5      	ldr	r5, [r0, #28]
 80075b2:	b093      	sub	sp, #76	; 0x4c
 80075b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80075b8:	ec57 6b10 	vmov	r6, r7, d0
 80075bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80075c0:	9107      	str	r1, [sp, #28]
 80075c2:	4604      	mov	r4, r0
 80075c4:	920a      	str	r2, [sp, #40]	; 0x28
 80075c6:	930d      	str	r3, [sp, #52]	; 0x34
 80075c8:	b975      	cbnz	r5, 80075e8 <_dtoa_r+0x40>
 80075ca:	2010      	movs	r0, #16
 80075cc:	f7ff f854 	bl	8006678 <malloc>
 80075d0:	4602      	mov	r2, r0
 80075d2:	61e0      	str	r0, [r4, #28]
 80075d4:	b920      	cbnz	r0, 80075e0 <_dtoa_r+0x38>
 80075d6:	4bae      	ldr	r3, [pc, #696]	; (8007890 <_dtoa_r+0x2e8>)
 80075d8:	21ef      	movs	r1, #239	; 0xef
 80075da:	48ae      	ldr	r0, [pc, #696]	; (8007894 <_dtoa_r+0x2ec>)
 80075dc:	f001 fbc6 	bl	8008d6c <__assert_func>
 80075e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80075e4:	6005      	str	r5, [r0, #0]
 80075e6:	60c5      	str	r5, [r0, #12]
 80075e8:	69e3      	ldr	r3, [r4, #28]
 80075ea:	6819      	ldr	r1, [r3, #0]
 80075ec:	b151      	cbz	r1, 8007604 <_dtoa_r+0x5c>
 80075ee:	685a      	ldr	r2, [r3, #4]
 80075f0:	604a      	str	r2, [r1, #4]
 80075f2:	2301      	movs	r3, #1
 80075f4:	4093      	lsls	r3, r2
 80075f6:	608b      	str	r3, [r1, #8]
 80075f8:	4620      	mov	r0, r4
 80075fa:	f000 fe53 	bl	80082a4 <_Bfree>
 80075fe:	69e3      	ldr	r3, [r4, #28]
 8007600:	2200      	movs	r2, #0
 8007602:	601a      	str	r2, [r3, #0]
 8007604:	1e3b      	subs	r3, r7, #0
 8007606:	bfbb      	ittet	lt
 8007608:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800760c:	9303      	strlt	r3, [sp, #12]
 800760e:	2300      	movge	r3, #0
 8007610:	2201      	movlt	r2, #1
 8007612:	bfac      	ite	ge
 8007614:	f8c8 3000 	strge.w	r3, [r8]
 8007618:	f8c8 2000 	strlt.w	r2, [r8]
 800761c:	4b9e      	ldr	r3, [pc, #632]	; (8007898 <_dtoa_r+0x2f0>)
 800761e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007622:	ea33 0308 	bics.w	r3, r3, r8
 8007626:	d11b      	bne.n	8007660 <_dtoa_r+0xb8>
 8007628:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800762a:	f242 730f 	movw	r3, #9999	; 0x270f
 800762e:	6013      	str	r3, [r2, #0]
 8007630:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007634:	4333      	orrs	r3, r6
 8007636:	f000 8593 	beq.w	8008160 <_dtoa_r+0xbb8>
 800763a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800763c:	b963      	cbnz	r3, 8007658 <_dtoa_r+0xb0>
 800763e:	4b97      	ldr	r3, [pc, #604]	; (800789c <_dtoa_r+0x2f4>)
 8007640:	e027      	b.n	8007692 <_dtoa_r+0xea>
 8007642:	4b97      	ldr	r3, [pc, #604]	; (80078a0 <_dtoa_r+0x2f8>)
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	3308      	adds	r3, #8
 8007648:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800764a:	6013      	str	r3, [r2, #0]
 800764c:	9800      	ldr	r0, [sp, #0]
 800764e:	b013      	add	sp, #76	; 0x4c
 8007650:	ecbd 8b04 	vpop	{d8-d9}
 8007654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007658:	4b90      	ldr	r3, [pc, #576]	; (800789c <_dtoa_r+0x2f4>)
 800765a:	9300      	str	r3, [sp, #0]
 800765c:	3303      	adds	r3, #3
 800765e:	e7f3      	b.n	8007648 <_dtoa_r+0xa0>
 8007660:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007664:	2200      	movs	r2, #0
 8007666:	ec51 0b17 	vmov	r0, r1, d7
 800766a:	eeb0 8a47 	vmov.f32	s16, s14
 800766e:	eef0 8a67 	vmov.f32	s17, s15
 8007672:	2300      	movs	r3, #0
 8007674:	f7f9 fa28 	bl	8000ac8 <__aeabi_dcmpeq>
 8007678:	4681      	mov	r9, r0
 800767a:	b160      	cbz	r0, 8007696 <_dtoa_r+0xee>
 800767c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800767e:	2301      	movs	r3, #1
 8007680:	6013      	str	r3, [r2, #0]
 8007682:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007684:	2b00      	cmp	r3, #0
 8007686:	f000 8568 	beq.w	800815a <_dtoa_r+0xbb2>
 800768a:	4b86      	ldr	r3, [pc, #536]	; (80078a4 <_dtoa_r+0x2fc>)
 800768c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	3b01      	subs	r3, #1
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	e7da      	b.n	800764c <_dtoa_r+0xa4>
 8007696:	aa10      	add	r2, sp, #64	; 0x40
 8007698:	a911      	add	r1, sp, #68	; 0x44
 800769a:	4620      	mov	r0, r4
 800769c:	eeb0 0a48 	vmov.f32	s0, s16
 80076a0:	eef0 0a68 	vmov.f32	s1, s17
 80076a4:	f001 f8e0 	bl	8008868 <__d2b>
 80076a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80076ac:	4682      	mov	sl, r0
 80076ae:	2d00      	cmp	r5, #0
 80076b0:	d07f      	beq.n	80077b2 <_dtoa_r+0x20a>
 80076b2:	ee18 3a90 	vmov	r3, s17
 80076b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80076be:	ec51 0b18 	vmov	r0, r1, d8
 80076c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80076c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80076ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80076ce:	4619      	mov	r1, r3
 80076d0:	2200      	movs	r2, #0
 80076d2:	4b75      	ldr	r3, [pc, #468]	; (80078a8 <_dtoa_r+0x300>)
 80076d4:	f7f8 fdd8 	bl	8000288 <__aeabi_dsub>
 80076d8:	a367      	add	r3, pc, #412	; (adr r3, 8007878 <_dtoa_r+0x2d0>)
 80076da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076de:	f7f8 ff8b 	bl	80005f8 <__aeabi_dmul>
 80076e2:	a367      	add	r3, pc, #412	; (adr r3, 8007880 <_dtoa_r+0x2d8>)
 80076e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076e8:	f7f8 fdd0 	bl	800028c <__adddf3>
 80076ec:	4606      	mov	r6, r0
 80076ee:	4628      	mov	r0, r5
 80076f0:	460f      	mov	r7, r1
 80076f2:	f7f8 ff17 	bl	8000524 <__aeabi_i2d>
 80076f6:	a364      	add	r3, pc, #400	; (adr r3, 8007888 <_dtoa_r+0x2e0>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 ff7c 	bl	80005f8 <__aeabi_dmul>
 8007700:	4602      	mov	r2, r0
 8007702:	460b      	mov	r3, r1
 8007704:	4630      	mov	r0, r6
 8007706:	4639      	mov	r1, r7
 8007708:	f7f8 fdc0 	bl	800028c <__adddf3>
 800770c:	4606      	mov	r6, r0
 800770e:	460f      	mov	r7, r1
 8007710:	f7f9 fa22 	bl	8000b58 <__aeabi_d2iz>
 8007714:	2200      	movs	r2, #0
 8007716:	4683      	mov	fp, r0
 8007718:	2300      	movs	r3, #0
 800771a:	4630      	mov	r0, r6
 800771c:	4639      	mov	r1, r7
 800771e:	f7f9 f9dd 	bl	8000adc <__aeabi_dcmplt>
 8007722:	b148      	cbz	r0, 8007738 <_dtoa_r+0x190>
 8007724:	4658      	mov	r0, fp
 8007726:	f7f8 fefd 	bl	8000524 <__aeabi_i2d>
 800772a:	4632      	mov	r2, r6
 800772c:	463b      	mov	r3, r7
 800772e:	f7f9 f9cb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007732:	b908      	cbnz	r0, 8007738 <_dtoa_r+0x190>
 8007734:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007738:	f1bb 0f16 	cmp.w	fp, #22
 800773c:	d857      	bhi.n	80077ee <_dtoa_r+0x246>
 800773e:	4b5b      	ldr	r3, [pc, #364]	; (80078ac <_dtoa_r+0x304>)
 8007740:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007748:	ec51 0b18 	vmov	r0, r1, d8
 800774c:	f7f9 f9c6 	bl	8000adc <__aeabi_dcmplt>
 8007750:	2800      	cmp	r0, #0
 8007752:	d04e      	beq.n	80077f2 <_dtoa_r+0x24a>
 8007754:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007758:	2300      	movs	r3, #0
 800775a:	930c      	str	r3, [sp, #48]	; 0x30
 800775c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800775e:	1b5b      	subs	r3, r3, r5
 8007760:	1e5a      	subs	r2, r3, #1
 8007762:	bf45      	ittet	mi
 8007764:	f1c3 0301 	rsbmi	r3, r3, #1
 8007768:	9305      	strmi	r3, [sp, #20]
 800776a:	2300      	movpl	r3, #0
 800776c:	2300      	movmi	r3, #0
 800776e:	9206      	str	r2, [sp, #24]
 8007770:	bf54      	ite	pl
 8007772:	9305      	strpl	r3, [sp, #20]
 8007774:	9306      	strmi	r3, [sp, #24]
 8007776:	f1bb 0f00 	cmp.w	fp, #0
 800777a:	db3c      	blt.n	80077f6 <_dtoa_r+0x24e>
 800777c:	9b06      	ldr	r3, [sp, #24]
 800777e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8007782:	445b      	add	r3, fp
 8007784:	9306      	str	r3, [sp, #24]
 8007786:	2300      	movs	r3, #0
 8007788:	9308      	str	r3, [sp, #32]
 800778a:	9b07      	ldr	r3, [sp, #28]
 800778c:	2b09      	cmp	r3, #9
 800778e:	d868      	bhi.n	8007862 <_dtoa_r+0x2ba>
 8007790:	2b05      	cmp	r3, #5
 8007792:	bfc4      	itt	gt
 8007794:	3b04      	subgt	r3, #4
 8007796:	9307      	strgt	r3, [sp, #28]
 8007798:	9b07      	ldr	r3, [sp, #28]
 800779a:	f1a3 0302 	sub.w	r3, r3, #2
 800779e:	bfcc      	ite	gt
 80077a0:	2500      	movgt	r5, #0
 80077a2:	2501      	movle	r5, #1
 80077a4:	2b03      	cmp	r3, #3
 80077a6:	f200 8085 	bhi.w	80078b4 <_dtoa_r+0x30c>
 80077aa:	e8df f003 	tbb	[pc, r3]
 80077ae:	3b2e      	.short	0x3b2e
 80077b0:	5839      	.short	0x5839
 80077b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80077b6:	441d      	add	r5, r3
 80077b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80077bc:	2b20      	cmp	r3, #32
 80077be:	bfc1      	itttt	gt
 80077c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80077c4:	fa08 f803 	lslgt.w	r8, r8, r3
 80077c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80077cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80077d0:	bfd6      	itet	le
 80077d2:	f1c3 0320 	rsble	r3, r3, #32
 80077d6:	ea48 0003 	orrgt.w	r0, r8, r3
 80077da:	fa06 f003 	lslle.w	r0, r6, r3
 80077de:	f7f8 fe91 	bl	8000504 <__aeabi_ui2d>
 80077e2:	2201      	movs	r2, #1
 80077e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80077e8:	3d01      	subs	r5, #1
 80077ea:	920e      	str	r2, [sp, #56]	; 0x38
 80077ec:	e76f      	b.n	80076ce <_dtoa_r+0x126>
 80077ee:	2301      	movs	r3, #1
 80077f0:	e7b3      	b.n	800775a <_dtoa_r+0x1b2>
 80077f2:	900c      	str	r0, [sp, #48]	; 0x30
 80077f4:	e7b2      	b.n	800775c <_dtoa_r+0x1b4>
 80077f6:	9b05      	ldr	r3, [sp, #20]
 80077f8:	eba3 030b 	sub.w	r3, r3, fp
 80077fc:	9305      	str	r3, [sp, #20]
 80077fe:	f1cb 0300 	rsb	r3, fp, #0
 8007802:	9308      	str	r3, [sp, #32]
 8007804:	2300      	movs	r3, #0
 8007806:	930b      	str	r3, [sp, #44]	; 0x2c
 8007808:	e7bf      	b.n	800778a <_dtoa_r+0x1e2>
 800780a:	2300      	movs	r3, #0
 800780c:	9309      	str	r3, [sp, #36]	; 0x24
 800780e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007810:	2b00      	cmp	r3, #0
 8007812:	dc52      	bgt.n	80078ba <_dtoa_r+0x312>
 8007814:	2301      	movs	r3, #1
 8007816:	9301      	str	r3, [sp, #4]
 8007818:	9304      	str	r3, [sp, #16]
 800781a:	461a      	mov	r2, r3
 800781c:	920a      	str	r2, [sp, #40]	; 0x28
 800781e:	e00b      	b.n	8007838 <_dtoa_r+0x290>
 8007820:	2301      	movs	r3, #1
 8007822:	e7f3      	b.n	800780c <_dtoa_r+0x264>
 8007824:	2300      	movs	r3, #0
 8007826:	9309      	str	r3, [sp, #36]	; 0x24
 8007828:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800782a:	445b      	add	r3, fp
 800782c:	9301      	str	r3, [sp, #4]
 800782e:	3301      	adds	r3, #1
 8007830:	2b01      	cmp	r3, #1
 8007832:	9304      	str	r3, [sp, #16]
 8007834:	bfb8      	it	lt
 8007836:	2301      	movlt	r3, #1
 8007838:	69e0      	ldr	r0, [r4, #28]
 800783a:	2100      	movs	r1, #0
 800783c:	2204      	movs	r2, #4
 800783e:	f102 0614 	add.w	r6, r2, #20
 8007842:	429e      	cmp	r6, r3
 8007844:	d93d      	bls.n	80078c2 <_dtoa_r+0x31a>
 8007846:	6041      	str	r1, [r0, #4]
 8007848:	4620      	mov	r0, r4
 800784a:	f000 fceb 	bl	8008224 <_Balloc>
 800784e:	9000      	str	r0, [sp, #0]
 8007850:	2800      	cmp	r0, #0
 8007852:	d139      	bne.n	80078c8 <_dtoa_r+0x320>
 8007854:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <_dtoa_r+0x308>)
 8007856:	4602      	mov	r2, r0
 8007858:	f240 11af 	movw	r1, #431	; 0x1af
 800785c:	e6bd      	b.n	80075da <_dtoa_r+0x32>
 800785e:	2301      	movs	r3, #1
 8007860:	e7e1      	b.n	8007826 <_dtoa_r+0x27e>
 8007862:	2501      	movs	r5, #1
 8007864:	2300      	movs	r3, #0
 8007866:	9307      	str	r3, [sp, #28]
 8007868:	9509      	str	r5, [sp, #36]	; 0x24
 800786a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800786e:	9301      	str	r3, [sp, #4]
 8007870:	9304      	str	r3, [sp, #16]
 8007872:	2200      	movs	r2, #0
 8007874:	2312      	movs	r3, #18
 8007876:	e7d1      	b.n	800781c <_dtoa_r+0x274>
 8007878:	636f4361 	.word	0x636f4361
 800787c:	3fd287a7 	.word	0x3fd287a7
 8007880:	8b60c8b3 	.word	0x8b60c8b3
 8007884:	3fc68a28 	.word	0x3fc68a28
 8007888:	509f79fb 	.word	0x509f79fb
 800788c:	3fd34413 	.word	0x3fd34413
 8007890:	080125d9 	.word	0x080125d9
 8007894:	080125f0 	.word	0x080125f0
 8007898:	7ff00000 	.word	0x7ff00000
 800789c:	080125d5 	.word	0x080125d5
 80078a0:	080125cc 	.word	0x080125cc
 80078a4:	080125a9 	.word	0x080125a9
 80078a8:	3ff80000 	.word	0x3ff80000
 80078ac:	080126e0 	.word	0x080126e0
 80078b0:	08012648 	.word	0x08012648
 80078b4:	2301      	movs	r3, #1
 80078b6:	9309      	str	r3, [sp, #36]	; 0x24
 80078b8:	e7d7      	b.n	800786a <_dtoa_r+0x2c2>
 80078ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078bc:	9301      	str	r3, [sp, #4]
 80078be:	9304      	str	r3, [sp, #16]
 80078c0:	e7ba      	b.n	8007838 <_dtoa_r+0x290>
 80078c2:	3101      	adds	r1, #1
 80078c4:	0052      	lsls	r2, r2, #1
 80078c6:	e7ba      	b.n	800783e <_dtoa_r+0x296>
 80078c8:	69e3      	ldr	r3, [r4, #28]
 80078ca:	9a00      	ldr	r2, [sp, #0]
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	9b04      	ldr	r3, [sp, #16]
 80078d0:	2b0e      	cmp	r3, #14
 80078d2:	f200 80a8 	bhi.w	8007a26 <_dtoa_r+0x47e>
 80078d6:	2d00      	cmp	r5, #0
 80078d8:	f000 80a5 	beq.w	8007a26 <_dtoa_r+0x47e>
 80078dc:	f1bb 0f00 	cmp.w	fp, #0
 80078e0:	dd38      	ble.n	8007954 <_dtoa_r+0x3ac>
 80078e2:	4bc0      	ldr	r3, [pc, #768]	; (8007be4 <_dtoa_r+0x63c>)
 80078e4:	f00b 020f 	and.w	r2, fp, #15
 80078e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80078ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80078f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80078f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80078f8:	d019      	beq.n	800792e <_dtoa_r+0x386>
 80078fa:	4bbb      	ldr	r3, [pc, #748]	; (8007be8 <_dtoa_r+0x640>)
 80078fc:	ec51 0b18 	vmov	r0, r1, d8
 8007900:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007904:	f7f8 ffa2 	bl	800084c <__aeabi_ddiv>
 8007908:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800790c:	f008 080f 	and.w	r8, r8, #15
 8007910:	2503      	movs	r5, #3
 8007912:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007be8 <_dtoa_r+0x640>
 8007916:	f1b8 0f00 	cmp.w	r8, #0
 800791a:	d10a      	bne.n	8007932 <_dtoa_r+0x38a>
 800791c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007920:	4632      	mov	r2, r6
 8007922:	463b      	mov	r3, r7
 8007924:	f7f8 ff92 	bl	800084c <__aeabi_ddiv>
 8007928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800792c:	e02b      	b.n	8007986 <_dtoa_r+0x3de>
 800792e:	2502      	movs	r5, #2
 8007930:	e7ef      	b.n	8007912 <_dtoa_r+0x36a>
 8007932:	f018 0f01 	tst.w	r8, #1
 8007936:	d008      	beq.n	800794a <_dtoa_r+0x3a2>
 8007938:	4630      	mov	r0, r6
 800793a:	4639      	mov	r1, r7
 800793c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007940:	f7f8 fe5a 	bl	80005f8 <__aeabi_dmul>
 8007944:	3501      	adds	r5, #1
 8007946:	4606      	mov	r6, r0
 8007948:	460f      	mov	r7, r1
 800794a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800794e:	f109 0908 	add.w	r9, r9, #8
 8007952:	e7e0      	b.n	8007916 <_dtoa_r+0x36e>
 8007954:	f000 809f 	beq.w	8007a96 <_dtoa_r+0x4ee>
 8007958:	f1cb 0600 	rsb	r6, fp, #0
 800795c:	4ba1      	ldr	r3, [pc, #644]	; (8007be4 <_dtoa_r+0x63c>)
 800795e:	4fa2      	ldr	r7, [pc, #648]	; (8007be8 <_dtoa_r+0x640>)
 8007960:	f006 020f 	and.w	r2, r6, #15
 8007964:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800796c:	ec51 0b18 	vmov	r0, r1, d8
 8007970:	f7f8 fe42 	bl	80005f8 <__aeabi_dmul>
 8007974:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007978:	1136      	asrs	r6, r6, #4
 800797a:	2300      	movs	r3, #0
 800797c:	2502      	movs	r5, #2
 800797e:	2e00      	cmp	r6, #0
 8007980:	d17e      	bne.n	8007a80 <_dtoa_r+0x4d8>
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1d0      	bne.n	8007928 <_dtoa_r+0x380>
 8007986:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007988:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800798c:	2b00      	cmp	r3, #0
 800798e:	f000 8084 	beq.w	8007a9a <_dtoa_r+0x4f2>
 8007992:	4b96      	ldr	r3, [pc, #600]	; (8007bec <_dtoa_r+0x644>)
 8007994:	2200      	movs	r2, #0
 8007996:	4640      	mov	r0, r8
 8007998:	4649      	mov	r1, r9
 800799a:	f7f9 f89f 	bl	8000adc <__aeabi_dcmplt>
 800799e:	2800      	cmp	r0, #0
 80079a0:	d07b      	beq.n	8007a9a <_dtoa_r+0x4f2>
 80079a2:	9b04      	ldr	r3, [sp, #16]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d078      	beq.n	8007a9a <_dtoa_r+0x4f2>
 80079a8:	9b01      	ldr	r3, [sp, #4]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	dd39      	ble.n	8007a22 <_dtoa_r+0x47a>
 80079ae:	4b90      	ldr	r3, [pc, #576]	; (8007bf0 <_dtoa_r+0x648>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	4640      	mov	r0, r8
 80079b4:	4649      	mov	r1, r9
 80079b6:	f7f8 fe1f 	bl	80005f8 <__aeabi_dmul>
 80079ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079be:	9e01      	ldr	r6, [sp, #4]
 80079c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80079c4:	3501      	adds	r5, #1
 80079c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80079ca:	4628      	mov	r0, r5
 80079cc:	f7f8 fdaa 	bl	8000524 <__aeabi_i2d>
 80079d0:	4642      	mov	r2, r8
 80079d2:	464b      	mov	r3, r9
 80079d4:	f7f8 fe10 	bl	80005f8 <__aeabi_dmul>
 80079d8:	4b86      	ldr	r3, [pc, #536]	; (8007bf4 <_dtoa_r+0x64c>)
 80079da:	2200      	movs	r2, #0
 80079dc:	f7f8 fc56 	bl	800028c <__adddf3>
 80079e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80079e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079e8:	9303      	str	r3, [sp, #12]
 80079ea:	2e00      	cmp	r6, #0
 80079ec:	d158      	bne.n	8007aa0 <_dtoa_r+0x4f8>
 80079ee:	4b82      	ldr	r3, [pc, #520]	; (8007bf8 <_dtoa_r+0x650>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	4640      	mov	r0, r8
 80079f4:	4649      	mov	r1, r9
 80079f6:	f7f8 fc47 	bl	8000288 <__aeabi_dsub>
 80079fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079fe:	4680      	mov	r8, r0
 8007a00:	4689      	mov	r9, r1
 8007a02:	f7f9 f889 	bl	8000b18 <__aeabi_dcmpgt>
 8007a06:	2800      	cmp	r0, #0
 8007a08:	f040 8296 	bne.w	8007f38 <_dtoa_r+0x990>
 8007a0c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007a10:	4640      	mov	r0, r8
 8007a12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a16:	4649      	mov	r1, r9
 8007a18:	f7f9 f860 	bl	8000adc <__aeabi_dcmplt>
 8007a1c:	2800      	cmp	r0, #0
 8007a1e:	f040 8289 	bne.w	8007f34 <_dtoa_r+0x98c>
 8007a22:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a26:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	f2c0 814e 	blt.w	8007cca <_dtoa_r+0x722>
 8007a2e:	f1bb 0f0e 	cmp.w	fp, #14
 8007a32:	f300 814a 	bgt.w	8007cca <_dtoa_r+0x722>
 8007a36:	4b6b      	ldr	r3, [pc, #428]	; (8007be4 <_dtoa_r+0x63c>)
 8007a38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007a3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f280 80dc 	bge.w	8007c00 <_dtoa_r+0x658>
 8007a48:	9b04      	ldr	r3, [sp, #16]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f300 80d8 	bgt.w	8007c00 <_dtoa_r+0x658>
 8007a50:	f040 826f 	bne.w	8007f32 <_dtoa_r+0x98a>
 8007a54:	4b68      	ldr	r3, [pc, #416]	; (8007bf8 <_dtoa_r+0x650>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	4640      	mov	r0, r8
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	f7f8 fdcc 	bl	80005f8 <__aeabi_dmul>
 8007a60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007a64:	f7f9 f84e 	bl	8000b04 <__aeabi_dcmpge>
 8007a68:	9e04      	ldr	r6, [sp, #16]
 8007a6a:	4637      	mov	r7, r6
 8007a6c:	2800      	cmp	r0, #0
 8007a6e:	f040 8245 	bne.w	8007efc <_dtoa_r+0x954>
 8007a72:	9d00      	ldr	r5, [sp, #0]
 8007a74:	2331      	movs	r3, #49	; 0x31
 8007a76:	f805 3b01 	strb.w	r3, [r5], #1
 8007a7a:	f10b 0b01 	add.w	fp, fp, #1
 8007a7e:	e241      	b.n	8007f04 <_dtoa_r+0x95c>
 8007a80:	07f2      	lsls	r2, r6, #31
 8007a82:	d505      	bpl.n	8007a90 <_dtoa_r+0x4e8>
 8007a84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007a88:	f7f8 fdb6 	bl	80005f8 <__aeabi_dmul>
 8007a8c:	3501      	adds	r5, #1
 8007a8e:	2301      	movs	r3, #1
 8007a90:	1076      	asrs	r6, r6, #1
 8007a92:	3708      	adds	r7, #8
 8007a94:	e773      	b.n	800797e <_dtoa_r+0x3d6>
 8007a96:	2502      	movs	r5, #2
 8007a98:	e775      	b.n	8007986 <_dtoa_r+0x3de>
 8007a9a:	9e04      	ldr	r6, [sp, #16]
 8007a9c:	465f      	mov	r7, fp
 8007a9e:	e792      	b.n	80079c6 <_dtoa_r+0x41e>
 8007aa0:	9900      	ldr	r1, [sp, #0]
 8007aa2:	4b50      	ldr	r3, [pc, #320]	; (8007be4 <_dtoa_r+0x63c>)
 8007aa4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007aa8:	4431      	add	r1, r6
 8007aaa:	9102      	str	r1, [sp, #8]
 8007aac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007aae:	eeb0 9a47 	vmov.f32	s18, s14
 8007ab2:	eef0 9a67 	vmov.f32	s19, s15
 8007ab6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007aba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007abe:	2900      	cmp	r1, #0
 8007ac0:	d044      	beq.n	8007b4c <_dtoa_r+0x5a4>
 8007ac2:	494e      	ldr	r1, [pc, #312]	; (8007bfc <_dtoa_r+0x654>)
 8007ac4:	2000      	movs	r0, #0
 8007ac6:	f7f8 fec1 	bl	800084c <__aeabi_ddiv>
 8007aca:	ec53 2b19 	vmov	r2, r3, d9
 8007ace:	f7f8 fbdb 	bl	8000288 <__aeabi_dsub>
 8007ad2:	9d00      	ldr	r5, [sp, #0]
 8007ad4:	ec41 0b19 	vmov	d9, r0, r1
 8007ad8:	4649      	mov	r1, r9
 8007ada:	4640      	mov	r0, r8
 8007adc:	f7f9 f83c 	bl	8000b58 <__aeabi_d2iz>
 8007ae0:	4606      	mov	r6, r0
 8007ae2:	f7f8 fd1f 	bl	8000524 <__aeabi_i2d>
 8007ae6:	4602      	mov	r2, r0
 8007ae8:	460b      	mov	r3, r1
 8007aea:	4640      	mov	r0, r8
 8007aec:	4649      	mov	r1, r9
 8007aee:	f7f8 fbcb 	bl	8000288 <__aeabi_dsub>
 8007af2:	3630      	adds	r6, #48	; 0x30
 8007af4:	f805 6b01 	strb.w	r6, [r5], #1
 8007af8:	ec53 2b19 	vmov	r2, r3, d9
 8007afc:	4680      	mov	r8, r0
 8007afe:	4689      	mov	r9, r1
 8007b00:	f7f8 ffec 	bl	8000adc <__aeabi_dcmplt>
 8007b04:	2800      	cmp	r0, #0
 8007b06:	d164      	bne.n	8007bd2 <_dtoa_r+0x62a>
 8007b08:	4642      	mov	r2, r8
 8007b0a:	464b      	mov	r3, r9
 8007b0c:	4937      	ldr	r1, [pc, #220]	; (8007bec <_dtoa_r+0x644>)
 8007b0e:	2000      	movs	r0, #0
 8007b10:	f7f8 fbba 	bl	8000288 <__aeabi_dsub>
 8007b14:	ec53 2b19 	vmov	r2, r3, d9
 8007b18:	f7f8 ffe0 	bl	8000adc <__aeabi_dcmplt>
 8007b1c:	2800      	cmp	r0, #0
 8007b1e:	f040 80b6 	bne.w	8007c8e <_dtoa_r+0x6e6>
 8007b22:	9b02      	ldr	r3, [sp, #8]
 8007b24:	429d      	cmp	r5, r3
 8007b26:	f43f af7c 	beq.w	8007a22 <_dtoa_r+0x47a>
 8007b2a:	4b31      	ldr	r3, [pc, #196]	; (8007bf0 <_dtoa_r+0x648>)
 8007b2c:	ec51 0b19 	vmov	r0, r1, d9
 8007b30:	2200      	movs	r2, #0
 8007b32:	f7f8 fd61 	bl	80005f8 <__aeabi_dmul>
 8007b36:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <_dtoa_r+0x648>)
 8007b38:	ec41 0b19 	vmov	d9, r0, r1
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4640      	mov	r0, r8
 8007b40:	4649      	mov	r1, r9
 8007b42:	f7f8 fd59 	bl	80005f8 <__aeabi_dmul>
 8007b46:	4680      	mov	r8, r0
 8007b48:	4689      	mov	r9, r1
 8007b4a:	e7c5      	b.n	8007ad8 <_dtoa_r+0x530>
 8007b4c:	ec51 0b17 	vmov	r0, r1, d7
 8007b50:	f7f8 fd52 	bl	80005f8 <__aeabi_dmul>
 8007b54:	9b02      	ldr	r3, [sp, #8]
 8007b56:	9d00      	ldr	r5, [sp, #0]
 8007b58:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b5a:	ec41 0b19 	vmov	d9, r0, r1
 8007b5e:	4649      	mov	r1, r9
 8007b60:	4640      	mov	r0, r8
 8007b62:	f7f8 fff9 	bl	8000b58 <__aeabi_d2iz>
 8007b66:	4606      	mov	r6, r0
 8007b68:	f7f8 fcdc 	bl	8000524 <__aeabi_i2d>
 8007b6c:	3630      	adds	r6, #48	; 0x30
 8007b6e:	4602      	mov	r2, r0
 8007b70:	460b      	mov	r3, r1
 8007b72:	4640      	mov	r0, r8
 8007b74:	4649      	mov	r1, r9
 8007b76:	f7f8 fb87 	bl	8000288 <__aeabi_dsub>
 8007b7a:	f805 6b01 	strb.w	r6, [r5], #1
 8007b7e:	9b02      	ldr	r3, [sp, #8]
 8007b80:	429d      	cmp	r5, r3
 8007b82:	4680      	mov	r8, r0
 8007b84:	4689      	mov	r9, r1
 8007b86:	f04f 0200 	mov.w	r2, #0
 8007b8a:	d124      	bne.n	8007bd6 <_dtoa_r+0x62e>
 8007b8c:	4b1b      	ldr	r3, [pc, #108]	; (8007bfc <_dtoa_r+0x654>)
 8007b8e:	ec51 0b19 	vmov	r0, r1, d9
 8007b92:	f7f8 fb7b 	bl	800028c <__adddf3>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	4640      	mov	r0, r8
 8007b9c:	4649      	mov	r1, r9
 8007b9e:	f7f8 ffbb 	bl	8000b18 <__aeabi_dcmpgt>
 8007ba2:	2800      	cmp	r0, #0
 8007ba4:	d173      	bne.n	8007c8e <_dtoa_r+0x6e6>
 8007ba6:	ec53 2b19 	vmov	r2, r3, d9
 8007baa:	4914      	ldr	r1, [pc, #80]	; (8007bfc <_dtoa_r+0x654>)
 8007bac:	2000      	movs	r0, #0
 8007bae:	f7f8 fb6b 	bl	8000288 <__aeabi_dsub>
 8007bb2:	4602      	mov	r2, r0
 8007bb4:	460b      	mov	r3, r1
 8007bb6:	4640      	mov	r0, r8
 8007bb8:	4649      	mov	r1, r9
 8007bba:	f7f8 ff8f 	bl	8000adc <__aeabi_dcmplt>
 8007bbe:	2800      	cmp	r0, #0
 8007bc0:	f43f af2f 	beq.w	8007a22 <_dtoa_r+0x47a>
 8007bc4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007bc6:	1e6b      	subs	r3, r5, #1
 8007bc8:	930f      	str	r3, [sp, #60]	; 0x3c
 8007bca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007bce:	2b30      	cmp	r3, #48	; 0x30
 8007bd0:	d0f8      	beq.n	8007bc4 <_dtoa_r+0x61c>
 8007bd2:	46bb      	mov	fp, r7
 8007bd4:	e04a      	b.n	8007c6c <_dtoa_r+0x6c4>
 8007bd6:	4b06      	ldr	r3, [pc, #24]	; (8007bf0 <_dtoa_r+0x648>)
 8007bd8:	f7f8 fd0e 	bl	80005f8 <__aeabi_dmul>
 8007bdc:	4680      	mov	r8, r0
 8007bde:	4689      	mov	r9, r1
 8007be0:	e7bd      	b.n	8007b5e <_dtoa_r+0x5b6>
 8007be2:	bf00      	nop
 8007be4:	080126e0 	.word	0x080126e0
 8007be8:	080126b8 	.word	0x080126b8
 8007bec:	3ff00000 	.word	0x3ff00000
 8007bf0:	40240000 	.word	0x40240000
 8007bf4:	401c0000 	.word	0x401c0000
 8007bf8:	40140000 	.word	0x40140000
 8007bfc:	3fe00000 	.word	0x3fe00000
 8007c00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007c04:	9d00      	ldr	r5, [sp, #0]
 8007c06:	4642      	mov	r2, r8
 8007c08:	464b      	mov	r3, r9
 8007c0a:	4630      	mov	r0, r6
 8007c0c:	4639      	mov	r1, r7
 8007c0e:	f7f8 fe1d 	bl	800084c <__aeabi_ddiv>
 8007c12:	f7f8 ffa1 	bl	8000b58 <__aeabi_d2iz>
 8007c16:	9001      	str	r0, [sp, #4]
 8007c18:	f7f8 fc84 	bl	8000524 <__aeabi_i2d>
 8007c1c:	4642      	mov	r2, r8
 8007c1e:	464b      	mov	r3, r9
 8007c20:	f7f8 fcea 	bl	80005f8 <__aeabi_dmul>
 8007c24:	4602      	mov	r2, r0
 8007c26:	460b      	mov	r3, r1
 8007c28:	4630      	mov	r0, r6
 8007c2a:	4639      	mov	r1, r7
 8007c2c:	f7f8 fb2c 	bl	8000288 <__aeabi_dsub>
 8007c30:	9e01      	ldr	r6, [sp, #4]
 8007c32:	9f04      	ldr	r7, [sp, #16]
 8007c34:	3630      	adds	r6, #48	; 0x30
 8007c36:	f805 6b01 	strb.w	r6, [r5], #1
 8007c3a:	9e00      	ldr	r6, [sp, #0]
 8007c3c:	1bae      	subs	r6, r5, r6
 8007c3e:	42b7      	cmp	r7, r6
 8007c40:	4602      	mov	r2, r0
 8007c42:	460b      	mov	r3, r1
 8007c44:	d134      	bne.n	8007cb0 <_dtoa_r+0x708>
 8007c46:	f7f8 fb21 	bl	800028c <__adddf3>
 8007c4a:	4642      	mov	r2, r8
 8007c4c:	464b      	mov	r3, r9
 8007c4e:	4606      	mov	r6, r0
 8007c50:	460f      	mov	r7, r1
 8007c52:	f7f8 ff61 	bl	8000b18 <__aeabi_dcmpgt>
 8007c56:	b9c8      	cbnz	r0, 8007c8c <_dtoa_r+0x6e4>
 8007c58:	4642      	mov	r2, r8
 8007c5a:	464b      	mov	r3, r9
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	4639      	mov	r1, r7
 8007c60:	f7f8 ff32 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c64:	b110      	cbz	r0, 8007c6c <_dtoa_r+0x6c4>
 8007c66:	9b01      	ldr	r3, [sp, #4]
 8007c68:	07db      	lsls	r3, r3, #31
 8007c6a:	d40f      	bmi.n	8007c8c <_dtoa_r+0x6e4>
 8007c6c:	4651      	mov	r1, sl
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 fb18 	bl	80082a4 <_Bfree>
 8007c74:	2300      	movs	r3, #0
 8007c76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c78:	702b      	strb	r3, [r5, #0]
 8007c7a:	f10b 0301 	add.w	r3, fp, #1
 8007c7e:	6013      	str	r3, [r2, #0]
 8007c80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f43f ace2 	beq.w	800764c <_dtoa_r+0xa4>
 8007c88:	601d      	str	r5, [r3, #0]
 8007c8a:	e4df      	b.n	800764c <_dtoa_r+0xa4>
 8007c8c:	465f      	mov	r7, fp
 8007c8e:	462b      	mov	r3, r5
 8007c90:	461d      	mov	r5, r3
 8007c92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c96:	2a39      	cmp	r2, #57	; 0x39
 8007c98:	d106      	bne.n	8007ca8 <_dtoa_r+0x700>
 8007c9a:	9a00      	ldr	r2, [sp, #0]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d1f7      	bne.n	8007c90 <_dtoa_r+0x6e8>
 8007ca0:	9900      	ldr	r1, [sp, #0]
 8007ca2:	2230      	movs	r2, #48	; 0x30
 8007ca4:	3701      	adds	r7, #1
 8007ca6:	700a      	strb	r2, [r1, #0]
 8007ca8:	781a      	ldrb	r2, [r3, #0]
 8007caa:	3201      	adds	r2, #1
 8007cac:	701a      	strb	r2, [r3, #0]
 8007cae:	e790      	b.n	8007bd2 <_dtoa_r+0x62a>
 8007cb0:	4ba3      	ldr	r3, [pc, #652]	; (8007f40 <_dtoa_r+0x998>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f7f8 fca0 	bl	80005f8 <__aeabi_dmul>
 8007cb8:	2200      	movs	r2, #0
 8007cba:	2300      	movs	r3, #0
 8007cbc:	4606      	mov	r6, r0
 8007cbe:	460f      	mov	r7, r1
 8007cc0:	f7f8 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cc4:	2800      	cmp	r0, #0
 8007cc6:	d09e      	beq.n	8007c06 <_dtoa_r+0x65e>
 8007cc8:	e7d0      	b.n	8007c6c <_dtoa_r+0x6c4>
 8007cca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ccc:	2a00      	cmp	r2, #0
 8007cce:	f000 80ca 	beq.w	8007e66 <_dtoa_r+0x8be>
 8007cd2:	9a07      	ldr	r2, [sp, #28]
 8007cd4:	2a01      	cmp	r2, #1
 8007cd6:	f300 80ad 	bgt.w	8007e34 <_dtoa_r+0x88c>
 8007cda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cdc:	2a00      	cmp	r2, #0
 8007cde:	f000 80a5 	beq.w	8007e2c <_dtoa_r+0x884>
 8007ce2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007ce6:	9e08      	ldr	r6, [sp, #32]
 8007ce8:	9d05      	ldr	r5, [sp, #20]
 8007cea:	9a05      	ldr	r2, [sp, #20]
 8007cec:	441a      	add	r2, r3
 8007cee:	9205      	str	r2, [sp, #20]
 8007cf0:	9a06      	ldr	r2, [sp, #24]
 8007cf2:	2101      	movs	r1, #1
 8007cf4:	441a      	add	r2, r3
 8007cf6:	4620      	mov	r0, r4
 8007cf8:	9206      	str	r2, [sp, #24]
 8007cfa:	f000 fb89 	bl	8008410 <__i2b>
 8007cfe:	4607      	mov	r7, r0
 8007d00:	b165      	cbz	r5, 8007d1c <_dtoa_r+0x774>
 8007d02:	9b06      	ldr	r3, [sp, #24]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	dd09      	ble.n	8007d1c <_dtoa_r+0x774>
 8007d08:	42ab      	cmp	r3, r5
 8007d0a:	9a05      	ldr	r2, [sp, #20]
 8007d0c:	bfa8      	it	ge
 8007d0e:	462b      	movge	r3, r5
 8007d10:	1ad2      	subs	r2, r2, r3
 8007d12:	9205      	str	r2, [sp, #20]
 8007d14:	9a06      	ldr	r2, [sp, #24]
 8007d16:	1aed      	subs	r5, r5, r3
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	9306      	str	r3, [sp, #24]
 8007d1c:	9b08      	ldr	r3, [sp, #32]
 8007d1e:	b1f3      	cbz	r3, 8007d5e <_dtoa_r+0x7b6>
 8007d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 80a3 	beq.w	8007e6e <_dtoa_r+0x8c6>
 8007d28:	2e00      	cmp	r6, #0
 8007d2a:	dd10      	ble.n	8007d4e <_dtoa_r+0x7a6>
 8007d2c:	4639      	mov	r1, r7
 8007d2e:	4632      	mov	r2, r6
 8007d30:	4620      	mov	r0, r4
 8007d32:	f000 fc2d 	bl	8008590 <__pow5mult>
 8007d36:	4652      	mov	r2, sl
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4607      	mov	r7, r0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	f000 fb7d 	bl	800843c <__multiply>
 8007d42:	4651      	mov	r1, sl
 8007d44:	4680      	mov	r8, r0
 8007d46:	4620      	mov	r0, r4
 8007d48:	f000 faac 	bl	80082a4 <_Bfree>
 8007d4c:	46c2      	mov	sl, r8
 8007d4e:	9b08      	ldr	r3, [sp, #32]
 8007d50:	1b9a      	subs	r2, r3, r6
 8007d52:	d004      	beq.n	8007d5e <_dtoa_r+0x7b6>
 8007d54:	4651      	mov	r1, sl
 8007d56:	4620      	mov	r0, r4
 8007d58:	f000 fc1a 	bl	8008590 <__pow5mult>
 8007d5c:	4682      	mov	sl, r0
 8007d5e:	2101      	movs	r1, #1
 8007d60:	4620      	mov	r0, r4
 8007d62:	f000 fb55 	bl	8008410 <__i2b>
 8007d66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	4606      	mov	r6, r0
 8007d6c:	f340 8081 	ble.w	8007e72 <_dtoa_r+0x8ca>
 8007d70:	461a      	mov	r2, r3
 8007d72:	4601      	mov	r1, r0
 8007d74:	4620      	mov	r0, r4
 8007d76:	f000 fc0b 	bl	8008590 <__pow5mult>
 8007d7a:	9b07      	ldr	r3, [sp, #28]
 8007d7c:	2b01      	cmp	r3, #1
 8007d7e:	4606      	mov	r6, r0
 8007d80:	dd7a      	ble.n	8007e78 <_dtoa_r+0x8d0>
 8007d82:	f04f 0800 	mov.w	r8, #0
 8007d86:	6933      	ldr	r3, [r6, #16]
 8007d88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8007d8c:	6918      	ldr	r0, [r3, #16]
 8007d8e:	f000 faf1 	bl	8008374 <__hi0bits>
 8007d92:	f1c0 0020 	rsb	r0, r0, #32
 8007d96:	9b06      	ldr	r3, [sp, #24]
 8007d98:	4418      	add	r0, r3
 8007d9a:	f010 001f 	ands.w	r0, r0, #31
 8007d9e:	f000 8094 	beq.w	8007eca <_dtoa_r+0x922>
 8007da2:	f1c0 0320 	rsb	r3, r0, #32
 8007da6:	2b04      	cmp	r3, #4
 8007da8:	f340 8085 	ble.w	8007eb6 <_dtoa_r+0x90e>
 8007dac:	9b05      	ldr	r3, [sp, #20]
 8007dae:	f1c0 001c 	rsb	r0, r0, #28
 8007db2:	4403      	add	r3, r0
 8007db4:	9305      	str	r3, [sp, #20]
 8007db6:	9b06      	ldr	r3, [sp, #24]
 8007db8:	4403      	add	r3, r0
 8007dba:	4405      	add	r5, r0
 8007dbc:	9306      	str	r3, [sp, #24]
 8007dbe:	9b05      	ldr	r3, [sp, #20]
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	dd05      	ble.n	8007dd0 <_dtoa_r+0x828>
 8007dc4:	4651      	mov	r1, sl
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	4620      	mov	r0, r4
 8007dca:	f000 fc3b 	bl	8008644 <__lshift>
 8007dce:	4682      	mov	sl, r0
 8007dd0:	9b06      	ldr	r3, [sp, #24]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dd05      	ble.n	8007de2 <_dtoa_r+0x83a>
 8007dd6:	4631      	mov	r1, r6
 8007dd8:	461a      	mov	r2, r3
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 fc32 	bl	8008644 <__lshift>
 8007de0:	4606      	mov	r6, r0
 8007de2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d072      	beq.n	8007ece <_dtoa_r+0x926>
 8007de8:	4631      	mov	r1, r6
 8007dea:	4650      	mov	r0, sl
 8007dec:	f000 fc96 	bl	800871c <__mcmp>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	da6c      	bge.n	8007ece <_dtoa_r+0x926>
 8007df4:	2300      	movs	r3, #0
 8007df6:	4651      	mov	r1, sl
 8007df8:	220a      	movs	r2, #10
 8007dfa:	4620      	mov	r0, r4
 8007dfc:	f000 fa74 	bl	80082e8 <__multadd>
 8007e00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8007e06:	4682      	mov	sl, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 81b0 	beq.w	800816e <_dtoa_r+0xbc6>
 8007e0e:	2300      	movs	r3, #0
 8007e10:	4639      	mov	r1, r7
 8007e12:	220a      	movs	r2, #10
 8007e14:	4620      	mov	r0, r4
 8007e16:	f000 fa67 	bl	80082e8 <__multadd>
 8007e1a:	9b01      	ldr	r3, [sp, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	4607      	mov	r7, r0
 8007e20:	f300 8096 	bgt.w	8007f50 <_dtoa_r+0x9a8>
 8007e24:	9b07      	ldr	r3, [sp, #28]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	dc59      	bgt.n	8007ede <_dtoa_r+0x936>
 8007e2a:	e091      	b.n	8007f50 <_dtoa_r+0x9a8>
 8007e2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007e32:	e758      	b.n	8007ce6 <_dtoa_r+0x73e>
 8007e34:	9b04      	ldr	r3, [sp, #16]
 8007e36:	1e5e      	subs	r6, r3, #1
 8007e38:	9b08      	ldr	r3, [sp, #32]
 8007e3a:	42b3      	cmp	r3, r6
 8007e3c:	bfbf      	itttt	lt
 8007e3e:	9b08      	ldrlt	r3, [sp, #32]
 8007e40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8007e42:	9608      	strlt	r6, [sp, #32]
 8007e44:	1af3      	sublt	r3, r6, r3
 8007e46:	bfb4      	ite	lt
 8007e48:	18d2      	addlt	r2, r2, r3
 8007e4a:	1b9e      	subge	r6, r3, r6
 8007e4c:	9b04      	ldr	r3, [sp, #16]
 8007e4e:	bfbc      	itt	lt
 8007e50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8007e52:	2600      	movlt	r6, #0
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	bfb7      	itett	lt
 8007e58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8007e5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8007e60:	1a9d      	sublt	r5, r3, r2
 8007e62:	2300      	movlt	r3, #0
 8007e64:	e741      	b.n	8007cea <_dtoa_r+0x742>
 8007e66:	9e08      	ldr	r6, [sp, #32]
 8007e68:	9d05      	ldr	r5, [sp, #20]
 8007e6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007e6c:	e748      	b.n	8007d00 <_dtoa_r+0x758>
 8007e6e:	9a08      	ldr	r2, [sp, #32]
 8007e70:	e770      	b.n	8007d54 <_dtoa_r+0x7ac>
 8007e72:	9b07      	ldr	r3, [sp, #28]
 8007e74:	2b01      	cmp	r3, #1
 8007e76:	dc19      	bgt.n	8007eac <_dtoa_r+0x904>
 8007e78:	9b02      	ldr	r3, [sp, #8]
 8007e7a:	b9bb      	cbnz	r3, 8007eac <_dtoa_r+0x904>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007e82:	b99b      	cbnz	r3, 8007eac <_dtoa_r+0x904>
 8007e84:	9b03      	ldr	r3, [sp, #12]
 8007e86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007e8a:	0d1b      	lsrs	r3, r3, #20
 8007e8c:	051b      	lsls	r3, r3, #20
 8007e8e:	b183      	cbz	r3, 8007eb2 <_dtoa_r+0x90a>
 8007e90:	9b05      	ldr	r3, [sp, #20]
 8007e92:	3301      	adds	r3, #1
 8007e94:	9305      	str	r3, [sp, #20]
 8007e96:	9b06      	ldr	r3, [sp, #24]
 8007e98:	3301      	adds	r3, #1
 8007e9a:	9306      	str	r3, [sp, #24]
 8007e9c:	f04f 0801 	mov.w	r8, #1
 8007ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f47f af6f 	bne.w	8007d86 <_dtoa_r+0x7de>
 8007ea8:	2001      	movs	r0, #1
 8007eaa:	e774      	b.n	8007d96 <_dtoa_r+0x7ee>
 8007eac:	f04f 0800 	mov.w	r8, #0
 8007eb0:	e7f6      	b.n	8007ea0 <_dtoa_r+0x8f8>
 8007eb2:	4698      	mov	r8, r3
 8007eb4:	e7f4      	b.n	8007ea0 <_dtoa_r+0x8f8>
 8007eb6:	d082      	beq.n	8007dbe <_dtoa_r+0x816>
 8007eb8:	9a05      	ldr	r2, [sp, #20]
 8007eba:	331c      	adds	r3, #28
 8007ebc:	441a      	add	r2, r3
 8007ebe:	9205      	str	r2, [sp, #20]
 8007ec0:	9a06      	ldr	r2, [sp, #24]
 8007ec2:	441a      	add	r2, r3
 8007ec4:	441d      	add	r5, r3
 8007ec6:	9206      	str	r2, [sp, #24]
 8007ec8:	e779      	b.n	8007dbe <_dtoa_r+0x816>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	e7f4      	b.n	8007eb8 <_dtoa_r+0x910>
 8007ece:	9b04      	ldr	r3, [sp, #16]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	dc37      	bgt.n	8007f44 <_dtoa_r+0x99c>
 8007ed4:	9b07      	ldr	r3, [sp, #28]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	dd34      	ble.n	8007f44 <_dtoa_r+0x99c>
 8007eda:	9b04      	ldr	r3, [sp, #16]
 8007edc:	9301      	str	r3, [sp, #4]
 8007ede:	9b01      	ldr	r3, [sp, #4]
 8007ee0:	b963      	cbnz	r3, 8007efc <_dtoa_r+0x954>
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	2205      	movs	r2, #5
 8007ee6:	4620      	mov	r0, r4
 8007ee8:	f000 f9fe 	bl	80082e8 <__multadd>
 8007eec:	4601      	mov	r1, r0
 8007eee:	4606      	mov	r6, r0
 8007ef0:	4650      	mov	r0, sl
 8007ef2:	f000 fc13 	bl	800871c <__mcmp>
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	f73f adbb 	bgt.w	8007a72 <_dtoa_r+0x4ca>
 8007efc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007efe:	9d00      	ldr	r5, [sp, #0]
 8007f00:	ea6f 0b03 	mvn.w	fp, r3
 8007f04:	f04f 0800 	mov.w	r8, #0
 8007f08:	4631      	mov	r1, r6
 8007f0a:	4620      	mov	r0, r4
 8007f0c:	f000 f9ca 	bl	80082a4 <_Bfree>
 8007f10:	2f00      	cmp	r7, #0
 8007f12:	f43f aeab 	beq.w	8007c6c <_dtoa_r+0x6c4>
 8007f16:	f1b8 0f00 	cmp.w	r8, #0
 8007f1a:	d005      	beq.n	8007f28 <_dtoa_r+0x980>
 8007f1c:	45b8      	cmp	r8, r7
 8007f1e:	d003      	beq.n	8007f28 <_dtoa_r+0x980>
 8007f20:	4641      	mov	r1, r8
 8007f22:	4620      	mov	r0, r4
 8007f24:	f000 f9be 	bl	80082a4 <_Bfree>
 8007f28:	4639      	mov	r1, r7
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 f9ba 	bl	80082a4 <_Bfree>
 8007f30:	e69c      	b.n	8007c6c <_dtoa_r+0x6c4>
 8007f32:	2600      	movs	r6, #0
 8007f34:	4637      	mov	r7, r6
 8007f36:	e7e1      	b.n	8007efc <_dtoa_r+0x954>
 8007f38:	46bb      	mov	fp, r7
 8007f3a:	4637      	mov	r7, r6
 8007f3c:	e599      	b.n	8007a72 <_dtoa_r+0x4ca>
 8007f3e:	bf00      	nop
 8007f40:	40240000 	.word	0x40240000
 8007f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	f000 80c8 	beq.w	80080dc <_dtoa_r+0xb34>
 8007f4c:	9b04      	ldr	r3, [sp, #16]
 8007f4e:	9301      	str	r3, [sp, #4]
 8007f50:	2d00      	cmp	r5, #0
 8007f52:	dd05      	ble.n	8007f60 <_dtoa_r+0x9b8>
 8007f54:	4639      	mov	r1, r7
 8007f56:	462a      	mov	r2, r5
 8007f58:	4620      	mov	r0, r4
 8007f5a:	f000 fb73 	bl	8008644 <__lshift>
 8007f5e:	4607      	mov	r7, r0
 8007f60:	f1b8 0f00 	cmp.w	r8, #0
 8007f64:	d05b      	beq.n	800801e <_dtoa_r+0xa76>
 8007f66:	6879      	ldr	r1, [r7, #4]
 8007f68:	4620      	mov	r0, r4
 8007f6a:	f000 f95b 	bl	8008224 <_Balloc>
 8007f6e:	4605      	mov	r5, r0
 8007f70:	b928      	cbnz	r0, 8007f7e <_dtoa_r+0x9d6>
 8007f72:	4b83      	ldr	r3, [pc, #524]	; (8008180 <_dtoa_r+0xbd8>)
 8007f74:	4602      	mov	r2, r0
 8007f76:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007f7a:	f7ff bb2e 	b.w	80075da <_dtoa_r+0x32>
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	3202      	adds	r2, #2
 8007f82:	0092      	lsls	r2, r2, #2
 8007f84:	f107 010c 	add.w	r1, r7, #12
 8007f88:	300c      	adds	r0, #12
 8007f8a:	f7ff fa74 	bl	8007476 <memcpy>
 8007f8e:	2201      	movs	r2, #1
 8007f90:	4629      	mov	r1, r5
 8007f92:	4620      	mov	r0, r4
 8007f94:	f000 fb56 	bl	8008644 <__lshift>
 8007f98:	9b00      	ldr	r3, [sp, #0]
 8007f9a:	3301      	adds	r3, #1
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007fa2:	4413      	add	r3, r2
 8007fa4:	9308      	str	r3, [sp, #32]
 8007fa6:	9b02      	ldr	r3, [sp, #8]
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	46b8      	mov	r8, r7
 8007fae:	9306      	str	r3, [sp, #24]
 8007fb0:	4607      	mov	r7, r0
 8007fb2:	9b04      	ldr	r3, [sp, #16]
 8007fb4:	4631      	mov	r1, r6
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	4650      	mov	r0, sl
 8007fba:	9301      	str	r3, [sp, #4]
 8007fbc:	f7ff fa69 	bl	8007492 <quorem>
 8007fc0:	4641      	mov	r1, r8
 8007fc2:	9002      	str	r0, [sp, #8]
 8007fc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007fc8:	4650      	mov	r0, sl
 8007fca:	f000 fba7 	bl	800871c <__mcmp>
 8007fce:	463a      	mov	r2, r7
 8007fd0:	9005      	str	r0, [sp, #20]
 8007fd2:	4631      	mov	r1, r6
 8007fd4:	4620      	mov	r0, r4
 8007fd6:	f000 fbbd 	bl	8008754 <__mdiff>
 8007fda:	68c2      	ldr	r2, [r0, #12]
 8007fdc:	4605      	mov	r5, r0
 8007fde:	bb02      	cbnz	r2, 8008022 <_dtoa_r+0xa7a>
 8007fe0:	4601      	mov	r1, r0
 8007fe2:	4650      	mov	r0, sl
 8007fe4:	f000 fb9a 	bl	800871c <__mcmp>
 8007fe8:	4602      	mov	r2, r0
 8007fea:	4629      	mov	r1, r5
 8007fec:	4620      	mov	r0, r4
 8007fee:	9209      	str	r2, [sp, #36]	; 0x24
 8007ff0:	f000 f958 	bl	80082a4 <_Bfree>
 8007ff4:	9b07      	ldr	r3, [sp, #28]
 8007ff6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ff8:	9d04      	ldr	r5, [sp, #16]
 8007ffa:	ea43 0102 	orr.w	r1, r3, r2
 8007ffe:	9b06      	ldr	r3, [sp, #24]
 8008000:	4319      	orrs	r1, r3
 8008002:	d110      	bne.n	8008026 <_dtoa_r+0xa7e>
 8008004:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008008:	d029      	beq.n	800805e <_dtoa_r+0xab6>
 800800a:	9b05      	ldr	r3, [sp, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	dd02      	ble.n	8008016 <_dtoa_r+0xa6e>
 8008010:	9b02      	ldr	r3, [sp, #8]
 8008012:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008016:	9b01      	ldr	r3, [sp, #4]
 8008018:	f883 9000 	strb.w	r9, [r3]
 800801c:	e774      	b.n	8007f08 <_dtoa_r+0x960>
 800801e:	4638      	mov	r0, r7
 8008020:	e7ba      	b.n	8007f98 <_dtoa_r+0x9f0>
 8008022:	2201      	movs	r2, #1
 8008024:	e7e1      	b.n	8007fea <_dtoa_r+0xa42>
 8008026:	9b05      	ldr	r3, [sp, #20]
 8008028:	2b00      	cmp	r3, #0
 800802a:	db04      	blt.n	8008036 <_dtoa_r+0xa8e>
 800802c:	9907      	ldr	r1, [sp, #28]
 800802e:	430b      	orrs	r3, r1
 8008030:	9906      	ldr	r1, [sp, #24]
 8008032:	430b      	orrs	r3, r1
 8008034:	d120      	bne.n	8008078 <_dtoa_r+0xad0>
 8008036:	2a00      	cmp	r2, #0
 8008038:	dded      	ble.n	8008016 <_dtoa_r+0xa6e>
 800803a:	4651      	mov	r1, sl
 800803c:	2201      	movs	r2, #1
 800803e:	4620      	mov	r0, r4
 8008040:	f000 fb00 	bl	8008644 <__lshift>
 8008044:	4631      	mov	r1, r6
 8008046:	4682      	mov	sl, r0
 8008048:	f000 fb68 	bl	800871c <__mcmp>
 800804c:	2800      	cmp	r0, #0
 800804e:	dc03      	bgt.n	8008058 <_dtoa_r+0xab0>
 8008050:	d1e1      	bne.n	8008016 <_dtoa_r+0xa6e>
 8008052:	f019 0f01 	tst.w	r9, #1
 8008056:	d0de      	beq.n	8008016 <_dtoa_r+0xa6e>
 8008058:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800805c:	d1d8      	bne.n	8008010 <_dtoa_r+0xa68>
 800805e:	9a01      	ldr	r2, [sp, #4]
 8008060:	2339      	movs	r3, #57	; 0x39
 8008062:	7013      	strb	r3, [r2, #0]
 8008064:	462b      	mov	r3, r5
 8008066:	461d      	mov	r5, r3
 8008068:	3b01      	subs	r3, #1
 800806a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800806e:	2a39      	cmp	r2, #57	; 0x39
 8008070:	d06c      	beq.n	800814c <_dtoa_r+0xba4>
 8008072:	3201      	adds	r2, #1
 8008074:	701a      	strb	r2, [r3, #0]
 8008076:	e747      	b.n	8007f08 <_dtoa_r+0x960>
 8008078:	2a00      	cmp	r2, #0
 800807a:	dd07      	ble.n	800808c <_dtoa_r+0xae4>
 800807c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008080:	d0ed      	beq.n	800805e <_dtoa_r+0xab6>
 8008082:	9a01      	ldr	r2, [sp, #4]
 8008084:	f109 0301 	add.w	r3, r9, #1
 8008088:	7013      	strb	r3, [r2, #0]
 800808a:	e73d      	b.n	8007f08 <_dtoa_r+0x960>
 800808c:	9b04      	ldr	r3, [sp, #16]
 800808e:	9a08      	ldr	r2, [sp, #32]
 8008090:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008094:	4293      	cmp	r3, r2
 8008096:	d043      	beq.n	8008120 <_dtoa_r+0xb78>
 8008098:	4651      	mov	r1, sl
 800809a:	2300      	movs	r3, #0
 800809c:	220a      	movs	r2, #10
 800809e:	4620      	mov	r0, r4
 80080a0:	f000 f922 	bl	80082e8 <__multadd>
 80080a4:	45b8      	cmp	r8, r7
 80080a6:	4682      	mov	sl, r0
 80080a8:	f04f 0300 	mov.w	r3, #0
 80080ac:	f04f 020a 	mov.w	r2, #10
 80080b0:	4641      	mov	r1, r8
 80080b2:	4620      	mov	r0, r4
 80080b4:	d107      	bne.n	80080c6 <_dtoa_r+0xb1e>
 80080b6:	f000 f917 	bl	80082e8 <__multadd>
 80080ba:	4680      	mov	r8, r0
 80080bc:	4607      	mov	r7, r0
 80080be:	9b04      	ldr	r3, [sp, #16]
 80080c0:	3301      	adds	r3, #1
 80080c2:	9304      	str	r3, [sp, #16]
 80080c4:	e775      	b.n	8007fb2 <_dtoa_r+0xa0a>
 80080c6:	f000 f90f 	bl	80082e8 <__multadd>
 80080ca:	4639      	mov	r1, r7
 80080cc:	4680      	mov	r8, r0
 80080ce:	2300      	movs	r3, #0
 80080d0:	220a      	movs	r2, #10
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f908 	bl	80082e8 <__multadd>
 80080d8:	4607      	mov	r7, r0
 80080da:	e7f0      	b.n	80080be <_dtoa_r+0xb16>
 80080dc:	9b04      	ldr	r3, [sp, #16]
 80080de:	9301      	str	r3, [sp, #4]
 80080e0:	9d00      	ldr	r5, [sp, #0]
 80080e2:	4631      	mov	r1, r6
 80080e4:	4650      	mov	r0, sl
 80080e6:	f7ff f9d4 	bl	8007492 <quorem>
 80080ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80080ee:	9b00      	ldr	r3, [sp, #0]
 80080f0:	f805 9b01 	strb.w	r9, [r5], #1
 80080f4:	1aea      	subs	r2, r5, r3
 80080f6:	9b01      	ldr	r3, [sp, #4]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	dd07      	ble.n	800810c <_dtoa_r+0xb64>
 80080fc:	4651      	mov	r1, sl
 80080fe:	2300      	movs	r3, #0
 8008100:	220a      	movs	r2, #10
 8008102:	4620      	mov	r0, r4
 8008104:	f000 f8f0 	bl	80082e8 <__multadd>
 8008108:	4682      	mov	sl, r0
 800810a:	e7ea      	b.n	80080e2 <_dtoa_r+0xb3a>
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfc8      	it	gt
 8008112:	461d      	movgt	r5, r3
 8008114:	9b00      	ldr	r3, [sp, #0]
 8008116:	bfd8      	it	le
 8008118:	2501      	movle	r5, #1
 800811a:	441d      	add	r5, r3
 800811c:	f04f 0800 	mov.w	r8, #0
 8008120:	4651      	mov	r1, sl
 8008122:	2201      	movs	r2, #1
 8008124:	4620      	mov	r0, r4
 8008126:	f000 fa8d 	bl	8008644 <__lshift>
 800812a:	4631      	mov	r1, r6
 800812c:	4682      	mov	sl, r0
 800812e:	f000 faf5 	bl	800871c <__mcmp>
 8008132:	2800      	cmp	r0, #0
 8008134:	dc96      	bgt.n	8008064 <_dtoa_r+0xabc>
 8008136:	d102      	bne.n	800813e <_dtoa_r+0xb96>
 8008138:	f019 0f01 	tst.w	r9, #1
 800813c:	d192      	bne.n	8008064 <_dtoa_r+0xabc>
 800813e:	462b      	mov	r3, r5
 8008140:	461d      	mov	r5, r3
 8008142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008146:	2a30      	cmp	r2, #48	; 0x30
 8008148:	d0fa      	beq.n	8008140 <_dtoa_r+0xb98>
 800814a:	e6dd      	b.n	8007f08 <_dtoa_r+0x960>
 800814c:	9a00      	ldr	r2, [sp, #0]
 800814e:	429a      	cmp	r2, r3
 8008150:	d189      	bne.n	8008066 <_dtoa_r+0xabe>
 8008152:	f10b 0b01 	add.w	fp, fp, #1
 8008156:	2331      	movs	r3, #49	; 0x31
 8008158:	e796      	b.n	8008088 <_dtoa_r+0xae0>
 800815a:	4b0a      	ldr	r3, [pc, #40]	; (8008184 <_dtoa_r+0xbdc>)
 800815c:	f7ff ba99 	b.w	8007692 <_dtoa_r+0xea>
 8008160:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008162:	2b00      	cmp	r3, #0
 8008164:	f47f aa6d 	bne.w	8007642 <_dtoa_r+0x9a>
 8008168:	4b07      	ldr	r3, [pc, #28]	; (8008188 <_dtoa_r+0xbe0>)
 800816a:	f7ff ba92 	b.w	8007692 <_dtoa_r+0xea>
 800816e:	9b01      	ldr	r3, [sp, #4]
 8008170:	2b00      	cmp	r3, #0
 8008172:	dcb5      	bgt.n	80080e0 <_dtoa_r+0xb38>
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	2b02      	cmp	r3, #2
 8008178:	f73f aeb1 	bgt.w	8007ede <_dtoa_r+0x936>
 800817c:	e7b0      	b.n	80080e0 <_dtoa_r+0xb38>
 800817e:	bf00      	nop
 8008180:	08012648 	.word	0x08012648
 8008184:	080125a8 	.word	0x080125a8
 8008188:	080125cc 	.word	0x080125cc

0800818c <_free_r>:
 800818c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800818e:	2900      	cmp	r1, #0
 8008190:	d044      	beq.n	800821c <_free_r+0x90>
 8008192:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008196:	9001      	str	r0, [sp, #4]
 8008198:	2b00      	cmp	r3, #0
 800819a:	f1a1 0404 	sub.w	r4, r1, #4
 800819e:	bfb8      	it	lt
 80081a0:	18e4      	addlt	r4, r4, r3
 80081a2:	f7fe fb11 	bl	80067c8 <__malloc_lock>
 80081a6:	4a1e      	ldr	r2, [pc, #120]	; (8008220 <_free_r+0x94>)
 80081a8:	9801      	ldr	r0, [sp, #4]
 80081aa:	6813      	ldr	r3, [r2, #0]
 80081ac:	b933      	cbnz	r3, 80081bc <_free_r+0x30>
 80081ae:	6063      	str	r3, [r4, #4]
 80081b0:	6014      	str	r4, [r2, #0]
 80081b2:	b003      	add	sp, #12
 80081b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081b8:	f7fe bb0c 	b.w	80067d4 <__malloc_unlock>
 80081bc:	42a3      	cmp	r3, r4
 80081be:	d908      	bls.n	80081d2 <_free_r+0x46>
 80081c0:	6825      	ldr	r5, [r4, #0]
 80081c2:	1961      	adds	r1, r4, r5
 80081c4:	428b      	cmp	r3, r1
 80081c6:	bf01      	itttt	eq
 80081c8:	6819      	ldreq	r1, [r3, #0]
 80081ca:	685b      	ldreq	r3, [r3, #4]
 80081cc:	1949      	addeq	r1, r1, r5
 80081ce:	6021      	streq	r1, [r4, #0]
 80081d0:	e7ed      	b.n	80081ae <_free_r+0x22>
 80081d2:	461a      	mov	r2, r3
 80081d4:	685b      	ldr	r3, [r3, #4]
 80081d6:	b10b      	cbz	r3, 80081dc <_free_r+0x50>
 80081d8:	42a3      	cmp	r3, r4
 80081da:	d9fa      	bls.n	80081d2 <_free_r+0x46>
 80081dc:	6811      	ldr	r1, [r2, #0]
 80081de:	1855      	adds	r5, r2, r1
 80081e0:	42a5      	cmp	r5, r4
 80081e2:	d10b      	bne.n	80081fc <_free_r+0x70>
 80081e4:	6824      	ldr	r4, [r4, #0]
 80081e6:	4421      	add	r1, r4
 80081e8:	1854      	adds	r4, r2, r1
 80081ea:	42a3      	cmp	r3, r4
 80081ec:	6011      	str	r1, [r2, #0]
 80081ee:	d1e0      	bne.n	80081b2 <_free_r+0x26>
 80081f0:	681c      	ldr	r4, [r3, #0]
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	6053      	str	r3, [r2, #4]
 80081f6:	440c      	add	r4, r1
 80081f8:	6014      	str	r4, [r2, #0]
 80081fa:	e7da      	b.n	80081b2 <_free_r+0x26>
 80081fc:	d902      	bls.n	8008204 <_free_r+0x78>
 80081fe:	230c      	movs	r3, #12
 8008200:	6003      	str	r3, [r0, #0]
 8008202:	e7d6      	b.n	80081b2 <_free_r+0x26>
 8008204:	6825      	ldr	r5, [r4, #0]
 8008206:	1961      	adds	r1, r4, r5
 8008208:	428b      	cmp	r3, r1
 800820a:	bf04      	itt	eq
 800820c:	6819      	ldreq	r1, [r3, #0]
 800820e:	685b      	ldreq	r3, [r3, #4]
 8008210:	6063      	str	r3, [r4, #4]
 8008212:	bf04      	itt	eq
 8008214:	1949      	addeq	r1, r1, r5
 8008216:	6021      	streq	r1, [r4, #0]
 8008218:	6054      	str	r4, [r2, #4]
 800821a:	e7ca      	b.n	80081b2 <_free_r+0x26>
 800821c:	b003      	add	sp, #12
 800821e:	bd30      	pop	{r4, r5, pc}
 8008220:	20000b20 	.word	0x20000b20

08008224 <_Balloc>:
 8008224:	b570      	push	{r4, r5, r6, lr}
 8008226:	69c6      	ldr	r6, [r0, #28]
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
 800822c:	b976      	cbnz	r6, 800824c <_Balloc+0x28>
 800822e:	2010      	movs	r0, #16
 8008230:	f7fe fa22 	bl	8006678 <malloc>
 8008234:	4602      	mov	r2, r0
 8008236:	61e0      	str	r0, [r4, #28]
 8008238:	b920      	cbnz	r0, 8008244 <_Balloc+0x20>
 800823a:	4b18      	ldr	r3, [pc, #96]	; (800829c <_Balloc+0x78>)
 800823c:	4818      	ldr	r0, [pc, #96]	; (80082a0 <_Balloc+0x7c>)
 800823e:	216b      	movs	r1, #107	; 0x6b
 8008240:	f000 fd94 	bl	8008d6c <__assert_func>
 8008244:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008248:	6006      	str	r6, [r0, #0]
 800824a:	60c6      	str	r6, [r0, #12]
 800824c:	69e6      	ldr	r6, [r4, #28]
 800824e:	68f3      	ldr	r3, [r6, #12]
 8008250:	b183      	cbz	r3, 8008274 <_Balloc+0x50>
 8008252:	69e3      	ldr	r3, [r4, #28]
 8008254:	68db      	ldr	r3, [r3, #12]
 8008256:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800825a:	b9b8      	cbnz	r0, 800828c <_Balloc+0x68>
 800825c:	2101      	movs	r1, #1
 800825e:	fa01 f605 	lsl.w	r6, r1, r5
 8008262:	1d72      	adds	r2, r6, #5
 8008264:	0092      	lsls	r2, r2, #2
 8008266:	4620      	mov	r0, r4
 8008268:	f000 fd9e 	bl	8008da8 <_calloc_r>
 800826c:	b160      	cbz	r0, 8008288 <_Balloc+0x64>
 800826e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008272:	e00e      	b.n	8008292 <_Balloc+0x6e>
 8008274:	2221      	movs	r2, #33	; 0x21
 8008276:	2104      	movs	r1, #4
 8008278:	4620      	mov	r0, r4
 800827a:	f000 fd95 	bl	8008da8 <_calloc_r>
 800827e:	69e3      	ldr	r3, [r4, #28]
 8008280:	60f0      	str	r0, [r6, #12]
 8008282:	68db      	ldr	r3, [r3, #12]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d1e4      	bne.n	8008252 <_Balloc+0x2e>
 8008288:	2000      	movs	r0, #0
 800828a:	bd70      	pop	{r4, r5, r6, pc}
 800828c:	6802      	ldr	r2, [r0, #0]
 800828e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008292:	2300      	movs	r3, #0
 8008294:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008298:	e7f7      	b.n	800828a <_Balloc+0x66>
 800829a:	bf00      	nop
 800829c:	080125d9 	.word	0x080125d9
 80082a0:	08012659 	.word	0x08012659

080082a4 <_Bfree>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	69c6      	ldr	r6, [r0, #28]
 80082a8:	4605      	mov	r5, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	b976      	cbnz	r6, 80082cc <_Bfree+0x28>
 80082ae:	2010      	movs	r0, #16
 80082b0:	f7fe f9e2 	bl	8006678 <malloc>
 80082b4:	4602      	mov	r2, r0
 80082b6:	61e8      	str	r0, [r5, #28]
 80082b8:	b920      	cbnz	r0, 80082c4 <_Bfree+0x20>
 80082ba:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <_Bfree+0x3c>)
 80082bc:	4809      	ldr	r0, [pc, #36]	; (80082e4 <_Bfree+0x40>)
 80082be:	218f      	movs	r1, #143	; 0x8f
 80082c0:	f000 fd54 	bl	8008d6c <__assert_func>
 80082c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80082c8:	6006      	str	r6, [r0, #0]
 80082ca:	60c6      	str	r6, [r0, #12]
 80082cc:	b13c      	cbz	r4, 80082de <_Bfree+0x3a>
 80082ce:	69eb      	ldr	r3, [r5, #28]
 80082d0:	6862      	ldr	r2, [r4, #4]
 80082d2:	68db      	ldr	r3, [r3, #12]
 80082d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80082d8:	6021      	str	r1, [r4, #0]
 80082da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	080125d9 	.word	0x080125d9
 80082e4:	08012659 	.word	0x08012659

080082e8 <__multadd>:
 80082e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ec:	690d      	ldr	r5, [r1, #16]
 80082ee:	4607      	mov	r7, r0
 80082f0:	460c      	mov	r4, r1
 80082f2:	461e      	mov	r6, r3
 80082f4:	f101 0c14 	add.w	ip, r1, #20
 80082f8:	2000      	movs	r0, #0
 80082fa:	f8dc 3000 	ldr.w	r3, [ip]
 80082fe:	b299      	uxth	r1, r3
 8008300:	fb02 6101 	mla	r1, r2, r1, r6
 8008304:	0c1e      	lsrs	r6, r3, #16
 8008306:	0c0b      	lsrs	r3, r1, #16
 8008308:	fb02 3306 	mla	r3, r2, r6, r3
 800830c:	b289      	uxth	r1, r1
 800830e:	3001      	adds	r0, #1
 8008310:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008314:	4285      	cmp	r5, r0
 8008316:	f84c 1b04 	str.w	r1, [ip], #4
 800831a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800831e:	dcec      	bgt.n	80082fa <__multadd+0x12>
 8008320:	b30e      	cbz	r6, 8008366 <__multadd+0x7e>
 8008322:	68a3      	ldr	r3, [r4, #8]
 8008324:	42ab      	cmp	r3, r5
 8008326:	dc19      	bgt.n	800835c <__multadd+0x74>
 8008328:	6861      	ldr	r1, [r4, #4]
 800832a:	4638      	mov	r0, r7
 800832c:	3101      	adds	r1, #1
 800832e:	f7ff ff79 	bl	8008224 <_Balloc>
 8008332:	4680      	mov	r8, r0
 8008334:	b928      	cbnz	r0, 8008342 <__multadd+0x5a>
 8008336:	4602      	mov	r2, r0
 8008338:	4b0c      	ldr	r3, [pc, #48]	; (800836c <__multadd+0x84>)
 800833a:	480d      	ldr	r0, [pc, #52]	; (8008370 <__multadd+0x88>)
 800833c:	21ba      	movs	r1, #186	; 0xba
 800833e:	f000 fd15 	bl	8008d6c <__assert_func>
 8008342:	6922      	ldr	r2, [r4, #16]
 8008344:	3202      	adds	r2, #2
 8008346:	f104 010c 	add.w	r1, r4, #12
 800834a:	0092      	lsls	r2, r2, #2
 800834c:	300c      	adds	r0, #12
 800834e:	f7ff f892 	bl	8007476 <memcpy>
 8008352:	4621      	mov	r1, r4
 8008354:	4638      	mov	r0, r7
 8008356:	f7ff ffa5 	bl	80082a4 <_Bfree>
 800835a:	4644      	mov	r4, r8
 800835c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008360:	3501      	adds	r5, #1
 8008362:	615e      	str	r6, [r3, #20]
 8008364:	6125      	str	r5, [r4, #16]
 8008366:	4620      	mov	r0, r4
 8008368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800836c:	08012648 	.word	0x08012648
 8008370:	08012659 	.word	0x08012659

08008374 <__hi0bits>:
 8008374:	0c03      	lsrs	r3, r0, #16
 8008376:	041b      	lsls	r3, r3, #16
 8008378:	b9d3      	cbnz	r3, 80083b0 <__hi0bits+0x3c>
 800837a:	0400      	lsls	r0, r0, #16
 800837c:	2310      	movs	r3, #16
 800837e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8008382:	bf04      	itt	eq
 8008384:	0200      	lsleq	r0, r0, #8
 8008386:	3308      	addeq	r3, #8
 8008388:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800838c:	bf04      	itt	eq
 800838e:	0100      	lsleq	r0, r0, #4
 8008390:	3304      	addeq	r3, #4
 8008392:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8008396:	bf04      	itt	eq
 8008398:	0080      	lsleq	r0, r0, #2
 800839a:	3302      	addeq	r3, #2
 800839c:	2800      	cmp	r0, #0
 800839e:	db05      	blt.n	80083ac <__hi0bits+0x38>
 80083a0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80083a4:	f103 0301 	add.w	r3, r3, #1
 80083a8:	bf08      	it	eq
 80083aa:	2320      	moveq	r3, #32
 80083ac:	4618      	mov	r0, r3
 80083ae:	4770      	bx	lr
 80083b0:	2300      	movs	r3, #0
 80083b2:	e7e4      	b.n	800837e <__hi0bits+0xa>

080083b4 <__lo0bits>:
 80083b4:	6803      	ldr	r3, [r0, #0]
 80083b6:	f013 0207 	ands.w	r2, r3, #7
 80083ba:	d00c      	beq.n	80083d6 <__lo0bits+0x22>
 80083bc:	07d9      	lsls	r1, r3, #31
 80083be:	d422      	bmi.n	8008406 <__lo0bits+0x52>
 80083c0:	079a      	lsls	r2, r3, #30
 80083c2:	bf49      	itett	mi
 80083c4:	085b      	lsrmi	r3, r3, #1
 80083c6:	089b      	lsrpl	r3, r3, #2
 80083c8:	6003      	strmi	r3, [r0, #0]
 80083ca:	2201      	movmi	r2, #1
 80083cc:	bf5c      	itt	pl
 80083ce:	6003      	strpl	r3, [r0, #0]
 80083d0:	2202      	movpl	r2, #2
 80083d2:	4610      	mov	r0, r2
 80083d4:	4770      	bx	lr
 80083d6:	b299      	uxth	r1, r3
 80083d8:	b909      	cbnz	r1, 80083de <__lo0bits+0x2a>
 80083da:	0c1b      	lsrs	r3, r3, #16
 80083dc:	2210      	movs	r2, #16
 80083de:	b2d9      	uxtb	r1, r3
 80083e0:	b909      	cbnz	r1, 80083e6 <__lo0bits+0x32>
 80083e2:	3208      	adds	r2, #8
 80083e4:	0a1b      	lsrs	r3, r3, #8
 80083e6:	0719      	lsls	r1, r3, #28
 80083e8:	bf04      	itt	eq
 80083ea:	091b      	lsreq	r3, r3, #4
 80083ec:	3204      	addeq	r2, #4
 80083ee:	0799      	lsls	r1, r3, #30
 80083f0:	bf04      	itt	eq
 80083f2:	089b      	lsreq	r3, r3, #2
 80083f4:	3202      	addeq	r2, #2
 80083f6:	07d9      	lsls	r1, r3, #31
 80083f8:	d403      	bmi.n	8008402 <__lo0bits+0x4e>
 80083fa:	085b      	lsrs	r3, r3, #1
 80083fc:	f102 0201 	add.w	r2, r2, #1
 8008400:	d003      	beq.n	800840a <__lo0bits+0x56>
 8008402:	6003      	str	r3, [r0, #0]
 8008404:	e7e5      	b.n	80083d2 <__lo0bits+0x1e>
 8008406:	2200      	movs	r2, #0
 8008408:	e7e3      	b.n	80083d2 <__lo0bits+0x1e>
 800840a:	2220      	movs	r2, #32
 800840c:	e7e1      	b.n	80083d2 <__lo0bits+0x1e>
	...

08008410 <__i2b>:
 8008410:	b510      	push	{r4, lr}
 8008412:	460c      	mov	r4, r1
 8008414:	2101      	movs	r1, #1
 8008416:	f7ff ff05 	bl	8008224 <_Balloc>
 800841a:	4602      	mov	r2, r0
 800841c:	b928      	cbnz	r0, 800842a <__i2b+0x1a>
 800841e:	4b05      	ldr	r3, [pc, #20]	; (8008434 <__i2b+0x24>)
 8008420:	4805      	ldr	r0, [pc, #20]	; (8008438 <__i2b+0x28>)
 8008422:	f240 1145 	movw	r1, #325	; 0x145
 8008426:	f000 fca1 	bl	8008d6c <__assert_func>
 800842a:	2301      	movs	r3, #1
 800842c:	6144      	str	r4, [r0, #20]
 800842e:	6103      	str	r3, [r0, #16]
 8008430:	bd10      	pop	{r4, pc}
 8008432:	bf00      	nop
 8008434:	08012648 	.word	0x08012648
 8008438:	08012659 	.word	0x08012659

0800843c <__multiply>:
 800843c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008440:	4691      	mov	r9, r2
 8008442:	690a      	ldr	r2, [r1, #16]
 8008444:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008448:	429a      	cmp	r2, r3
 800844a:	bfb8      	it	lt
 800844c:	460b      	movlt	r3, r1
 800844e:	460c      	mov	r4, r1
 8008450:	bfbc      	itt	lt
 8008452:	464c      	movlt	r4, r9
 8008454:	4699      	movlt	r9, r3
 8008456:	6927      	ldr	r7, [r4, #16]
 8008458:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800845c:	68a3      	ldr	r3, [r4, #8]
 800845e:	6861      	ldr	r1, [r4, #4]
 8008460:	eb07 060a 	add.w	r6, r7, sl
 8008464:	42b3      	cmp	r3, r6
 8008466:	b085      	sub	sp, #20
 8008468:	bfb8      	it	lt
 800846a:	3101      	addlt	r1, #1
 800846c:	f7ff feda 	bl	8008224 <_Balloc>
 8008470:	b930      	cbnz	r0, 8008480 <__multiply+0x44>
 8008472:	4602      	mov	r2, r0
 8008474:	4b44      	ldr	r3, [pc, #272]	; (8008588 <__multiply+0x14c>)
 8008476:	4845      	ldr	r0, [pc, #276]	; (800858c <__multiply+0x150>)
 8008478:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800847c:	f000 fc76 	bl	8008d6c <__assert_func>
 8008480:	f100 0514 	add.w	r5, r0, #20
 8008484:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008488:	462b      	mov	r3, r5
 800848a:	2200      	movs	r2, #0
 800848c:	4543      	cmp	r3, r8
 800848e:	d321      	bcc.n	80084d4 <__multiply+0x98>
 8008490:	f104 0314 	add.w	r3, r4, #20
 8008494:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008498:	f109 0314 	add.w	r3, r9, #20
 800849c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80084a0:	9202      	str	r2, [sp, #8]
 80084a2:	1b3a      	subs	r2, r7, r4
 80084a4:	3a15      	subs	r2, #21
 80084a6:	f022 0203 	bic.w	r2, r2, #3
 80084aa:	3204      	adds	r2, #4
 80084ac:	f104 0115 	add.w	r1, r4, #21
 80084b0:	428f      	cmp	r7, r1
 80084b2:	bf38      	it	cc
 80084b4:	2204      	movcc	r2, #4
 80084b6:	9201      	str	r2, [sp, #4]
 80084b8:	9a02      	ldr	r2, [sp, #8]
 80084ba:	9303      	str	r3, [sp, #12]
 80084bc:	429a      	cmp	r2, r3
 80084be:	d80c      	bhi.n	80084da <__multiply+0x9e>
 80084c0:	2e00      	cmp	r6, #0
 80084c2:	dd03      	ble.n	80084cc <__multiply+0x90>
 80084c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d05b      	beq.n	8008584 <__multiply+0x148>
 80084cc:	6106      	str	r6, [r0, #16]
 80084ce:	b005      	add	sp, #20
 80084d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80084d4:	f843 2b04 	str.w	r2, [r3], #4
 80084d8:	e7d8      	b.n	800848c <__multiply+0x50>
 80084da:	f8b3 a000 	ldrh.w	sl, [r3]
 80084de:	f1ba 0f00 	cmp.w	sl, #0
 80084e2:	d024      	beq.n	800852e <__multiply+0xf2>
 80084e4:	f104 0e14 	add.w	lr, r4, #20
 80084e8:	46a9      	mov	r9, r5
 80084ea:	f04f 0c00 	mov.w	ip, #0
 80084ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80084f2:	f8d9 1000 	ldr.w	r1, [r9]
 80084f6:	fa1f fb82 	uxth.w	fp, r2
 80084fa:	b289      	uxth	r1, r1
 80084fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8008500:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008504:	f8d9 2000 	ldr.w	r2, [r9]
 8008508:	4461      	add	r1, ip
 800850a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800850e:	fb0a c20b 	mla	r2, sl, fp, ip
 8008512:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008516:	b289      	uxth	r1, r1
 8008518:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800851c:	4577      	cmp	r7, lr
 800851e:	f849 1b04 	str.w	r1, [r9], #4
 8008522:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008526:	d8e2      	bhi.n	80084ee <__multiply+0xb2>
 8008528:	9a01      	ldr	r2, [sp, #4]
 800852a:	f845 c002 	str.w	ip, [r5, r2]
 800852e:	9a03      	ldr	r2, [sp, #12]
 8008530:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008534:	3304      	adds	r3, #4
 8008536:	f1b9 0f00 	cmp.w	r9, #0
 800853a:	d021      	beq.n	8008580 <__multiply+0x144>
 800853c:	6829      	ldr	r1, [r5, #0]
 800853e:	f104 0c14 	add.w	ip, r4, #20
 8008542:	46ae      	mov	lr, r5
 8008544:	f04f 0a00 	mov.w	sl, #0
 8008548:	f8bc b000 	ldrh.w	fp, [ip]
 800854c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008550:	fb09 220b 	mla	r2, r9, fp, r2
 8008554:	4452      	add	r2, sl
 8008556:	b289      	uxth	r1, r1
 8008558:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800855c:	f84e 1b04 	str.w	r1, [lr], #4
 8008560:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008564:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008568:	f8be 1000 	ldrh.w	r1, [lr]
 800856c:	fb09 110a 	mla	r1, r9, sl, r1
 8008570:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8008574:	4567      	cmp	r7, ip
 8008576:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800857a:	d8e5      	bhi.n	8008548 <__multiply+0x10c>
 800857c:	9a01      	ldr	r2, [sp, #4]
 800857e:	50a9      	str	r1, [r5, r2]
 8008580:	3504      	adds	r5, #4
 8008582:	e799      	b.n	80084b8 <__multiply+0x7c>
 8008584:	3e01      	subs	r6, #1
 8008586:	e79b      	b.n	80084c0 <__multiply+0x84>
 8008588:	08012648 	.word	0x08012648
 800858c:	08012659 	.word	0x08012659

08008590 <__pow5mult>:
 8008590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008594:	4615      	mov	r5, r2
 8008596:	f012 0203 	ands.w	r2, r2, #3
 800859a:	4606      	mov	r6, r0
 800859c:	460f      	mov	r7, r1
 800859e:	d007      	beq.n	80085b0 <__pow5mult+0x20>
 80085a0:	4c25      	ldr	r4, [pc, #148]	; (8008638 <__pow5mult+0xa8>)
 80085a2:	3a01      	subs	r2, #1
 80085a4:	2300      	movs	r3, #0
 80085a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80085aa:	f7ff fe9d 	bl	80082e8 <__multadd>
 80085ae:	4607      	mov	r7, r0
 80085b0:	10ad      	asrs	r5, r5, #2
 80085b2:	d03d      	beq.n	8008630 <__pow5mult+0xa0>
 80085b4:	69f4      	ldr	r4, [r6, #28]
 80085b6:	b97c      	cbnz	r4, 80085d8 <__pow5mult+0x48>
 80085b8:	2010      	movs	r0, #16
 80085ba:	f7fe f85d 	bl	8006678 <malloc>
 80085be:	4602      	mov	r2, r0
 80085c0:	61f0      	str	r0, [r6, #28]
 80085c2:	b928      	cbnz	r0, 80085d0 <__pow5mult+0x40>
 80085c4:	4b1d      	ldr	r3, [pc, #116]	; (800863c <__pow5mult+0xac>)
 80085c6:	481e      	ldr	r0, [pc, #120]	; (8008640 <__pow5mult+0xb0>)
 80085c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80085cc:	f000 fbce 	bl	8008d6c <__assert_func>
 80085d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80085d4:	6004      	str	r4, [r0, #0]
 80085d6:	60c4      	str	r4, [r0, #12]
 80085d8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80085dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80085e0:	b94c      	cbnz	r4, 80085f6 <__pow5mult+0x66>
 80085e2:	f240 2171 	movw	r1, #625	; 0x271
 80085e6:	4630      	mov	r0, r6
 80085e8:	f7ff ff12 	bl	8008410 <__i2b>
 80085ec:	2300      	movs	r3, #0
 80085ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80085f2:	4604      	mov	r4, r0
 80085f4:	6003      	str	r3, [r0, #0]
 80085f6:	f04f 0900 	mov.w	r9, #0
 80085fa:	07eb      	lsls	r3, r5, #31
 80085fc:	d50a      	bpl.n	8008614 <__pow5mult+0x84>
 80085fe:	4639      	mov	r1, r7
 8008600:	4622      	mov	r2, r4
 8008602:	4630      	mov	r0, r6
 8008604:	f7ff ff1a 	bl	800843c <__multiply>
 8008608:	4639      	mov	r1, r7
 800860a:	4680      	mov	r8, r0
 800860c:	4630      	mov	r0, r6
 800860e:	f7ff fe49 	bl	80082a4 <_Bfree>
 8008612:	4647      	mov	r7, r8
 8008614:	106d      	asrs	r5, r5, #1
 8008616:	d00b      	beq.n	8008630 <__pow5mult+0xa0>
 8008618:	6820      	ldr	r0, [r4, #0]
 800861a:	b938      	cbnz	r0, 800862c <__pow5mult+0x9c>
 800861c:	4622      	mov	r2, r4
 800861e:	4621      	mov	r1, r4
 8008620:	4630      	mov	r0, r6
 8008622:	f7ff ff0b 	bl	800843c <__multiply>
 8008626:	6020      	str	r0, [r4, #0]
 8008628:	f8c0 9000 	str.w	r9, [r0]
 800862c:	4604      	mov	r4, r0
 800862e:	e7e4      	b.n	80085fa <__pow5mult+0x6a>
 8008630:	4638      	mov	r0, r7
 8008632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008636:	bf00      	nop
 8008638:	080127a8 	.word	0x080127a8
 800863c:	080125d9 	.word	0x080125d9
 8008640:	08012659 	.word	0x08012659

08008644 <__lshift>:
 8008644:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008648:	460c      	mov	r4, r1
 800864a:	6849      	ldr	r1, [r1, #4]
 800864c:	6923      	ldr	r3, [r4, #16]
 800864e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008652:	68a3      	ldr	r3, [r4, #8]
 8008654:	4607      	mov	r7, r0
 8008656:	4691      	mov	r9, r2
 8008658:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800865c:	f108 0601 	add.w	r6, r8, #1
 8008660:	42b3      	cmp	r3, r6
 8008662:	db0b      	blt.n	800867c <__lshift+0x38>
 8008664:	4638      	mov	r0, r7
 8008666:	f7ff fddd 	bl	8008224 <_Balloc>
 800866a:	4605      	mov	r5, r0
 800866c:	b948      	cbnz	r0, 8008682 <__lshift+0x3e>
 800866e:	4602      	mov	r2, r0
 8008670:	4b28      	ldr	r3, [pc, #160]	; (8008714 <__lshift+0xd0>)
 8008672:	4829      	ldr	r0, [pc, #164]	; (8008718 <__lshift+0xd4>)
 8008674:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8008678:	f000 fb78 	bl	8008d6c <__assert_func>
 800867c:	3101      	adds	r1, #1
 800867e:	005b      	lsls	r3, r3, #1
 8008680:	e7ee      	b.n	8008660 <__lshift+0x1c>
 8008682:	2300      	movs	r3, #0
 8008684:	f100 0114 	add.w	r1, r0, #20
 8008688:	f100 0210 	add.w	r2, r0, #16
 800868c:	4618      	mov	r0, r3
 800868e:	4553      	cmp	r3, sl
 8008690:	db33      	blt.n	80086fa <__lshift+0xb6>
 8008692:	6920      	ldr	r0, [r4, #16]
 8008694:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008698:	f104 0314 	add.w	r3, r4, #20
 800869c:	f019 091f 	ands.w	r9, r9, #31
 80086a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80086a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80086a8:	d02b      	beq.n	8008702 <__lshift+0xbe>
 80086aa:	f1c9 0e20 	rsb	lr, r9, #32
 80086ae:	468a      	mov	sl, r1
 80086b0:	2200      	movs	r2, #0
 80086b2:	6818      	ldr	r0, [r3, #0]
 80086b4:	fa00 f009 	lsl.w	r0, r0, r9
 80086b8:	4310      	orrs	r0, r2
 80086ba:	f84a 0b04 	str.w	r0, [sl], #4
 80086be:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c2:	459c      	cmp	ip, r3
 80086c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80086c8:	d8f3      	bhi.n	80086b2 <__lshift+0x6e>
 80086ca:	ebac 0304 	sub.w	r3, ip, r4
 80086ce:	3b15      	subs	r3, #21
 80086d0:	f023 0303 	bic.w	r3, r3, #3
 80086d4:	3304      	adds	r3, #4
 80086d6:	f104 0015 	add.w	r0, r4, #21
 80086da:	4584      	cmp	ip, r0
 80086dc:	bf38      	it	cc
 80086de:	2304      	movcc	r3, #4
 80086e0:	50ca      	str	r2, [r1, r3]
 80086e2:	b10a      	cbz	r2, 80086e8 <__lshift+0xa4>
 80086e4:	f108 0602 	add.w	r6, r8, #2
 80086e8:	3e01      	subs	r6, #1
 80086ea:	4638      	mov	r0, r7
 80086ec:	612e      	str	r6, [r5, #16]
 80086ee:	4621      	mov	r1, r4
 80086f0:	f7ff fdd8 	bl	80082a4 <_Bfree>
 80086f4:	4628      	mov	r0, r5
 80086f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80086fe:	3301      	adds	r3, #1
 8008700:	e7c5      	b.n	800868e <__lshift+0x4a>
 8008702:	3904      	subs	r1, #4
 8008704:	f853 2b04 	ldr.w	r2, [r3], #4
 8008708:	f841 2f04 	str.w	r2, [r1, #4]!
 800870c:	459c      	cmp	ip, r3
 800870e:	d8f9      	bhi.n	8008704 <__lshift+0xc0>
 8008710:	e7ea      	b.n	80086e8 <__lshift+0xa4>
 8008712:	bf00      	nop
 8008714:	08012648 	.word	0x08012648
 8008718:	08012659 	.word	0x08012659

0800871c <__mcmp>:
 800871c:	b530      	push	{r4, r5, lr}
 800871e:	6902      	ldr	r2, [r0, #16]
 8008720:	690c      	ldr	r4, [r1, #16]
 8008722:	1b12      	subs	r2, r2, r4
 8008724:	d10e      	bne.n	8008744 <__mcmp+0x28>
 8008726:	f100 0314 	add.w	r3, r0, #20
 800872a:	3114      	adds	r1, #20
 800872c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008730:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008734:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008738:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800873c:	42a5      	cmp	r5, r4
 800873e:	d003      	beq.n	8008748 <__mcmp+0x2c>
 8008740:	d305      	bcc.n	800874e <__mcmp+0x32>
 8008742:	2201      	movs	r2, #1
 8008744:	4610      	mov	r0, r2
 8008746:	bd30      	pop	{r4, r5, pc}
 8008748:	4283      	cmp	r3, r0
 800874a:	d3f3      	bcc.n	8008734 <__mcmp+0x18>
 800874c:	e7fa      	b.n	8008744 <__mcmp+0x28>
 800874e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008752:	e7f7      	b.n	8008744 <__mcmp+0x28>

08008754 <__mdiff>:
 8008754:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008758:	460c      	mov	r4, r1
 800875a:	4606      	mov	r6, r0
 800875c:	4611      	mov	r1, r2
 800875e:	4620      	mov	r0, r4
 8008760:	4690      	mov	r8, r2
 8008762:	f7ff ffdb 	bl	800871c <__mcmp>
 8008766:	1e05      	subs	r5, r0, #0
 8008768:	d110      	bne.n	800878c <__mdiff+0x38>
 800876a:	4629      	mov	r1, r5
 800876c:	4630      	mov	r0, r6
 800876e:	f7ff fd59 	bl	8008224 <_Balloc>
 8008772:	b930      	cbnz	r0, 8008782 <__mdiff+0x2e>
 8008774:	4b3a      	ldr	r3, [pc, #232]	; (8008860 <__mdiff+0x10c>)
 8008776:	4602      	mov	r2, r0
 8008778:	f240 2137 	movw	r1, #567	; 0x237
 800877c:	4839      	ldr	r0, [pc, #228]	; (8008864 <__mdiff+0x110>)
 800877e:	f000 faf5 	bl	8008d6c <__assert_func>
 8008782:	2301      	movs	r3, #1
 8008784:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008788:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800878c:	bfa4      	itt	ge
 800878e:	4643      	movge	r3, r8
 8008790:	46a0      	movge	r8, r4
 8008792:	4630      	mov	r0, r6
 8008794:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008798:	bfa6      	itte	ge
 800879a:	461c      	movge	r4, r3
 800879c:	2500      	movge	r5, #0
 800879e:	2501      	movlt	r5, #1
 80087a0:	f7ff fd40 	bl	8008224 <_Balloc>
 80087a4:	b920      	cbnz	r0, 80087b0 <__mdiff+0x5c>
 80087a6:	4b2e      	ldr	r3, [pc, #184]	; (8008860 <__mdiff+0x10c>)
 80087a8:	4602      	mov	r2, r0
 80087aa:	f240 2145 	movw	r1, #581	; 0x245
 80087ae:	e7e5      	b.n	800877c <__mdiff+0x28>
 80087b0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80087b4:	6926      	ldr	r6, [r4, #16]
 80087b6:	60c5      	str	r5, [r0, #12]
 80087b8:	f104 0914 	add.w	r9, r4, #20
 80087bc:	f108 0514 	add.w	r5, r8, #20
 80087c0:	f100 0e14 	add.w	lr, r0, #20
 80087c4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80087c8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80087cc:	f108 0210 	add.w	r2, r8, #16
 80087d0:	46f2      	mov	sl, lr
 80087d2:	2100      	movs	r1, #0
 80087d4:	f859 3b04 	ldr.w	r3, [r9], #4
 80087d8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80087dc:	fa11 f88b 	uxtah	r8, r1, fp
 80087e0:	b299      	uxth	r1, r3
 80087e2:	0c1b      	lsrs	r3, r3, #16
 80087e4:	eba8 0801 	sub.w	r8, r8, r1
 80087e8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80087ec:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80087f0:	fa1f f888 	uxth.w	r8, r8
 80087f4:	1419      	asrs	r1, r3, #16
 80087f6:	454e      	cmp	r6, r9
 80087f8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80087fc:	f84a 3b04 	str.w	r3, [sl], #4
 8008800:	d8e8      	bhi.n	80087d4 <__mdiff+0x80>
 8008802:	1b33      	subs	r3, r6, r4
 8008804:	3b15      	subs	r3, #21
 8008806:	f023 0303 	bic.w	r3, r3, #3
 800880a:	3304      	adds	r3, #4
 800880c:	3415      	adds	r4, #21
 800880e:	42a6      	cmp	r6, r4
 8008810:	bf38      	it	cc
 8008812:	2304      	movcc	r3, #4
 8008814:	441d      	add	r5, r3
 8008816:	4473      	add	r3, lr
 8008818:	469e      	mov	lr, r3
 800881a:	462e      	mov	r6, r5
 800881c:	4566      	cmp	r6, ip
 800881e:	d30e      	bcc.n	800883e <__mdiff+0xea>
 8008820:	f10c 0203 	add.w	r2, ip, #3
 8008824:	1b52      	subs	r2, r2, r5
 8008826:	f022 0203 	bic.w	r2, r2, #3
 800882a:	3d03      	subs	r5, #3
 800882c:	45ac      	cmp	ip, r5
 800882e:	bf38      	it	cc
 8008830:	2200      	movcc	r2, #0
 8008832:	4413      	add	r3, r2
 8008834:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008838:	b17a      	cbz	r2, 800885a <__mdiff+0x106>
 800883a:	6107      	str	r7, [r0, #16]
 800883c:	e7a4      	b.n	8008788 <__mdiff+0x34>
 800883e:	f856 8b04 	ldr.w	r8, [r6], #4
 8008842:	fa11 f288 	uxtah	r2, r1, r8
 8008846:	1414      	asrs	r4, r2, #16
 8008848:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800884c:	b292      	uxth	r2, r2
 800884e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008852:	f84e 2b04 	str.w	r2, [lr], #4
 8008856:	1421      	asrs	r1, r4, #16
 8008858:	e7e0      	b.n	800881c <__mdiff+0xc8>
 800885a:	3f01      	subs	r7, #1
 800885c:	e7ea      	b.n	8008834 <__mdiff+0xe0>
 800885e:	bf00      	nop
 8008860:	08012648 	.word	0x08012648
 8008864:	08012659 	.word	0x08012659

08008868 <__d2b>:
 8008868:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800886c:	460f      	mov	r7, r1
 800886e:	2101      	movs	r1, #1
 8008870:	ec59 8b10 	vmov	r8, r9, d0
 8008874:	4616      	mov	r6, r2
 8008876:	f7ff fcd5 	bl	8008224 <_Balloc>
 800887a:	4604      	mov	r4, r0
 800887c:	b930      	cbnz	r0, 800888c <__d2b+0x24>
 800887e:	4602      	mov	r2, r0
 8008880:	4b24      	ldr	r3, [pc, #144]	; (8008914 <__d2b+0xac>)
 8008882:	4825      	ldr	r0, [pc, #148]	; (8008918 <__d2b+0xb0>)
 8008884:	f240 310f 	movw	r1, #783	; 0x30f
 8008888:	f000 fa70 	bl	8008d6c <__assert_func>
 800888c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008890:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008894:	bb2d      	cbnz	r5, 80088e2 <__d2b+0x7a>
 8008896:	9301      	str	r3, [sp, #4]
 8008898:	f1b8 0300 	subs.w	r3, r8, #0
 800889c:	d026      	beq.n	80088ec <__d2b+0x84>
 800889e:	4668      	mov	r0, sp
 80088a0:	9300      	str	r3, [sp, #0]
 80088a2:	f7ff fd87 	bl	80083b4 <__lo0bits>
 80088a6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80088aa:	b1e8      	cbz	r0, 80088e8 <__d2b+0x80>
 80088ac:	f1c0 0320 	rsb	r3, r0, #32
 80088b0:	fa02 f303 	lsl.w	r3, r2, r3
 80088b4:	430b      	orrs	r3, r1
 80088b6:	40c2      	lsrs	r2, r0
 80088b8:	6163      	str	r3, [r4, #20]
 80088ba:	9201      	str	r2, [sp, #4]
 80088bc:	9b01      	ldr	r3, [sp, #4]
 80088be:	61a3      	str	r3, [r4, #24]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bf14      	ite	ne
 80088c4:	2202      	movne	r2, #2
 80088c6:	2201      	moveq	r2, #1
 80088c8:	6122      	str	r2, [r4, #16]
 80088ca:	b1bd      	cbz	r5, 80088fc <__d2b+0x94>
 80088cc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80088d0:	4405      	add	r5, r0
 80088d2:	603d      	str	r5, [r7, #0]
 80088d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80088d8:	6030      	str	r0, [r6, #0]
 80088da:	4620      	mov	r0, r4
 80088dc:	b003      	add	sp, #12
 80088de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088e6:	e7d6      	b.n	8008896 <__d2b+0x2e>
 80088e8:	6161      	str	r1, [r4, #20]
 80088ea:	e7e7      	b.n	80088bc <__d2b+0x54>
 80088ec:	a801      	add	r0, sp, #4
 80088ee:	f7ff fd61 	bl	80083b4 <__lo0bits>
 80088f2:	9b01      	ldr	r3, [sp, #4]
 80088f4:	6163      	str	r3, [r4, #20]
 80088f6:	3020      	adds	r0, #32
 80088f8:	2201      	movs	r2, #1
 80088fa:	e7e5      	b.n	80088c8 <__d2b+0x60>
 80088fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008900:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008904:	6038      	str	r0, [r7, #0]
 8008906:	6918      	ldr	r0, [r3, #16]
 8008908:	f7ff fd34 	bl	8008374 <__hi0bits>
 800890c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008910:	e7e2      	b.n	80088d8 <__d2b+0x70>
 8008912:	bf00      	nop
 8008914:	08012648 	.word	0x08012648
 8008918:	08012659 	.word	0x08012659

0800891c <_malloc_usable_size_r>:
 800891c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008920:	1f18      	subs	r0, r3, #4
 8008922:	2b00      	cmp	r3, #0
 8008924:	bfbc      	itt	lt
 8008926:	580b      	ldrlt	r3, [r1, r0]
 8008928:	18c0      	addlt	r0, r0, r3
 800892a:	4770      	bx	lr

0800892c <__ssputs_r>:
 800892c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008930:	688e      	ldr	r6, [r1, #8]
 8008932:	461f      	mov	r7, r3
 8008934:	42be      	cmp	r6, r7
 8008936:	680b      	ldr	r3, [r1, #0]
 8008938:	4682      	mov	sl, r0
 800893a:	460c      	mov	r4, r1
 800893c:	4690      	mov	r8, r2
 800893e:	d82c      	bhi.n	800899a <__ssputs_r+0x6e>
 8008940:	898a      	ldrh	r2, [r1, #12]
 8008942:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008946:	d026      	beq.n	8008996 <__ssputs_r+0x6a>
 8008948:	6965      	ldr	r5, [r4, #20]
 800894a:	6909      	ldr	r1, [r1, #16]
 800894c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008950:	eba3 0901 	sub.w	r9, r3, r1
 8008954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008958:	1c7b      	adds	r3, r7, #1
 800895a:	444b      	add	r3, r9
 800895c:	106d      	asrs	r5, r5, #1
 800895e:	429d      	cmp	r5, r3
 8008960:	bf38      	it	cc
 8008962:	461d      	movcc	r5, r3
 8008964:	0553      	lsls	r3, r2, #21
 8008966:	d527      	bpl.n	80089b8 <__ssputs_r+0x8c>
 8008968:	4629      	mov	r1, r5
 800896a:	f7fd fead 	bl	80066c8 <_malloc_r>
 800896e:	4606      	mov	r6, r0
 8008970:	b360      	cbz	r0, 80089cc <__ssputs_r+0xa0>
 8008972:	6921      	ldr	r1, [r4, #16]
 8008974:	464a      	mov	r2, r9
 8008976:	f7fe fd7e 	bl	8007476 <memcpy>
 800897a:	89a3      	ldrh	r3, [r4, #12]
 800897c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008984:	81a3      	strh	r3, [r4, #12]
 8008986:	6126      	str	r6, [r4, #16]
 8008988:	6165      	str	r5, [r4, #20]
 800898a:	444e      	add	r6, r9
 800898c:	eba5 0509 	sub.w	r5, r5, r9
 8008990:	6026      	str	r6, [r4, #0]
 8008992:	60a5      	str	r5, [r4, #8]
 8008994:	463e      	mov	r6, r7
 8008996:	42be      	cmp	r6, r7
 8008998:	d900      	bls.n	800899c <__ssputs_r+0x70>
 800899a:	463e      	mov	r6, r7
 800899c:	6820      	ldr	r0, [r4, #0]
 800899e:	4632      	mov	r2, r6
 80089a0:	4641      	mov	r1, r8
 80089a2:	f000 f9c9 	bl	8008d38 <memmove>
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	1b9b      	subs	r3, r3, r6
 80089aa:	60a3      	str	r3, [r4, #8]
 80089ac:	6823      	ldr	r3, [r4, #0]
 80089ae:	4433      	add	r3, r6
 80089b0:	6023      	str	r3, [r4, #0]
 80089b2:	2000      	movs	r0, #0
 80089b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80089b8:	462a      	mov	r2, r5
 80089ba:	f7fd ff11 	bl	80067e0 <_realloc_r>
 80089be:	4606      	mov	r6, r0
 80089c0:	2800      	cmp	r0, #0
 80089c2:	d1e0      	bne.n	8008986 <__ssputs_r+0x5a>
 80089c4:	6921      	ldr	r1, [r4, #16]
 80089c6:	4650      	mov	r0, sl
 80089c8:	f7ff fbe0 	bl	800818c <_free_r>
 80089cc:	230c      	movs	r3, #12
 80089ce:	f8ca 3000 	str.w	r3, [sl]
 80089d2:	89a3      	ldrh	r3, [r4, #12]
 80089d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089d8:	81a3      	strh	r3, [r4, #12]
 80089da:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089de:	e7e9      	b.n	80089b4 <__ssputs_r+0x88>

080089e0 <_svfiprintf_r>:
 80089e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089e4:	4698      	mov	r8, r3
 80089e6:	898b      	ldrh	r3, [r1, #12]
 80089e8:	061b      	lsls	r3, r3, #24
 80089ea:	b09d      	sub	sp, #116	; 0x74
 80089ec:	4607      	mov	r7, r0
 80089ee:	460d      	mov	r5, r1
 80089f0:	4614      	mov	r4, r2
 80089f2:	d50e      	bpl.n	8008a12 <_svfiprintf_r+0x32>
 80089f4:	690b      	ldr	r3, [r1, #16]
 80089f6:	b963      	cbnz	r3, 8008a12 <_svfiprintf_r+0x32>
 80089f8:	2140      	movs	r1, #64	; 0x40
 80089fa:	f7fd fe65 	bl	80066c8 <_malloc_r>
 80089fe:	6028      	str	r0, [r5, #0]
 8008a00:	6128      	str	r0, [r5, #16]
 8008a02:	b920      	cbnz	r0, 8008a0e <_svfiprintf_r+0x2e>
 8008a04:	230c      	movs	r3, #12
 8008a06:	603b      	str	r3, [r7, #0]
 8008a08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a0c:	e0d0      	b.n	8008bb0 <_svfiprintf_r+0x1d0>
 8008a0e:	2340      	movs	r3, #64	; 0x40
 8008a10:	616b      	str	r3, [r5, #20]
 8008a12:	2300      	movs	r3, #0
 8008a14:	9309      	str	r3, [sp, #36]	; 0x24
 8008a16:	2320      	movs	r3, #32
 8008a18:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008a1c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a20:	2330      	movs	r3, #48	; 0x30
 8008a22:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008bc8 <_svfiprintf_r+0x1e8>
 8008a26:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008a2a:	f04f 0901 	mov.w	r9, #1
 8008a2e:	4623      	mov	r3, r4
 8008a30:	469a      	mov	sl, r3
 8008a32:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a36:	b10a      	cbz	r2, 8008a3c <_svfiprintf_r+0x5c>
 8008a38:	2a25      	cmp	r2, #37	; 0x25
 8008a3a:	d1f9      	bne.n	8008a30 <_svfiprintf_r+0x50>
 8008a3c:	ebba 0b04 	subs.w	fp, sl, r4
 8008a40:	d00b      	beq.n	8008a5a <_svfiprintf_r+0x7a>
 8008a42:	465b      	mov	r3, fp
 8008a44:	4622      	mov	r2, r4
 8008a46:	4629      	mov	r1, r5
 8008a48:	4638      	mov	r0, r7
 8008a4a:	f7ff ff6f 	bl	800892c <__ssputs_r>
 8008a4e:	3001      	adds	r0, #1
 8008a50:	f000 80a9 	beq.w	8008ba6 <_svfiprintf_r+0x1c6>
 8008a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a56:	445a      	add	r2, fp
 8008a58:	9209      	str	r2, [sp, #36]	; 0x24
 8008a5a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	f000 80a1 	beq.w	8008ba6 <_svfiprintf_r+0x1c6>
 8008a64:	2300      	movs	r3, #0
 8008a66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008a6a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a6e:	f10a 0a01 	add.w	sl, sl, #1
 8008a72:	9304      	str	r3, [sp, #16]
 8008a74:	9307      	str	r3, [sp, #28]
 8008a76:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a7a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a7c:	4654      	mov	r4, sl
 8008a7e:	2205      	movs	r2, #5
 8008a80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a84:	4850      	ldr	r0, [pc, #320]	; (8008bc8 <_svfiprintf_r+0x1e8>)
 8008a86:	f7f7 fba3 	bl	80001d0 <memchr>
 8008a8a:	9a04      	ldr	r2, [sp, #16]
 8008a8c:	b9d8      	cbnz	r0, 8008ac6 <_svfiprintf_r+0xe6>
 8008a8e:	06d0      	lsls	r0, r2, #27
 8008a90:	bf44      	itt	mi
 8008a92:	2320      	movmi	r3, #32
 8008a94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a98:	0711      	lsls	r1, r2, #28
 8008a9a:	bf44      	itt	mi
 8008a9c:	232b      	movmi	r3, #43	; 0x2b
 8008a9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa6:	2b2a      	cmp	r3, #42	; 0x2a
 8008aa8:	d015      	beq.n	8008ad6 <_svfiprintf_r+0xf6>
 8008aaa:	9a07      	ldr	r2, [sp, #28]
 8008aac:	4654      	mov	r4, sl
 8008aae:	2000      	movs	r0, #0
 8008ab0:	f04f 0c0a 	mov.w	ip, #10
 8008ab4:	4621      	mov	r1, r4
 8008ab6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008aba:	3b30      	subs	r3, #48	; 0x30
 8008abc:	2b09      	cmp	r3, #9
 8008abe:	d94d      	bls.n	8008b5c <_svfiprintf_r+0x17c>
 8008ac0:	b1b0      	cbz	r0, 8008af0 <_svfiprintf_r+0x110>
 8008ac2:	9207      	str	r2, [sp, #28]
 8008ac4:	e014      	b.n	8008af0 <_svfiprintf_r+0x110>
 8008ac6:	eba0 0308 	sub.w	r3, r0, r8
 8008aca:	fa09 f303 	lsl.w	r3, r9, r3
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	9304      	str	r3, [sp, #16]
 8008ad2:	46a2      	mov	sl, r4
 8008ad4:	e7d2      	b.n	8008a7c <_svfiprintf_r+0x9c>
 8008ad6:	9b03      	ldr	r3, [sp, #12]
 8008ad8:	1d19      	adds	r1, r3, #4
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	9103      	str	r1, [sp, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	bfbb      	ittet	lt
 8008ae2:	425b      	neglt	r3, r3
 8008ae4:	f042 0202 	orrlt.w	r2, r2, #2
 8008ae8:	9307      	strge	r3, [sp, #28]
 8008aea:	9307      	strlt	r3, [sp, #28]
 8008aec:	bfb8      	it	lt
 8008aee:	9204      	strlt	r2, [sp, #16]
 8008af0:	7823      	ldrb	r3, [r4, #0]
 8008af2:	2b2e      	cmp	r3, #46	; 0x2e
 8008af4:	d10c      	bne.n	8008b10 <_svfiprintf_r+0x130>
 8008af6:	7863      	ldrb	r3, [r4, #1]
 8008af8:	2b2a      	cmp	r3, #42	; 0x2a
 8008afa:	d134      	bne.n	8008b66 <_svfiprintf_r+0x186>
 8008afc:	9b03      	ldr	r3, [sp, #12]
 8008afe:	1d1a      	adds	r2, r3, #4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	9203      	str	r2, [sp, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	bfb8      	it	lt
 8008b08:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008b0c:	3402      	adds	r4, #2
 8008b0e:	9305      	str	r3, [sp, #20]
 8008b10:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008bd8 <_svfiprintf_r+0x1f8>
 8008b14:	7821      	ldrb	r1, [r4, #0]
 8008b16:	2203      	movs	r2, #3
 8008b18:	4650      	mov	r0, sl
 8008b1a:	f7f7 fb59 	bl	80001d0 <memchr>
 8008b1e:	b138      	cbz	r0, 8008b30 <_svfiprintf_r+0x150>
 8008b20:	9b04      	ldr	r3, [sp, #16]
 8008b22:	eba0 000a 	sub.w	r0, r0, sl
 8008b26:	2240      	movs	r2, #64	; 0x40
 8008b28:	4082      	lsls	r2, r0
 8008b2a:	4313      	orrs	r3, r2
 8008b2c:	3401      	adds	r4, #1
 8008b2e:	9304      	str	r3, [sp, #16]
 8008b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b34:	4825      	ldr	r0, [pc, #148]	; (8008bcc <_svfiprintf_r+0x1ec>)
 8008b36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008b3a:	2206      	movs	r2, #6
 8008b3c:	f7f7 fb48 	bl	80001d0 <memchr>
 8008b40:	2800      	cmp	r0, #0
 8008b42:	d038      	beq.n	8008bb6 <_svfiprintf_r+0x1d6>
 8008b44:	4b22      	ldr	r3, [pc, #136]	; (8008bd0 <_svfiprintf_r+0x1f0>)
 8008b46:	bb1b      	cbnz	r3, 8008b90 <_svfiprintf_r+0x1b0>
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	3307      	adds	r3, #7
 8008b4c:	f023 0307 	bic.w	r3, r3, #7
 8008b50:	3308      	adds	r3, #8
 8008b52:	9303      	str	r3, [sp, #12]
 8008b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b56:	4433      	add	r3, r6
 8008b58:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5a:	e768      	b.n	8008a2e <_svfiprintf_r+0x4e>
 8008b5c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b60:	460c      	mov	r4, r1
 8008b62:	2001      	movs	r0, #1
 8008b64:	e7a6      	b.n	8008ab4 <_svfiprintf_r+0xd4>
 8008b66:	2300      	movs	r3, #0
 8008b68:	3401      	adds	r4, #1
 8008b6a:	9305      	str	r3, [sp, #20]
 8008b6c:	4619      	mov	r1, r3
 8008b6e:	f04f 0c0a 	mov.w	ip, #10
 8008b72:	4620      	mov	r0, r4
 8008b74:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b78:	3a30      	subs	r2, #48	; 0x30
 8008b7a:	2a09      	cmp	r2, #9
 8008b7c:	d903      	bls.n	8008b86 <_svfiprintf_r+0x1a6>
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0c6      	beq.n	8008b10 <_svfiprintf_r+0x130>
 8008b82:	9105      	str	r1, [sp, #20]
 8008b84:	e7c4      	b.n	8008b10 <_svfiprintf_r+0x130>
 8008b86:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b8a:	4604      	mov	r4, r0
 8008b8c:	2301      	movs	r3, #1
 8008b8e:	e7f0      	b.n	8008b72 <_svfiprintf_r+0x192>
 8008b90:	ab03      	add	r3, sp, #12
 8008b92:	9300      	str	r3, [sp, #0]
 8008b94:	462a      	mov	r2, r5
 8008b96:	4b0f      	ldr	r3, [pc, #60]	; (8008bd4 <_svfiprintf_r+0x1f4>)
 8008b98:	a904      	add	r1, sp, #16
 8008b9a:	4638      	mov	r0, r7
 8008b9c:	f7fd fef0 	bl	8006980 <_printf_float>
 8008ba0:	1c42      	adds	r2, r0, #1
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	d1d6      	bne.n	8008b54 <_svfiprintf_r+0x174>
 8008ba6:	89ab      	ldrh	r3, [r5, #12]
 8008ba8:	065b      	lsls	r3, r3, #25
 8008baa:	f53f af2d 	bmi.w	8008a08 <_svfiprintf_r+0x28>
 8008bae:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008bb0:	b01d      	add	sp, #116	; 0x74
 8008bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb6:	ab03      	add	r3, sp, #12
 8008bb8:	9300      	str	r3, [sp, #0]
 8008bba:	462a      	mov	r2, r5
 8008bbc:	4b05      	ldr	r3, [pc, #20]	; (8008bd4 <_svfiprintf_r+0x1f4>)
 8008bbe:	a904      	add	r1, sp, #16
 8008bc0:	4638      	mov	r0, r7
 8008bc2:	f7fe f981 	bl	8006ec8 <_printf_i>
 8008bc6:	e7eb      	b.n	8008ba0 <_svfiprintf_r+0x1c0>
 8008bc8:	080127b4 	.word	0x080127b4
 8008bcc:	080127be 	.word	0x080127be
 8008bd0:	08006981 	.word	0x08006981
 8008bd4:	0800892d 	.word	0x0800892d
 8008bd8:	080127ba 	.word	0x080127ba

08008bdc <__sflush_r>:
 8008bdc:	898a      	ldrh	r2, [r1, #12]
 8008bde:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008be2:	4605      	mov	r5, r0
 8008be4:	0710      	lsls	r0, r2, #28
 8008be6:	460c      	mov	r4, r1
 8008be8:	d458      	bmi.n	8008c9c <__sflush_r+0xc0>
 8008bea:	684b      	ldr	r3, [r1, #4]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dc05      	bgt.n	8008bfc <__sflush_r+0x20>
 8008bf0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	dc02      	bgt.n	8008bfc <__sflush_r+0x20>
 8008bf6:	2000      	movs	r0, #0
 8008bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bfc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bfe:	2e00      	cmp	r6, #0
 8008c00:	d0f9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008c02:	2300      	movs	r3, #0
 8008c04:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c08:	682f      	ldr	r7, [r5, #0]
 8008c0a:	6a21      	ldr	r1, [r4, #32]
 8008c0c:	602b      	str	r3, [r5, #0]
 8008c0e:	d032      	beq.n	8008c76 <__sflush_r+0x9a>
 8008c10:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c12:	89a3      	ldrh	r3, [r4, #12]
 8008c14:	075a      	lsls	r2, r3, #29
 8008c16:	d505      	bpl.n	8008c24 <__sflush_r+0x48>
 8008c18:	6863      	ldr	r3, [r4, #4]
 8008c1a:	1ac0      	subs	r0, r0, r3
 8008c1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c1e:	b10b      	cbz	r3, 8008c24 <__sflush_r+0x48>
 8008c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c22:	1ac0      	subs	r0, r0, r3
 8008c24:	2300      	movs	r3, #0
 8008c26:	4602      	mov	r2, r0
 8008c28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c2a:	6a21      	ldr	r1, [r4, #32]
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	47b0      	blx	r6
 8008c30:	1c43      	adds	r3, r0, #1
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	d106      	bne.n	8008c44 <__sflush_r+0x68>
 8008c36:	6829      	ldr	r1, [r5, #0]
 8008c38:	291d      	cmp	r1, #29
 8008c3a:	d82b      	bhi.n	8008c94 <__sflush_r+0xb8>
 8008c3c:	4a29      	ldr	r2, [pc, #164]	; (8008ce4 <__sflush_r+0x108>)
 8008c3e:	410a      	asrs	r2, r1
 8008c40:	07d6      	lsls	r6, r2, #31
 8008c42:	d427      	bmi.n	8008c94 <__sflush_r+0xb8>
 8008c44:	2200      	movs	r2, #0
 8008c46:	6062      	str	r2, [r4, #4]
 8008c48:	04d9      	lsls	r1, r3, #19
 8008c4a:	6922      	ldr	r2, [r4, #16]
 8008c4c:	6022      	str	r2, [r4, #0]
 8008c4e:	d504      	bpl.n	8008c5a <__sflush_r+0x7e>
 8008c50:	1c42      	adds	r2, r0, #1
 8008c52:	d101      	bne.n	8008c58 <__sflush_r+0x7c>
 8008c54:	682b      	ldr	r3, [r5, #0]
 8008c56:	b903      	cbnz	r3, 8008c5a <__sflush_r+0x7e>
 8008c58:	6560      	str	r0, [r4, #84]	; 0x54
 8008c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c5c:	602f      	str	r7, [r5, #0]
 8008c5e:	2900      	cmp	r1, #0
 8008c60:	d0c9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008c62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c66:	4299      	cmp	r1, r3
 8008c68:	d002      	beq.n	8008c70 <__sflush_r+0x94>
 8008c6a:	4628      	mov	r0, r5
 8008c6c:	f7ff fa8e 	bl	800818c <_free_r>
 8008c70:	2000      	movs	r0, #0
 8008c72:	6360      	str	r0, [r4, #52]	; 0x34
 8008c74:	e7c0      	b.n	8008bf8 <__sflush_r+0x1c>
 8008c76:	2301      	movs	r3, #1
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b0      	blx	r6
 8008c7c:	1c41      	adds	r1, r0, #1
 8008c7e:	d1c8      	bne.n	8008c12 <__sflush_r+0x36>
 8008c80:	682b      	ldr	r3, [r5, #0]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d0c5      	beq.n	8008c12 <__sflush_r+0x36>
 8008c86:	2b1d      	cmp	r3, #29
 8008c88:	d001      	beq.n	8008c8e <__sflush_r+0xb2>
 8008c8a:	2b16      	cmp	r3, #22
 8008c8c:	d101      	bne.n	8008c92 <__sflush_r+0xb6>
 8008c8e:	602f      	str	r7, [r5, #0]
 8008c90:	e7b1      	b.n	8008bf6 <__sflush_r+0x1a>
 8008c92:	89a3      	ldrh	r3, [r4, #12]
 8008c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c98:	81a3      	strh	r3, [r4, #12]
 8008c9a:	e7ad      	b.n	8008bf8 <__sflush_r+0x1c>
 8008c9c:	690f      	ldr	r7, [r1, #16]
 8008c9e:	2f00      	cmp	r7, #0
 8008ca0:	d0a9      	beq.n	8008bf6 <__sflush_r+0x1a>
 8008ca2:	0793      	lsls	r3, r2, #30
 8008ca4:	680e      	ldr	r6, [r1, #0]
 8008ca6:	bf08      	it	eq
 8008ca8:	694b      	ldreq	r3, [r1, #20]
 8008caa:	600f      	str	r7, [r1, #0]
 8008cac:	bf18      	it	ne
 8008cae:	2300      	movne	r3, #0
 8008cb0:	eba6 0807 	sub.w	r8, r6, r7
 8008cb4:	608b      	str	r3, [r1, #8]
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	dd9c      	ble.n	8008bf6 <__sflush_r+0x1a>
 8008cbc:	6a21      	ldr	r1, [r4, #32]
 8008cbe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008cc0:	4643      	mov	r3, r8
 8008cc2:	463a      	mov	r2, r7
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b0      	blx	r6
 8008cc8:	2800      	cmp	r0, #0
 8008cca:	dc06      	bgt.n	8008cda <__sflush_r+0xfe>
 8008ccc:	89a3      	ldrh	r3, [r4, #12]
 8008cce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008cd2:	81a3      	strh	r3, [r4, #12]
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008cd8:	e78e      	b.n	8008bf8 <__sflush_r+0x1c>
 8008cda:	4407      	add	r7, r0
 8008cdc:	eba8 0800 	sub.w	r8, r8, r0
 8008ce0:	e7e9      	b.n	8008cb6 <__sflush_r+0xda>
 8008ce2:	bf00      	nop
 8008ce4:	dfbffffe 	.word	0xdfbffffe

08008ce8 <_fflush_r>:
 8008ce8:	b538      	push	{r3, r4, r5, lr}
 8008cea:	690b      	ldr	r3, [r1, #16]
 8008cec:	4605      	mov	r5, r0
 8008cee:	460c      	mov	r4, r1
 8008cf0:	b913      	cbnz	r3, 8008cf8 <_fflush_r+0x10>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	bd38      	pop	{r3, r4, r5, pc}
 8008cf8:	b118      	cbz	r0, 8008d02 <_fflush_r+0x1a>
 8008cfa:	6a03      	ldr	r3, [r0, #32]
 8008cfc:	b90b      	cbnz	r3, 8008d02 <_fflush_r+0x1a>
 8008cfe:	f7fe fa91 	bl	8007224 <__sinit>
 8008d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d0f3      	beq.n	8008cf2 <_fflush_r+0xa>
 8008d0a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008d0c:	07d0      	lsls	r0, r2, #31
 8008d0e:	d404      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d10:	0599      	lsls	r1, r3, #22
 8008d12:	d402      	bmi.n	8008d1a <_fflush_r+0x32>
 8008d14:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d16:	f7fe fbac 	bl	8007472 <__retarget_lock_acquire_recursive>
 8008d1a:	4628      	mov	r0, r5
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	f7ff ff5d 	bl	8008bdc <__sflush_r>
 8008d22:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d24:	07da      	lsls	r2, r3, #31
 8008d26:	4605      	mov	r5, r0
 8008d28:	d4e4      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d2a:	89a3      	ldrh	r3, [r4, #12]
 8008d2c:	059b      	lsls	r3, r3, #22
 8008d2e:	d4e1      	bmi.n	8008cf4 <_fflush_r+0xc>
 8008d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d32:	f7fe fb9f 	bl	8007474 <__retarget_lock_release_recursive>
 8008d36:	e7dd      	b.n	8008cf4 <_fflush_r+0xc>

08008d38 <memmove>:
 8008d38:	4288      	cmp	r0, r1
 8008d3a:	b510      	push	{r4, lr}
 8008d3c:	eb01 0402 	add.w	r4, r1, r2
 8008d40:	d902      	bls.n	8008d48 <memmove+0x10>
 8008d42:	4284      	cmp	r4, r0
 8008d44:	4623      	mov	r3, r4
 8008d46:	d807      	bhi.n	8008d58 <memmove+0x20>
 8008d48:	1e43      	subs	r3, r0, #1
 8008d4a:	42a1      	cmp	r1, r4
 8008d4c:	d008      	beq.n	8008d60 <memmove+0x28>
 8008d4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d56:	e7f8      	b.n	8008d4a <memmove+0x12>
 8008d58:	4402      	add	r2, r0
 8008d5a:	4601      	mov	r1, r0
 8008d5c:	428a      	cmp	r2, r1
 8008d5e:	d100      	bne.n	8008d62 <memmove+0x2a>
 8008d60:	bd10      	pop	{r4, pc}
 8008d62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008d6a:	e7f7      	b.n	8008d5c <memmove+0x24>

08008d6c <__assert_func>:
 8008d6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d6e:	4614      	mov	r4, r2
 8008d70:	461a      	mov	r2, r3
 8008d72:	4b09      	ldr	r3, [pc, #36]	; (8008d98 <__assert_func+0x2c>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4605      	mov	r5, r0
 8008d78:	68d8      	ldr	r0, [r3, #12]
 8008d7a:	b14c      	cbz	r4, 8008d90 <__assert_func+0x24>
 8008d7c:	4b07      	ldr	r3, [pc, #28]	; (8008d9c <__assert_func+0x30>)
 8008d7e:	9100      	str	r1, [sp, #0]
 8008d80:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008d84:	4906      	ldr	r1, [pc, #24]	; (8008da0 <__assert_func+0x34>)
 8008d86:	462b      	mov	r3, r5
 8008d88:	f000 f844 	bl	8008e14 <fiprintf>
 8008d8c:	f000 f854 	bl	8008e38 <abort>
 8008d90:	4b04      	ldr	r3, [pc, #16]	; (8008da4 <__assert_func+0x38>)
 8008d92:	461c      	mov	r4, r3
 8008d94:	e7f3      	b.n	8008d7e <__assert_func+0x12>
 8008d96:	bf00      	nop
 8008d98:	200007ac 	.word	0x200007ac
 8008d9c:	080127cf 	.word	0x080127cf
 8008da0:	080127dc 	.word	0x080127dc
 8008da4:	0801280a 	.word	0x0801280a

08008da8 <_calloc_r>:
 8008da8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008daa:	fba1 2402 	umull	r2, r4, r1, r2
 8008dae:	b94c      	cbnz	r4, 8008dc4 <_calloc_r+0x1c>
 8008db0:	4611      	mov	r1, r2
 8008db2:	9201      	str	r2, [sp, #4]
 8008db4:	f7fd fc88 	bl	80066c8 <_malloc_r>
 8008db8:	9a01      	ldr	r2, [sp, #4]
 8008dba:	4605      	mov	r5, r0
 8008dbc:	b930      	cbnz	r0, 8008dcc <_calloc_r+0x24>
 8008dbe:	4628      	mov	r0, r5
 8008dc0:	b003      	add	sp, #12
 8008dc2:	bd30      	pop	{r4, r5, pc}
 8008dc4:	220c      	movs	r2, #12
 8008dc6:	6002      	str	r2, [r0, #0]
 8008dc8:	2500      	movs	r5, #0
 8008dca:	e7f8      	b.n	8008dbe <_calloc_r+0x16>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	f7fe fac2 	bl	8007356 <memset>
 8008dd2:	e7f4      	b.n	8008dbe <_calloc_r+0x16>

08008dd4 <__ascii_mbtowc>:
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	b901      	cbnz	r1, 8008dda <__ascii_mbtowc+0x6>
 8008dd8:	a901      	add	r1, sp, #4
 8008dda:	b142      	cbz	r2, 8008dee <__ascii_mbtowc+0x1a>
 8008ddc:	b14b      	cbz	r3, 8008df2 <__ascii_mbtowc+0x1e>
 8008dde:	7813      	ldrb	r3, [r2, #0]
 8008de0:	600b      	str	r3, [r1, #0]
 8008de2:	7812      	ldrb	r2, [r2, #0]
 8008de4:	1e10      	subs	r0, r2, #0
 8008de6:	bf18      	it	ne
 8008de8:	2001      	movne	r0, #1
 8008dea:	b002      	add	sp, #8
 8008dec:	4770      	bx	lr
 8008dee:	4610      	mov	r0, r2
 8008df0:	e7fb      	b.n	8008dea <__ascii_mbtowc+0x16>
 8008df2:	f06f 0001 	mvn.w	r0, #1
 8008df6:	e7f8      	b.n	8008dea <__ascii_mbtowc+0x16>

08008df8 <__ascii_wctomb>:
 8008df8:	b149      	cbz	r1, 8008e0e <__ascii_wctomb+0x16>
 8008dfa:	2aff      	cmp	r2, #255	; 0xff
 8008dfc:	bf85      	ittet	hi
 8008dfe:	238a      	movhi	r3, #138	; 0x8a
 8008e00:	6003      	strhi	r3, [r0, #0]
 8008e02:	700a      	strbls	r2, [r1, #0]
 8008e04:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8008e08:	bf98      	it	ls
 8008e0a:	2001      	movls	r0, #1
 8008e0c:	4770      	bx	lr
 8008e0e:	4608      	mov	r0, r1
 8008e10:	4770      	bx	lr
	...

08008e14 <fiprintf>:
 8008e14:	b40e      	push	{r1, r2, r3}
 8008e16:	b503      	push	{r0, r1, lr}
 8008e18:	4601      	mov	r1, r0
 8008e1a:	ab03      	add	r3, sp, #12
 8008e1c:	4805      	ldr	r0, [pc, #20]	; (8008e34 <fiprintf+0x20>)
 8008e1e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e22:	6800      	ldr	r0, [r0, #0]
 8008e24:	9301      	str	r3, [sp, #4]
 8008e26:	f000 f837 	bl	8008e98 <_vfiprintf_r>
 8008e2a:	b002      	add	sp, #8
 8008e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e30:	b003      	add	sp, #12
 8008e32:	4770      	bx	lr
 8008e34:	200007ac 	.word	0x200007ac

08008e38 <abort>:
 8008e38:	b508      	push	{r3, lr}
 8008e3a:	2006      	movs	r0, #6
 8008e3c:	f000 fa04 	bl	8009248 <raise>
 8008e40:	2001      	movs	r0, #1
 8008e42:	f7f8 fff7 	bl	8001e34 <_exit>

08008e46 <__sfputc_r>:
 8008e46:	6893      	ldr	r3, [r2, #8]
 8008e48:	3b01      	subs	r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	b410      	push	{r4}
 8008e4e:	6093      	str	r3, [r2, #8]
 8008e50:	da08      	bge.n	8008e64 <__sfputc_r+0x1e>
 8008e52:	6994      	ldr	r4, [r2, #24]
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	db01      	blt.n	8008e5c <__sfputc_r+0x16>
 8008e58:	290a      	cmp	r1, #10
 8008e5a:	d103      	bne.n	8008e64 <__sfputc_r+0x1e>
 8008e5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e60:	f000 b934 	b.w	80090cc <__swbuf_r>
 8008e64:	6813      	ldr	r3, [r2, #0]
 8008e66:	1c58      	adds	r0, r3, #1
 8008e68:	6010      	str	r0, [r2, #0]
 8008e6a:	7019      	strb	r1, [r3, #0]
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <__sfputs_r>:
 8008e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e76:	4606      	mov	r6, r0
 8008e78:	460f      	mov	r7, r1
 8008e7a:	4614      	mov	r4, r2
 8008e7c:	18d5      	adds	r5, r2, r3
 8008e7e:	42ac      	cmp	r4, r5
 8008e80:	d101      	bne.n	8008e86 <__sfputs_r+0x12>
 8008e82:	2000      	movs	r0, #0
 8008e84:	e007      	b.n	8008e96 <__sfputs_r+0x22>
 8008e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e8a:	463a      	mov	r2, r7
 8008e8c:	4630      	mov	r0, r6
 8008e8e:	f7ff ffda 	bl	8008e46 <__sfputc_r>
 8008e92:	1c43      	adds	r3, r0, #1
 8008e94:	d1f3      	bne.n	8008e7e <__sfputs_r+0xa>
 8008e96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008e98 <_vfiprintf_r>:
 8008e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e9c:	460d      	mov	r5, r1
 8008e9e:	b09d      	sub	sp, #116	; 0x74
 8008ea0:	4614      	mov	r4, r2
 8008ea2:	4698      	mov	r8, r3
 8008ea4:	4606      	mov	r6, r0
 8008ea6:	b118      	cbz	r0, 8008eb0 <_vfiprintf_r+0x18>
 8008ea8:	6a03      	ldr	r3, [r0, #32]
 8008eaa:	b90b      	cbnz	r3, 8008eb0 <_vfiprintf_r+0x18>
 8008eac:	f7fe f9ba 	bl	8007224 <__sinit>
 8008eb0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eb2:	07d9      	lsls	r1, r3, #31
 8008eb4:	d405      	bmi.n	8008ec2 <_vfiprintf_r+0x2a>
 8008eb6:	89ab      	ldrh	r3, [r5, #12]
 8008eb8:	059a      	lsls	r2, r3, #22
 8008eba:	d402      	bmi.n	8008ec2 <_vfiprintf_r+0x2a>
 8008ebc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ebe:	f7fe fad8 	bl	8007472 <__retarget_lock_acquire_recursive>
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	071b      	lsls	r3, r3, #28
 8008ec6:	d501      	bpl.n	8008ecc <_vfiprintf_r+0x34>
 8008ec8:	692b      	ldr	r3, [r5, #16]
 8008eca:	b99b      	cbnz	r3, 8008ef4 <_vfiprintf_r+0x5c>
 8008ecc:	4629      	mov	r1, r5
 8008ece:	4630      	mov	r0, r6
 8008ed0:	f000 f93a 	bl	8009148 <__swsetup_r>
 8008ed4:	b170      	cbz	r0, 8008ef4 <_vfiprintf_r+0x5c>
 8008ed6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ed8:	07dc      	lsls	r4, r3, #31
 8008eda:	d504      	bpl.n	8008ee6 <_vfiprintf_r+0x4e>
 8008edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ee0:	b01d      	add	sp, #116	; 0x74
 8008ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ee6:	89ab      	ldrh	r3, [r5, #12]
 8008ee8:	0598      	lsls	r0, r3, #22
 8008eea:	d4f7      	bmi.n	8008edc <_vfiprintf_r+0x44>
 8008eec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eee:	f7fe fac1 	bl	8007474 <__retarget_lock_release_recursive>
 8008ef2:	e7f3      	b.n	8008edc <_vfiprintf_r+0x44>
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	9309      	str	r3, [sp, #36]	; 0x24
 8008ef8:	2320      	movs	r3, #32
 8008efa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008efe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f02:	2330      	movs	r3, #48	; 0x30
 8008f04:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80090b8 <_vfiprintf_r+0x220>
 8008f08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f0c:	f04f 0901 	mov.w	r9, #1
 8008f10:	4623      	mov	r3, r4
 8008f12:	469a      	mov	sl, r3
 8008f14:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f18:	b10a      	cbz	r2, 8008f1e <_vfiprintf_r+0x86>
 8008f1a:	2a25      	cmp	r2, #37	; 0x25
 8008f1c:	d1f9      	bne.n	8008f12 <_vfiprintf_r+0x7a>
 8008f1e:	ebba 0b04 	subs.w	fp, sl, r4
 8008f22:	d00b      	beq.n	8008f3c <_vfiprintf_r+0xa4>
 8008f24:	465b      	mov	r3, fp
 8008f26:	4622      	mov	r2, r4
 8008f28:	4629      	mov	r1, r5
 8008f2a:	4630      	mov	r0, r6
 8008f2c:	f7ff ffa2 	bl	8008e74 <__sfputs_r>
 8008f30:	3001      	adds	r0, #1
 8008f32:	f000 80a9 	beq.w	8009088 <_vfiprintf_r+0x1f0>
 8008f36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f38:	445a      	add	r2, fp
 8008f3a:	9209      	str	r2, [sp, #36]	; 0x24
 8008f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	f000 80a1 	beq.w	8009088 <_vfiprintf_r+0x1f0>
 8008f46:	2300      	movs	r3, #0
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f4c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f50:	f10a 0a01 	add.w	sl, sl, #1
 8008f54:	9304      	str	r3, [sp, #16]
 8008f56:	9307      	str	r3, [sp, #28]
 8008f58:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f5c:	931a      	str	r3, [sp, #104]	; 0x68
 8008f5e:	4654      	mov	r4, sl
 8008f60:	2205      	movs	r2, #5
 8008f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f66:	4854      	ldr	r0, [pc, #336]	; (80090b8 <_vfiprintf_r+0x220>)
 8008f68:	f7f7 f932 	bl	80001d0 <memchr>
 8008f6c:	9a04      	ldr	r2, [sp, #16]
 8008f6e:	b9d8      	cbnz	r0, 8008fa8 <_vfiprintf_r+0x110>
 8008f70:	06d1      	lsls	r1, r2, #27
 8008f72:	bf44      	itt	mi
 8008f74:	2320      	movmi	r3, #32
 8008f76:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f7a:	0713      	lsls	r3, r2, #28
 8008f7c:	bf44      	itt	mi
 8008f7e:	232b      	movmi	r3, #43	; 0x2b
 8008f80:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f84:	f89a 3000 	ldrb.w	r3, [sl]
 8008f88:	2b2a      	cmp	r3, #42	; 0x2a
 8008f8a:	d015      	beq.n	8008fb8 <_vfiprintf_r+0x120>
 8008f8c:	9a07      	ldr	r2, [sp, #28]
 8008f8e:	4654      	mov	r4, sl
 8008f90:	2000      	movs	r0, #0
 8008f92:	f04f 0c0a 	mov.w	ip, #10
 8008f96:	4621      	mov	r1, r4
 8008f98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f9c:	3b30      	subs	r3, #48	; 0x30
 8008f9e:	2b09      	cmp	r3, #9
 8008fa0:	d94d      	bls.n	800903e <_vfiprintf_r+0x1a6>
 8008fa2:	b1b0      	cbz	r0, 8008fd2 <_vfiprintf_r+0x13a>
 8008fa4:	9207      	str	r2, [sp, #28]
 8008fa6:	e014      	b.n	8008fd2 <_vfiprintf_r+0x13a>
 8008fa8:	eba0 0308 	sub.w	r3, r0, r8
 8008fac:	fa09 f303 	lsl.w	r3, r9, r3
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	46a2      	mov	sl, r4
 8008fb6:	e7d2      	b.n	8008f5e <_vfiprintf_r+0xc6>
 8008fb8:	9b03      	ldr	r3, [sp, #12]
 8008fba:	1d19      	adds	r1, r3, #4
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	9103      	str	r1, [sp, #12]
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	bfbb      	ittet	lt
 8008fc4:	425b      	neglt	r3, r3
 8008fc6:	f042 0202 	orrlt.w	r2, r2, #2
 8008fca:	9307      	strge	r3, [sp, #28]
 8008fcc:	9307      	strlt	r3, [sp, #28]
 8008fce:	bfb8      	it	lt
 8008fd0:	9204      	strlt	r2, [sp, #16]
 8008fd2:	7823      	ldrb	r3, [r4, #0]
 8008fd4:	2b2e      	cmp	r3, #46	; 0x2e
 8008fd6:	d10c      	bne.n	8008ff2 <_vfiprintf_r+0x15a>
 8008fd8:	7863      	ldrb	r3, [r4, #1]
 8008fda:	2b2a      	cmp	r3, #42	; 0x2a
 8008fdc:	d134      	bne.n	8009048 <_vfiprintf_r+0x1b0>
 8008fde:	9b03      	ldr	r3, [sp, #12]
 8008fe0:	1d1a      	adds	r2, r3, #4
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	9203      	str	r2, [sp, #12]
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bfb8      	it	lt
 8008fea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008fee:	3402      	adds	r4, #2
 8008ff0:	9305      	str	r3, [sp, #20]
 8008ff2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80090c8 <_vfiprintf_r+0x230>
 8008ff6:	7821      	ldrb	r1, [r4, #0]
 8008ff8:	2203      	movs	r2, #3
 8008ffa:	4650      	mov	r0, sl
 8008ffc:	f7f7 f8e8 	bl	80001d0 <memchr>
 8009000:	b138      	cbz	r0, 8009012 <_vfiprintf_r+0x17a>
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	eba0 000a 	sub.w	r0, r0, sl
 8009008:	2240      	movs	r2, #64	; 0x40
 800900a:	4082      	lsls	r2, r0
 800900c:	4313      	orrs	r3, r2
 800900e:	3401      	adds	r4, #1
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009016:	4829      	ldr	r0, [pc, #164]	; (80090bc <_vfiprintf_r+0x224>)
 8009018:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800901c:	2206      	movs	r2, #6
 800901e:	f7f7 f8d7 	bl	80001d0 <memchr>
 8009022:	2800      	cmp	r0, #0
 8009024:	d03f      	beq.n	80090a6 <_vfiprintf_r+0x20e>
 8009026:	4b26      	ldr	r3, [pc, #152]	; (80090c0 <_vfiprintf_r+0x228>)
 8009028:	bb1b      	cbnz	r3, 8009072 <_vfiprintf_r+0x1da>
 800902a:	9b03      	ldr	r3, [sp, #12]
 800902c:	3307      	adds	r3, #7
 800902e:	f023 0307 	bic.w	r3, r3, #7
 8009032:	3308      	adds	r3, #8
 8009034:	9303      	str	r3, [sp, #12]
 8009036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009038:	443b      	add	r3, r7
 800903a:	9309      	str	r3, [sp, #36]	; 0x24
 800903c:	e768      	b.n	8008f10 <_vfiprintf_r+0x78>
 800903e:	fb0c 3202 	mla	r2, ip, r2, r3
 8009042:	460c      	mov	r4, r1
 8009044:	2001      	movs	r0, #1
 8009046:	e7a6      	b.n	8008f96 <_vfiprintf_r+0xfe>
 8009048:	2300      	movs	r3, #0
 800904a:	3401      	adds	r4, #1
 800904c:	9305      	str	r3, [sp, #20]
 800904e:	4619      	mov	r1, r3
 8009050:	f04f 0c0a 	mov.w	ip, #10
 8009054:	4620      	mov	r0, r4
 8009056:	f810 2b01 	ldrb.w	r2, [r0], #1
 800905a:	3a30      	subs	r2, #48	; 0x30
 800905c:	2a09      	cmp	r2, #9
 800905e:	d903      	bls.n	8009068 <_vfiprintf_r+0x1d0>
 8009060:	2b00      	cmp	r3, #0
 8009062:	d0c6      	beq.n	8008ff2 <_vfiprintf_r+0x15a>
 8009064:	9105      	str	r1, [sp, #20]
 8009066:	e7c4      	b.n	8008ff2 <_vfiprintf_r+0x15a>
 8009068:	fb0c 2101 	mla	r1, ip, r1, r2
 800906c:	4604      	mov	r4, r0
 800906e:	2301      	movs	r3, #1
 8009070:	e7f0      	b.n	8009054 <_vfiprintf_r+0x1bc>
 8009072:	ab03      	add	r3, sp, #12
 8009074:	9300      	str	r3, [sp, #0]
 8009076:	462a      	mov	r2, r5
 8009078:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <_vfiprintf_r+0x22c>)
 800907a:	a904      	add	r1, sp, #16
 800907c:	4630      	mov	r0, r6
 800907e:	f7fd fc7f 	bl	8006980 <_printf_float>
 8009082:	4607      	mov	r7, r0
 8009084:	1c78      	adds	r0, r7, #1
 8009086:	d1d6      	bne.n	8009036 <_vfiprintf_r+0x19e>
 8009088:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800908a:	07d9      	lsls	r1, r3, #31
 800908c:	d405      	bmi.n	800909a <_vfiprintf_r+0x202>
 800908e:	89ab      	ldrh	r3, [r5, #12]
 8009090:	059a      	lsls	r2, r3, #22
 8009092:	d402      	bmi.n	800909a <_vfiprintf_r+0x202>
 8009094:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009096:	f7fe f9ed 	bl	8007474 <__retarget_lock_release_recursive>
 800909a:	89ab      	ldrh	r3, [r5, #12]
 800909c:	065b      	lsls	r3, r3, #25
 800909e:	f53f af1d 	bmi.w	8008edc <_vfiprintf_r+0x44>
 80090a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090a4:	e71c      	b.n	8008ee0 <_vfiprintf_r+0x48>
 80090a6:	ab03      	add	r3, sp, #12
 80090a8:	9300      	str	r3, [sp, #0]
 80090aa:	462a      	mov	r2, r5
 80090ac:	4b05      	ldr	r3, [pc, #20]	; (80090c4 <_vfiprintf_r+0x22c>)
 80090ae:	a904      	add	r1, sp, #16
 80090b0:	4630      	mov	r0, r6
 80090b2:	f7fd ff09 	bl	8006ec8 <_printf_i>
 80090b6:	e7e4      	b.n	8009082 <_vfiprintf_r+0x1ea>
 80090b8:	080127b4 	.word	0x080127b4
 80090bc:	080127be 	.word	0x080127be
 80090c0:	08006981 	.word	0x08006981
 80090c4:	08008e75 	.word	0x08008e75
 80090c8:	080127ba 	.word	0x080127ba

080090cc <__swbuf_r>:
 80090cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090ce:	460e      	mov	r6, r1
 80090d0:	4614      	mov	r4, r2
 80090d2:	4605      	mov	r5, r0
 80090d4:	b118      	cbz	r0, 80090de <__swbuf_r+0x12>
 80090d6:	6a03      	ldr	r3, [r0, #32]
 80090d8:	b90b      	cbnz	r3, 80090de <__swbuf_r+0x12>
 80090da:	f7fe f8a3 	bl	8007224 <__sinit>
 80090de:	69a3      	ldr	r3, [r4, #24]
 80090e0:	60a3      	str	r3, [r4, #8]
 80090e2:	89a3      	ldrh	r3, [r4, #12]
 80090e4:	071a      	lsls	r2, r3, #28
 80090e6:	d525      	bpl.n	8009134 <__swbuf_r+0x68>
 80090e8:	6923      	ldr	r3, [r4, #16]
 80090ea:	b31b      	cbz	r3, 8009134 <__swbuf_r+0x68>
 80090ec:	6823      	ldr	r3, [r4, #0]
 80090ee:	6922      	ldr	r2, [r4, #16]
 80090f0:	1a98      	subs	r0, r3, r2
 80090f2:	6963      	ldr	r3, [r4, #20]
 80090f4:	b2f6      	uxtb	r6, r6
 80090f6:	4283      	cmp	r3, r0
 80090f8:	4637      	mov	r7, r6
 80090fa:	dc04      	bgt.n	8009106 <__swbuf_r+0x3a>
 80090fc:	4621      	mov	r1, r4
 80090fe:	4628      	mov	r0, r5
 8009100:	f7ff fdf2 	bl	8008ce8 <_fflush_r>
 8009104:	b9e0      	cbnz	r0, 8009140 <__swbuf_r+0x74>
 8009106:	68a3      	ldr	r3, [r4, #8]
 8009108:	3b01      	subs	r3, #1
 800910a:	60a3      	str	r3, [r4, #8]
 800910c:	6823      	ldr	r3, [r4, #0]
 800910e:	1c5a      	adds	r2, r3, #1
 8009110:	6022      	str	r2, [r4, #0]
 8009112:	701e      	strb	r6, [r3, #0]
 8009114:	6962      	ldr	r2, [r4, #20]
 8009116:	1c43      	adds	r3, r0, #1
 8009118:	429a      	cmp	r2, r3
 800911a:	d004      	beq.n	8009126 <__swbuf_r+0x5a>
 800911c:	89a3      	ldrh	r3, [r4, #12]
 800911e:	07db      	lsls	r3, r3, #31
 8009120:	d506      	bpl.n	8009130 <__swbuf_r+0x64>
 8009122:	2e0a      	cmp	r6, #10
 8009124:	d104      	bne.n	8009130 <__swbuf_r+0x64>
 8009126:	4621      	mov	r1, r4
 8009128:	4628      	mov	r0, r5
 800912a:	f7ff fddd 	bl	8008ce8 <_fflush_r>
 800912e:	b938      	cbnz	r0, 8009140 <__swbuf_r+0x74>
 8009130:	4638      	mov	r0, r7
 8009132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009134:	4621      	mov	r1, r4
 8009136:	4628      	mov	r0, r5
 8009138:	f000 f806 	bl	8009148 <__swsetup_r>
 800913c:	2800      	cmp	r0, #0
 800913e:	d0d5      	beq.n	80090ec <__swbuf_r+0x20>
 8009140:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009144:	e7f4      	b.n	8009130 <__swbuf_r+0x64>
	...

08009148 <__swsetup_r>:
 8009148:	b538      	push	{r3, r4, r5, lr}
 800914a:	4b2a      	ldr	r3, [pc, #168]	; (80091f4 <__swsetup_r+0xac>)
 800914c:	4605      	mov	r5, r0
 800914e:	6818      	ldr	r0, [r3, #0]
 8009150:	460c      	mov	r4, r1
 8009152:	b118      	cbz	r0, 800915c <__swsetup_r+0x14>
 8009154:	6a03      	ldr	r3, [r0, #32]
 8009156:	b90b      	cbnz	r3, 800915c <__swsetup_r+0x14>
 8009158:	f7fe f864 	bl	8007224 <__sinit>
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009162:	0718      	lsls	r0, r3, #28
 8009164:	d422      	bmi.n	80091ac <__swsetup_r+0x64>
 8009166:	06d9      	lsls	r1, r3, #27
 8009168:	d407      	bmi.n	800917a <__swsetup_r+0x32>
 800916a:	2309      	movs	r3, #9
 800916c:	602b      	str	r3, [r5, #0]
 800916e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009172:	81a3      	strh	r3, [r4, #12]
 8009174:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009178:	e034      	b.n	80091e4 <__swsetup_r+0x9c>
 800917a:	0758      	lsls	r0, r3, #29
 800917c:	d512      	bpl.n	80091a4 <__swsetup_r+0x5c>
 800917e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009180:	b141      	cbz	r1, 8009194 <__swsetup_r+0x4c>
 8009182:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009186:	4299      	cmp	r1, r3
 8009188:	d002      	beq.n	8009190 <__swsetup_r+0x48>
 800918a:	4628      	mov	r0, r5
 800918c:	f7fe fffe 	bl	800818c <_free_r>
 8009190:	2300      	movs	r3, #0
 8009192:	6363      	str	r3, [r4, #52]	; 0x34
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800919a:	81a3      	strh	r3, [r4, #12]
 800919c:	2300      	movs	r3, #0
 800919e:	6063      	str	r3, [r4, #4]
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	89a3      	ldrh	r3, [r4, #12]
 80091a6:	f043 0308 	orr.w	r3, r3, #8
 80091aa:	81a3      	strh	r3, [r4, #12]
 80091ac:	6923      	ldr	r3, [r4, #16]
 80091ae:	b94b      	cbnz	r3, 80091c4 <__swsetup_r+0x7c>
 80091b0:	89a3      	ldrh	r3, [r4, #12]
 80091b2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80091b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80091ba:	d003      	beq.n	80091c4 <__swsetup_r+0x7c>
 80091bc:	4621      	mov	r1, r4
 80091be:	4628      	mov	r0, r5
 80091c0:	f000 f884 	bl	80092cc <__smakebuf_r>
 80091c4:	89a0      	ldrh	r0, [r4, #12]
 80091c6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80091ca:	f010 0301 	ands.w	r3, r0, #1
 80091ce:	d00a      	beq.n	80091e6 <__swsetup_r+0x9e>
 80091d0:	2300      	movs	r3, #0
 80091d2:	60a3      	str	r3, [r4, #8]
 80091d4:	6963      	ldr	r3, [r4, #20]
 80091d6:	425b      	negs	r3, r3
 80091d8:	61a3      	str	r3, [r4, #24]
 80091da:	6923      	ldr	r3, [r4, #16]
 80091dc:	b943      	cbnz	r3, 80091f0 <__swsetup_r+0xa8>
 80091de:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80091e2:	d1c4      	bne.n	800916e <__swsetup_r+0x26>
 80091e4:	bd38      	pop	{r3, r4, r5, pc}
 80091e6:	0781      	lsls	r1, r0, #30
 80091e8:	bf58      	it	pl
 80091ea:	6963      	ldrpl	r3, [r4, #20]
 80091ec:	60a3      	str	r3, [r4, #8]
 80091ee:	e7f4      	b.n	80091da <__swsetup_r+0x92>
 80091f0:	2000      	movs	r0, #0
 80091f2:	e7f7      	b.n	80091e4 <__swsetup_r+0x9c>
 80091f4:	200007ac 	.word	0x200007ac

080091f8 <_raise_r>:
 80091f8:	291f      	cmp	r1, #31
 80091fa:	b538      	push	{r3, r4, r5, lr}
 80091fc:	4604      	mov	r4, r0
 80091fe:	460d      	mov	r5, r1
 8009200:	d904      	bls.n	800920c <_raise_r+0x14>
 8009202:	2316      	movs	r3, #22
 8009204:	6003      	str	r3, [r0, #0]
 8009206:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800920a:	bd38      	pop	{r3, r4, r5, pc}
 800920c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800920e:	b112      	cbz	r2, 8009216 <_raise_r+0x1e>
 8009210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009214:	b94b      	cbnz	r3, 800922a <_raise_r+0x32>
 8009216:	4620      	mov	r0, r4
 8009218:	f000 f830 	bl	800927c <_getpid_r>
 800921c:	462a      	mov	r2, r5
 800921e:	4601      	mov	r1, r0
 8009220:	4620      	mov	r0, r4
 8009222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009226:	f000 b817 	b.w	8009258 <_kill_r>
 800922a:	2b01      	cmp	r3, #1
 800922c:	d00a      	beq.n	8009244 <_raise_r+0x4c>
 800922e:	1c59      	adds	r1, r3, #1
 8009230:	d103      	bne.n	800923a <_raise_r+0x42>
 8009232:	2316      	movs	r3, #22
 8009234:	6003      	str	r3, [r0, #0]
 8009236:	2001      	movs	r0, #1
 8009238:	e7e7      	b.n	800920a <_raise_r+0x12>
 800923a:	2400      	movs	r4, #0
 800923c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009240:	4628      	mov	r0, r5
 8009242:	4798      	blx	r3
 8009244:	2000      	movs	r0, #0
 8009246:	e7e0      	b.n	800920a <_raise_r+0x12>

08009248 <raise>:
 8009248:	4b02      	ldr	r3, [pc, #8]	; (8009254 <raise+0xc>)
 800924a:	4601      	mov	r1, r0
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	f7ff bfd3 	b.w	80091f8 <_raise_r>
 8009252:	bf00      	nop
 8009254:	200007ac 	.word	0x200007ac

08009258 <_kill_r>:
 8009258:	b538      	push	{r3, r4, r5, lr}
 800925a:	4d07      	ldr	r5, [pc, #28]	; (8009278 <_kill_r+0x20>)
 800925c:	2300      	movs	r3, #0
 800925e:	4604      	mov	r4, r0
 8009260:	4608      	mov	r0, r1
 8009262:	4611      	mov	r1, r2
 8009264:	602b      	str	r3, [r5, #0]
 8009266:	f7f8 fdd5 	bl	8001e14 <_kill>
 800926a:	1c43      	adds	r3, r0, #1
 800926c:	d102      	bne.n	8009274 <_kill_r+0x1c>
 800926e:	682b      	ldr	r3, [r5, #0]
 8009270:	b103      	cbz	r3, 8009274 <_kill_r+0x1c>
 8009272:	6023      	str	r3, [r4, #0]
 8009274:	bd38      	pop	{r3, r4, r5, pc}
 8009276:	bf00      	nop
 8009278:	20000c64 	.word	0x20000c64

0800927c <_getpid_r>:
 800927c:	f7f8 bdc2 	b.w	8001e04 <_getpid>

08009280 <__swhatbuf_r>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	460c      	mov	r4, r1
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	2900      	cmp	r1, #0
 800928a:	b096      	sub	sp, #88	; 0x58
 800928c:	4615      	mov	r5, r2
 800928e:	461e      	mov	r6, r3
 8009290:	da0d      	bge.n	80092ae <__swhatbuf_r+0x2e>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009298:	f04f 0100 	mov.w	r1, #0
 800929c:	bf0c      	ite	eq
 800929e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80092a2:	2340      	movne	r3, #64	; 0x40
 80092a4:	2000      	movs	r0, #0
 80092a6:	6031      	str	r1, [r6, #0]
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	b016      	add	sp, #88	; 0x58
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	466a      	mov	r2, sp
 80092b0:	f000 f848 	bl	8009344 <_fstat_r>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	dbec      	blt.n	8009292 <__swhatbuf_r+0x12>
 80092b8:	9901      	ldr	r1, [sp, #4]
 80092ba:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80092be:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80092c2:	4259      	negs	r1, r3
 80092c4:	4159      	adcs	r1, r3
 80092c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80092ca:	e7eb      	b.n	80092a4 <__swhatbuf_r+0x24>

080092cc <__smakebuf_r>:
 80092cc:	898b      	ldrh	r3, [r1, #12]
 80092ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80092d0:	079d      	lsls	r5, r3, #30
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	d507      	bpl.n	80092e8 <__smakebuf_r+0x1c>
 80092d8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	2301      	movs	r3, #1
 80092e2:	6163      	str	r3, [r4, #20]
 80092e4:	b002      	add	sp, #8
 80092e6:	bd70      	pop	{r4, r5, r6, pc}
 80092e8:	ab01      	add	r3, sp, #4
 80092ea:	466a      	mov	r2, sp
 80092ec:	f7ff ffc8 	bl	8009280 <__swhatbuf_r>
 80092f0:	9900      	ldr	r1, [sp, #0]
 80092f2:	4605      	mov	r5, r0
 80092f4:	4630      	mov	r0, r6
 80092f6:	f7fd f9e7 	bl	80066c8 <_malloc_r>
 80092fa:	b948      	cbnz	r0, 8009310 <__smakebuf_r+0x44>
 80092fc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009300:	059a      	lsls	r2, r3, #22
 8009302:	d4ef      	bmi.n	80092e4 <__smakebuf_r+0x18>
 8009304:	f023 0303 	bic.w	r3, r3, #3
 8009308:	f043 0302 	orr.w	r3, r3, #2
 800930c:	81a3      	strh	r3, [r4, #12]
 800930e:	e7e3      	b.n	80092d8 <__smakebuf_r+0xc>
 8009310:	89a3      	ldrh	r3, [r4, #12]
 8009312:	6020      	str	r0, [r4, #0]
 8009314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009318:	81a3      	strh	r3, [r4, #12]
 800931a:	9b00      	ldr	r3, [sp, #0]
 800931c:	6163      	str	r3, [r4, #20]
 800931e:	9b01      	ldr	r3, [sp, #4]
 8009320:	6120      	str	r0, [r4, #16]
 8009322:	b15b      	cbz	r3, 800933c <__smakebuf_r+0x70>
 8009324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009328:	4630      	mov	r0, r6
 800932a:	f000 f81d 	bl	8009368 <_isatty_r>
 800932e:	b128      	cbz	r0, 800933c <__smakebuf_r+0x70>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	431d      	orrs	r5, r3
 8009340:	81a5      	strh	r5, [r4, #12]
 8009342:	e7cf      	b.n	80092e4 <__smakebuf_r+0x18>

08009344 <_fstat_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d07      	ldr	r5, [pc, #28]	; (8009364 <_fstat_r+0x20>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	f7f8 fdbe 	bl	8001ed2 <_fstat>
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d102      	bne.n	8009360 <_fstat_r+0x1c>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	b103      	cbz	r3, 8009360 <_fstat_r+0x1c>
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	20000c64 	.word	0x20000c64

08009368 <_isatty_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	; (8009384 <_isatty_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f8 fdbd 	bl	8001ef2 <_isatty>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_isatty_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_isatty_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20000c64 	.word	0x20000c64

08009388 <expf>:
 8009388:	b508      	push	{r3, lr}
 800938a:	ed2d 8b02 	vpush	{d8}
 800938e:	eef0 8a40 	vmov.f32	s17, s0
 8009392:	f000 f85f 	bl	8009454 <__ieee754_expf>
 8009396:	eeb0 8a40 	vmov.f32	s16, s0
 800939a:	eeb0 0a68 	vmov.f32	s0, s17
 800939e:	f000 f829 	bl	80093f4 <finitef>
 80093a2:	b160      	cbz	r0, 80093be <expf+0x36>
 80093a4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80093e4 <expf+0x5c>
 80093a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80093ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093b0:	dd0a      	ble.n	80093c8 <expf+0x40>
 80093b2:	f7fe f833 	bl	800741c <__errno>
 80093b6:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 80093e8 <expf+0x60>
 80093ba:	2322      	movs	r3, #34	; 0x22
 80093bc:	6003      	str	r3, [r0, #0]
 80093be:	eeb0 0a48 	vmov.f32	s0, s16
 80093c2:	ecbd 8b02 	vpop	{d8}
 80093c6:	bd08      	pop	{r3, pc}
 80093c8:	eddf 7a08 	vldr	s15, [pc, #32]	; 80093ec <expf+0x64>
 80093cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80093d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80093d4:	d5f3      	bpl.n	80093be <expf+0x36>
 80093d6:	f7fe f821 	bl	800741c <__errno>
 80093da:	2322      	movs	r3, #34	; 0x22
 80093dc:	ed9f 8a04 	vldr	s16, [pc, #16]	; 80093f0 <expf+0x68>
 80093e0:	6003      	str	r3, [r0, #0]
 80093e2:	e7ec      	b.n	80093be <expf+0x36>
 80093e4:	42b17217 	.word	0x42b17217
 80093e8:	7f800000 	.word	0x7f800000
 80093ec:	c2cff1b5 	.word	0xc2cff1b5
 80093f0:	00000000 	.word	0x00000000

080093f4 <finitef>:
 80093f4:	b082      	sub	sp, #8
 80093f6:	ed8d 0a01 	vstr	s0, [sp, #4]
 80093fa:	9801      	ldr	r0, [sp, #4]
 80093fc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009400:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009404:	bfac      	ite	ge
 8009406:	2000      	movge	r0, #0
 8009408:	2001      	movlt	r0, #1
 800940a:	b002      	add	sp, #8
 800940c:	4770      	bx	lr

0800940e <with_errnof>:
 800940e:	b513      	push	{r0, r1, r4, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009416:	f7fe f801 	bl	800741c <__errno>
 800941a:	ed9d 0a01 	vldr	s0, [sp, #4]
 800941e:	6004      	str	r4, [r0, #0]
 8009420:	b002      	add	sp, #8
 8009422:	bd10      	pop	{r4, pc}

08009424 <xflowf>:
 8009424:	b130      	cbz	r0, 8009434 <xflowf+0x10>
 8009426:	eef1 7a40 	vneg.f32	s15, s0
 800942a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800942e:	2022      	movs	r0, #34	; 0x22
 8009430:	f7ff bfed 	b.w	800940e <with_errnof>
 8009434:	eef0 7a40 	vmov.f32	s15, s0
 8009438:	e7f7      	b.n	800942a <xflowf+0x6>
	...

0800943c <__math_uflowf>:
 800943c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009444 <__math_uflowf+0x8>
 8009440:	f7ff bff0 	b.w	8009424 <xflowf>
 8009444:	10000000 	.word	0x10000000

08009448 <__math_oflowf>:
 8009448:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009450 <__math_oflowf+0x8>
 800944c:	f7ff bfea 	b.w	8009424 <xflowf>
 8009450:	70000000 	.word	0x70000000

08009454 <__ieee754_expf>:
 8009454:	ee10 2a10 	vmov	r2, s0
 8009458:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800945c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009460:	d902      	bls.n	8009468 <__ieee754_expf+0x14>
 8009462:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009466:	4770      	bx	lr
 8009468:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800946c:	d106      	bne.n	800947c <__ieee754_expf+0x28>
 800946e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 80095a8 <__ieee754_expf+0x154>
 8009472:	2900      	cmp	r1, #0
 8009474:	bf18      	it	ne
 8009476:	eeb0 0a67 	vmovne.f32	s0, s15
 800947a:	4770      	bx	lr
 800947c:	484b      	ldr	r0, [pc, #300]	; (80095ac <__ieee754_expf+0x158>)
 800947e:	4282      	cmp	r2, r0
 8009480:	dd02      	ble.n	8009488 <__ieee754_expf+0x34>
 8009482:	2000      	movs	r0, #0
 8009484:	f7ff bfe0 	b.w	8009448 <__math_oflowf>
 8009488:	2a00      	cmp	r2, #0
 800948a:	da05      	bge.n	8009498 <__ieee754_expf+0x44>
 800948c:	4a48      	ldr	r2, [pc, #288]	; (80095b0 <__ieee754_expf+0x15c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d902      	bls.n	8009498 <__ieee754_expf+0x44>
 8009492:	2000      	movs	r0, #0
 8009494:	f7ff bfd2 	b.w	800943c <__math_uflowf>
 8009498:	4a46      	ldr	r2, [pc, #280]	; (80095b4 <__ieee754_expf+0x160>)
 800949a:	4293      	cmp	r3, r2
 800949c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80094a0:	d952      	bls.n	8009548 <__ieee754_expf+0xf4>
 80094a2:	4a45      	ldr	r2, [pc, #276]	; (80095b8 <__ieee754_expf+0x164>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 80094aa:	d834      	bhi.n	8009516 <__ieee754_expf+0xc2>
 80094ac:	4b43      	ldr	r3, [pc, #268]	; (80095bc <__ieee754_expf+0x168>)
 80094ae:	4413      	add	r3, r2
 80094b0:	ed93 7a00 	vldr	s14, [r3]
 80094b4:	4b42      	ldr	r3, [pc, #264]	; (80095c0 <__ieee754_expf+0x16c>)
 80094b6:	4413      	add	r3, r2
 80094b8:	ee30 7a47 	vsub.f32	s14, s0, s14
 80094bc:	f1c1 0201 	rsb	r2, r1, #1
 80094c0:	edd3 7a00 	vldr	s15, [r3]
 80094c4:	1a52      	subs	r2, r2, r1
 80094c6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80094ca:	ee20 6a00 	vmul.f32	s12, s0, s0
 80094ce:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 80095c4 <__ieee754_expf+0x170>
 80094d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80095c8 <__ieee754_expf+0x174>
 80094d6:	eee6 6a05 	vfma.f32	s13, s12, s10
 80094da:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80095cc <__ieee754_expf+0x178>
 80094de:	eea6 5a86 	vfma.f32	s10, s13, s12
 80094e2:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80095d0 <__ieee754_expf+0x17c>
 80094e6:	eee5 6a06 	vfma.f32	s13, s10, s12
 80094ea:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80095d4 <__ieee754_expf+0x180>
 80094ee:	eea6 5a86 	vfma.f32	s10, s13, s12
 80094f2:	eef0 6a40 	vmov.f32	s13, s0
 80094f6:	eee5 6a46 	vfms.f32	s13, s10, s12
 80094fa:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 80094fe:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009502:	bb92      	cbnz	r2, 800956a <__ieee754_expf+0x116>
 8009504:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009508:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800950c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009510:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009514:	4770      	bx	lr
 8009516:	4b30      	ldr	r3, [pc, #192]	; (80095d8 <__ieee754_expf+0x184>)
 8009518:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80095dc <__ieee754_expf+0x188>
 800951c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80095e0 <__ieee754_expf+0x18c>
 8009520:	4413      	add	r3, r2
 8009522:	edd3 7a00 	vldr	s15, [r3]
 8009526:	eee0 7a07 	vfma.f32	s15, s0, s14
 800952a:	eeb0 7a40 	vmov.f32	s14, s0
 800952e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009532:	ee17 2a90 	vmov	r2, s15
 8009536:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800953a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800953e:	eddf 6a29 	vldr	s13, [pc, #164]	; 80095e4 <__ieee754_expf+0x190>
 8009542:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009546:	e7be      	b.n	80094c6 <__ieee754_expf+0x72>
 8009548:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800954c:	d20b      	bcs.n	8009566 <__ieee754_expf+0x112>
 800954e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80095e8 <__ieee754_expf+0x194>
 8009552:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009556:	eef4 6ae5 	vcmpe.f32	s13, s11
 800955a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800955e:	dd02      	ble.n	8009566 <__ieee754_expf+0x112>
 8009560:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009564:	4770      	bx	lr
 8009566:	2200      	movs	r2, #0
 8009568:	e7af      	b.n	80094ca <__ieee754_expf+0x76>
 800956a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800956e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009572:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009576:	bfb8      	it	lt
 8009578:	3264      	addlt	r2, #100	; 0x64
 800957a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800957e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009582:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009586:	ee17 3a90 	vmov	r3, s15
 800958a:	bfab      	itete	ge
 800958c:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009590:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009594:	ee00 3a10 	vmovge	s0, r3
 8009598:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 80095ec <__ieee754_expf+0x198>
 800959c:	bfbc      	itt	lt
 800959e:	ee00 3a10 	vmovlt	s0, r3
 80095a2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 80095a6:	4770      	bx	lr
 80095a8:	00000000 	.word	0x00000000
 80095ac:	42b17217 	.word	0x42b17217
 80095b0:	42cff1b5 	.word	0x42cff1b5
 80095b4:	3eb17218 	.word	0x3eb17218
 80095b8:	3f851591 	.word	0x3f851591
 80095bc:	08012914 	.word	0x08012914
 80095c0:	0801291c 	.word	0x0801291c
 80095c4:	3331bb4c 	.word	0x3331bb4c
 80095c8:	b5ddea0e 	.word	0xb5ddea0e
 80095cc:	388ab355 	.word	0x388ab355
 80095d0:	bb360b61 	.word	0xbb360b61
 80095d4:	3e2aaaab 	.word	0x3e2aaaab
 80095d8:	0801290c 	.word	0x0801290c
 80095dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80095e0:	3f317180 	.word	0x3f317180
 80095e4:	3717f7d1 	.word	0x3717f7d1
 80095e8:	7149f2ca 	.word	0x7149f2ca
 80095ec:	0d800000 	.word	0x0d800000

080095f0 <_init>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr

080095fc <_fini>:
 80095fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095fe:	bf00      	nop
 8009600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009602:	bc08      	pop	{r3}
 8009604:	469e      	mov	lr, r3
 8009606:	4770      	bx	lr
